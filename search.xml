<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hie with the Pie（Floyd+状压dp）]]></title>
    <url>%2FHie-with-the-Pie%2F</url>
    <content type="text"><![CDATA[描述传送门：poj-3311 &emsp;The Pizazz Pizzeria prides itself in delivering pizzas to its customers as fast as possible. Unfortunately, due to cutbacks, they can afford to hire only one driver to do the deliveries. He will wait for 1 or more (up to 10) orders to be processed before he starts any deliveries. Needless to say, he would like to take the shortest route in delivering these goodies and returning to the pizzeria, even if it means passing the same location(s) or the pizzeria more than once on the way. He has commissioned you to write a program to help him. Input Input will consist of multiple test cases. The first line will contain a single integer n indicating the number of orders to deliver, where 1 ≤ n ≤ 10. After this will be n + 1 lines each containing n + 1 integers indicating the times to travel between the pizzeria (numbered 0) and the n locations (numbers 1 to n). The jth value on the ith line indicates the time to go directly from location i to location j without visiting any other locations along the way. Note that there may be quicker ways to go from i to j via other locations, due to different speed limits, traffic lights, etc. Also, the time values may not be symmetric, i.e., the time to go directly from location i to j may not be the same as the time to go directly from location j to i. An input value of n = 0 will terminate input. Output For each test case, you should output a single number indicating the minimum time to deliver all of the pizzas and return to the pizzeria. Examples intput 12345630 1 10 101 0 1 210 1 0 1010 2 10 00 output 18 题目大意 给你一个有$n+1$，$(1&lt;=n&lt;=10)$个点的有向完全图，用矩阵的形式给出任意两个不同点之间的距离。（其中从$i$到$j$的距离不一定等于从$j$到$i$的距离）现在要你求出从$0$号点出发，走过$1$到$n$号点至少一次，然后再回到$0$号点所花的最小时间。 思路 先用floyd $O(n^3)$预处理出任意两个点之间的最短距离。 用一个11位的二进制数表示状态，1表示要经过这个点，0表示不经过。 $dp[state][j]$: 在$state$状态下$0$点到达$j$点的最短路。如果state状态里面经过了i，并且没有经过j，那么就能通过dp[state][i]更新dp[state|(1&lt;&lt;j)][j]。 这道题的状态和状态转移方程和zoj-3471很像：dp[state|(1]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
        <tag>状压dp</tag>
        <tag>dp</tag>
        <tag>状压</tag>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mondriaan's Dream（dfs+状压dp）]]></title>
    <url>%2FMondriaan-s-Dream%2F</url>
    <content type="text"><![CDATA[描述传送门：poj-2411 &emsp;Squares and rectangles fascinated the famous Dutch painter Piet Mondriaan. One night, after producing the drawings in his ‘toilet series’ (where he had to use his toilet paper to draw on, for all of his paper was filled with squares and rectangles), he dreamt of filling a large rectangle with small rectangles of width 2 and height 1 in varying ways.&emsp;Expert as he was in this material, he saw at a glance that he’ll need a computer to calculate the number of ways to fill the large rectangle whose dimensions were integer values, as well. Help him, so that his dream won’t turn into a nightmare! InputThe input contains several test cases. Each test case is made up of two integer numbers: the height h and the width w of the large rectangle. Input is terminated by $h=w=0$. Otherwise, $1&lt;=h,w&lt;=11$. Output For each test case, output the number of different ways the given rectangle can be filled with small rectangles of size 2 times 1. Assume the given large rectangle is oriented, i.e. count symmetrical tilings multiple times. Examples intput 1234567891 21 31 42 22 32 42 114 110 0 output 1234567810123514451205 思路 dp[i][j]：i行在j状态的方案数 对于每一行，dfs所有能放的情况。 状态转移方程(i:行 state:i行的状态 nex:i+1行的状态)：dp[i+1][nex]+=dp[i][state] 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546/*Problem: 2411 User: ArminMemory: 1140K Time: 16MSLanguage: G++ Result: Accepted*/#include&lt;stdio.h&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;using namespace std;#define rep(i,a,n) for(int i=a;i&lt;n;i++)#define repd(i,a,n) for(int i=n-1;i&gt;=a;i--)#define CRL(a,x) memset(a,x,sizeof(a))typedef long long ll;const int N=13;int n,m; ll dp[N][1&lt;&lt;N];void dfs(int i,int j,int state,int nex)&#123; //i:当前行 j:当前列 state:i行的状态 nex:i+1行的状态 if(j==n)&#123; //如果到达边界，直接加 dp[i+1][nex]+=dp[i][state]; return; &#125; if(1&lt;&lt;j&amp;state) //如果j位置放了东西 dfs(i,j+1,state,nex); if(!(1&lt;&lt;j&amp;state)) //如果j位置是空，竖着放一个 dfs(i,j+1,state,1&lt;&lt;j|nex);//由于竖着放了一个，所以下一行的j位置就被占用了。 if(j+1&lt;n&amp;&amp;!(1&lt;&lt;j&amp;state)&amp;&amp;!((1&lt;&lt;j+1&amp;state))) //如果j位置和j+1位置都为空，横放一个 dfs(i,j+2,state,nex);&#125;int main()&#123; while(scanf("%d%d",&amp;n,&amp;m)&amp;&amp;(n||m))&#123; CRL(dp,0); dp[0][0]=1; if(n&gt;m) swap(n,m); rep(i,0,m) rep(j,0,1&lt;&lt;n) if(dp[i][j])//剪枝：dp[i][j]不为0才能更新否则更新没意义 dfs(i,0,j,0); printf("%lld\n",dp[m][0]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
        <tag>状压dp</tag>
        <tag>dp</tag>
        <tag>状压</tag>
        <tag>dfs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[炮兵阵地（状压dp）]]></title>
    <url>%2F%E7%82%AE%E5%85%B5%E9%98%B5%E5%9C%B0%2F</url>
    <content type="text"><![CDATA[描述传送门：poj-1185 &emsp;司令部的将军们打算在NM的网格地图上部署他们的炮兵部队。一个NM的地图由N行M列组成，地图的每一格可能是山地（用”H” 表示），也可能是平原（用”P”表示），如下图。在每一格平原地形上最多可以布置一支炮兵部队（山地上不能够部署炮兵部队）；一支炮兵部队在地图上的攻击范围如图中黑色区域所示： &emsp;如果在地图中的灰色所标识的平原上部署一支炮兵部队，则图中的黑色的网格表示它能够攻击到的区域：沿横向左右各两格，沿纵向上下各两格。图上其它白色网格均攻击不到。从图上可见炮兵的攻击范围不受地形的影响。现在，将军们规划如何部署炮兵部队，在防止误伤的前提下（保证任何两支炮兵部队之间不能互相攻击，即任何一支炮兵部队都不在其他支炮兵部队的攻击范围内），在整个地图区域内最多能够摆放多少我军的炮兵部队。 Input 第一行包含两个由空格分割开的正整数，分别表示N和M；接下来的N行，每一行含有连续的M个字符(‘P’或者’H’)，中间没有空格。按顺序表示地图中每一行的数据。N &lt;= 100；M &lt;= 10。 Output 仅一行，包含一个整数K，表示最多能摆放的炮兵部队的数量。 Examples intput 1234565 4PHPPPPHHPPPPPHPPPHHP output 16 思路 对于每行都用一个二进制数来表示这一行的地图，1表示山地，0表示平原。 用一个$N$位二进制数表示每行放炮兵的状态，1表示放，0表示不放。!(i&lt;&lt;1&amp;i)&amp;&amp;!(i&lt;&lt;2&amp;i) 表示没有两个1相邻，也没有两个1之间只有一个0，那么这个状态合法。 $j$状态能放到$i$行的条件是: j&amp;Map[i]==0，即没有山地和炮兵重合。同样的，$i$行，$i-1$行，$i-2$行都不能有炮兵重合，重合了就能互相攻击到。 $dp[i][j][k]$: $i$行为状态$j$,$i-1$行为状态$k$时最大ans,状态转移方程就是：dp[i][j][k]=max(dp[i-1][k][l]+Soldier[j] ,dp[i][j][k]) 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960/*User: ArminMemory: 3332K Time: 250MSLanguage: G++ Result: Accepted*/#include&lt;stdio.h&gt;#include&lt;math.h&gt;#include&lt;vector&gt;using namespace std;#define rep(i,a,n) for(int i=a;i&lt;n;i++)#define repd(i,a,n) for(int i=n-1;i&gt;=a;i--)#define CRL(a,x) memset(a,x,sizeof(a))const int N=1e2+5;int dp[N][N][N],n,m,Map[N],Soldier[N]; //dp[i][j][k]:i行为状态j,i-1行为状态k时最大ansvector&lt;int&gt; ok;char x;int Count(int x)&#123;int sum=0;while(x)&#123;sum++;x-=x&amp;-x;&#125;return sum;&#125;int main()&#123; scanf("%d%d",&amp;n,&amp;m); rep(i,1,n+1)&#123; //预处理每行状态，每行用一个二进制数表示 getchar(); rep(j,0,m) Map[i]= Map[i]&lt;&lt;1|getchar()=='H'; &#125; rep(i,0,1&lt;&lt;m) //预处理出所有合法的状态，放在vector中 if(!(i&lt;&lt;1&amp;i)&amp;&amp;!(i&lt;&lt;2&amp;i))&#123; Soldier[ok.size()]=Count(i); ok.push_back(i); &#125; rep(i,0,ok.size()) //预处理第一排，枚举所有合法状态 if(!(Map[1]&amp;ok[i])) //可以放到这排 dp[1][i][0]=Soldier[i]; rep(i,2,n+1) rep(j,0,ok.size())&#123; if(Map[i]&amp;ok[j]) continue; //和i行有冲突，跳过 rep(k,0,ok.size())&#123; if(Map[i-1]&amp;ok[k]||ok[j]&amp;ok[k]) continue; //合法状态和i-1行有冲突或者i行状态和i-1行冲突，跳过 rep(l,0,ok.size())&#123; if(Map[i-2]&amp;ok[l]||ok[l]&amp;ok[k]||ok[l]&amp;ok[j]) continue;//合法状态和i-2行有冲突或 i-2行和i行有冲突 或 i-2行和i-1行有冲突，跳过 dp[i][j][k]=max(dp[i-1][k][l]+Soldier[j] ,dp[i][j][k]); //状态转移 &#125; &#125; &#125; int ans=0; for(int i=0; i&lt;ok.size(); i++) for(int j=0; j&lt;ok.size(); j++) //枚举dp[row-1][i][j] ans=max(ans,dp[n][i][j]); printf("%d\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
        <tag>状压dp</tag>
        <tag>dp</tag>
        <tag>状压</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Most Powerful（状压dp入门）]]></title>
    <url>%2FMost-Powerful%2F</url>
    <content type="text"><![CDATA[描述传送门：ZOJ-3471 &emsp;Recently, researchers on Mars have discovered N powerful atoms. All of them are different. These atoms have some properties. When two of these atoms collide, one of them disappears and a lot of power is produced. Researchers know the way every two atoms perform when collided and the power every two atoms can produce. You are to write a program to make it most powerful, which means that the sum of power produced during all the collides is maximal. Input There are multiple cases. The first line of each case has an integer $N (2 &lt;= N &lt;= 10)$, which means there are N atoms: $A_1, A_2, … , A_N$. Then $N$ lines follow. There are $N$ integers in each line. The $j^{th}$ integer on the $i^{th}$ line is the power produced when $A_i$ and $A_j$ collide with $A_j$ gone. All integers are positive and not larger than 10000. The last case is followed by a 0 in one line. There will be no more than 500 cases including no more than 50 large cases that $N$ is 10. Output Output the maximal power these $N$ atoms can produce in a line for each case. Examples intput 1234567820 41 030 20 112 0 11 10 00 output 12422 思路 状态dp入门题，用0来表示未泯灭，1表示已经泯灭，这样就能用一个n位的整数来记录所有的状态。 对于状态i，假设第j位和第k位都是0，那么我们就可以通过dp[i]推出 dp[i&amp;1&lt;&lt;k]的状态。 状态转移方程： dp[i|1]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
        <tag>状压dp</tag>
        <tag>dp</tag>
        <tag>状压</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Corn Fields（状压dp入门）]]></title>
    <url>%2FCorn-Fields%2F</url>
    <content type="text"><![CDATA[描述传送门：POJ-3254 &emsp;Farmer John has purchased a lush new rectangular pasture composed of $M$ by $N (1 ≤ M ≤ 12; 1 ≤ N ≤ 12)$ square parcels. He wants to grow some yummy corn for the cows on a number of squares. Regrettably, some of the squares are infertile and can’t be planted. Canny FJ knows that the cows dislike eating close to each other, so when choosing which squares to plant, he avoids choosing squares that are adjacent; no two chosen squares share an edge. He has not yet made the final choice as to which squares to plant. Being a very open-minded man, Farmer John wants to consider all possible options for how to choose the squares for planting. He is so open-minded that he considers choosing no squares as a valid option! Please help Farmer John determine the number of ways he can choose the squares to plant. InputLine 1: Two space-separated integers: $M$ and $N$Lines 2.. $M+1$: Line i+1 describes row i of the pasture with $N$ space-separated integers indicating whether a square is fertile (1 for fertile, 0 for infertile) OutputLine 1: One integer: the number of ways that FJ can choose the squares modulo $100,000,000$。 Examples intput 1232 31 1 10 1 0 output 19 思路 用二进制表示每行的状态，0表示能放，1表示不能放。 i&amp;a[j]==i 表示第j行可以放状态i。 k&amp;(k&lt;&lt;1)表示 k状态没相邻的1 状态转移方程： dp[i][j]+=dp[i][j]+dp[i-1][k] 代码12345678910111213141516171819202122232425262728293031323334353637#include&lt;bits/stdc++.h&gt;using namespace std;#define rep(i,a,n) for(int i=a;i&lt;n;i++)#define repd(i,a,n) for(int i=n-1;i&gt;=a;i--)#define CRL(a,x) memset(a,x,sizeof(a))const int N=1e6+5;const int Mod=1e8;int main() &#123; int n,m,a[15]= &#123;0&#125;,x,dp[15][5096]= &#123;0&#125;,ans=0; while(~scanf("%d%d",&amp;n,&amp;m)) &#123; CRL(dp,0);CRL(a,0);ans=0; rep(i,1,n+1) rep(j,0,m) &#123; scanf("%d",&amp;x); a[i]= (a[i]&lt;&lt;1)|x; &#125; rep(i,0,1&lt;&lt;m) dp[1][i]=!(i&amp;(i&lt;&lt;1))&amp;&amp; (i&amp;a[1])==i;//单独处理第一排 rep(i,2,n+1) rep(j,0,1&lt;&lt;m) if((j&amp;a[i])==j&amp;&amp;!(j&amp;(j&lt;&lt;1))) //如果放的方式合法 rep(k,0,1&lt;&lt;m) &#123; if((j&amp;k)||(k&amp;a[i-1])!=k||(k&amp;(k&lt;&lt;1))) continue; dp[i][j]=(dp[i][j]+dp[i-1][k])%Mod; &#125; rep(i,0,(1&lt;&lt;m)) ans=(ans+dp[n][i])%Mod; printf("%d\n",ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
        <tag>状压dp</tag>
        <tag>dp</tag>
        <tag>状压</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[swustACM2018国庆招新正式赛题解]]></title>
    <url>%2FswustACM2018%E5%9B%BD%E5%BA%86%E6%8B%9B%E6%96%B0%E6%AD%A3%E5%BC%8F%E8%B5%9B%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[这次题其实不难，比较偏思维。按照出题人的预期，题目难度分布是这样的： 难度 培训来了的都能A 签到题 中等题 防AK 题号 A D E I B J F C H 结果，看看榜… A.我还真是个天使呢思路题目描述代码天使出题人给的签到题，注意单词之间的两个空格。 题目连接 描述 输入一个整数x，判断是奇数还是偶数。如果是奇数就输出”It is odd!”,否则”It is even!” 输入输入一个整数x 输出 如题 样例输入1221 样例输出12It is even!It is odd! 1234567#include&lt;stdio.h&gt;int main()&#123; int x; scanf("%d",&amp;x); puts(x%2? "It is odd!\n":"It is even!\n"); return 0;&#125; B.探丸蓝月思路题目描述代码没啥坑，字符串用得熟一点就能A。用一个变量记录当前匹配的是”tanwanlanyue”的第几个字母，匹配了就+1。 题目链接 描述 死库水学长才从五食堂吃完晚饭出来，就有两个人对他说：我系轱天乐,我四渣渣辉,探丸蓝月，介四里没有丸过的船新版本,挤需体验三番钟,里造会干我一样,爱象介款游戏。于是死库水学长回去试玩了三分钟后，发现这款游戏好玩无比，只需一刀就可以999级。然而三分钟试玩结束，必须充钱购买激活码才能继续玩。然而死库水学长很穷，但是他发现激活码只需要满足以下条件就可以成功激活，继续享受一刀999级的快感。死库水学长很笨，作为他的可爱的学弟学妹们，你们可以帮他判断一下他构造的激活码能成功激活该游戏吗？ 条件如下：这里有一个全为小写字母组成的激活码s,长度为n（1&lt;=n&lt;=10000），.现在，我们可以将此激活码s中的一些字母任意进行删除，使得剩下的激活码可以是“tanwanlanyue”,那么就可以成功激活，否则就不能成功激活。 输入第一行，为一个整数n（1&lt;=n&lt;=10000），第二行为激活码字符串s。 输出 如果可以成功激活则输出”YES”，否则就输出”NO”。 样例输入123412tanwanlanyue15wantanlanyueyue 样例输出12YESNO 1234567891011121314151617181920#include&lt;bits/stdc++.h&gt;using namespace std;const int N=1e4+5;char S[N],T[]="tanwanlanyue";int main()&#123; scanf("%d",&amp;n); getchar();gets(S); int Ti=0,Si=0,LenS=strlen(S),LenT=strlen(T);//Si是当前的S所要判断的位置，Ti是当前的T所要判断的位置。 while(Si&lt;LenS&amp;&amp;Ti&lt;LenT)&#123; if(T[Ti]==S[Si]) Ti++; //如果相等，匹配T的下一个位置 Si++; //匹配S的下一个位置 &#125; puts(Ti==LenT?"YES":"NO"); return 0;&#125; C.左学姐的骨牌思路题目描述代码思维题。 一般同学们都能想到模拟的做法：用一个数组来存，每次输入一个L,R，就12for(int i=L;i&lt;=R;i++) sum[i]++; 最后查询摆放多米诺骨牌的最左端到最右端是否有为0的地方。但是魔鬼出题人卡掉了这种做法，这样做会T。 正解是用一个数组，当输入的区间为[l,r]时，让sum[l]++，表示l以后的都+1，再让sum[r]—，表示r以后的都-1,最后求一下前缀和就行了。 题目链接 描述 这一天，左学姐的室友都去上课了，她一个人实在无聊，于是在宿舍里玩起了多米诺骨牌。由于自己放骨牌过于麻烦，左学姐在某宝买了一个骨牌放置机。 只要左学姐给这个神奇的小东西两个数字L、R，它就可以在l到r这一段区间上放上一排骨牌（包括l和r，如果某个位置上已经有了一个骨牌则不会再放）。经过一系列 操作后，左学姐完成了骨牌的搭建并推到了第一块骨牌，每块骨牌会击倒后面与它距离为1的骨牌，如果所有的骨牌全部倒下，那么左学姐就能顺利完成这一次游戏。 机智的你能帮左学姐看看她搭建的多米诺骨牌能顺利完成吗？ 输入第一行一个n，表示有n个操作。接下来n行，每一行两个数L,R。（n&lt;=200,000,1&lt;=L&lt;=R&lt;=200,000） 输出 一行，左学姐能顺利完成此次游戏则输出”Yes!”，否则输出”No!”。 样例输入123456731 12 23 321 35 7 样例输出12Yes!No! 1234567891011121314151617181920212223242526#include&lt;bits/stdc++.h&gt;using namespace std;const int N=2e5+5;int n,a[N]=&#123;0&#125;,l,r,L=200005,R=0,sum=0,Flag=0;int main()&#123; scanf("%d",&amp;n); while(n--)&#123; scanf("%d%d",&amp;l,&amp;r); a[l]++;a[r+1]--; //表示l以后的都+1,r以后的都-1 L=min(L,l);R=max(R,r); //记录最左边和最右边 &#125; for(int i=L;i&lt;=R;i++) &#123; //求前缀和 a[i]+=a[i-1]; //求前缀和 if(a[i]==0)&#123; //如果有一个没放骨牌的就说明不成功，跳出 Flag=1; break; &#125; &#125; puts(Flag?"No!":"Yes!"); return 0;&#125; D.这真的是真的签到题思路题目描述代码送分题啊，你们怎么就不自己写呢？等差求和，注意数据范围是long long。 题目链接 描述 啊啊啊，签到题太难出了啊，要是全场爆零多尴尬啊。这是一道送分题，防止大家A不出题。题目很简单，求整数1到n的和。不会写怎么办？算了吧，既然是送分题，我就帮你们写好吧，下面是代码：12345678910#include&lt;stdio.h&gt;int main()&#123; int n, sum = 0; scanf("%d", &amp;n); for (int i = 1; i &lt;= n; i++) sum = sum + i; printf("%d\n", sum); return 0;&#125; 输入 一行，一个整数n （1&lt;=n&lt;=10,000,000） 输出 一个整数，即整数1到n的和。 样例输入13 样例输出16 123456789#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; long long n; scanf("%lld",&amp;n); printf("%lld\n",(1+n)*n/2); return 0;&#125; E.拯救左学姐思路题目描述代码魅惑死的也是杀死的啊。然后答案就是 $2*n+1-n/(k+1)$， $n(K+1)$ 就是只能杀一个的开枪数。 题目链接 描述 学姐由于过度劳累而休克死亡，永远的离开了我们。然而作为左学姐的男朋友死库水学长被告知只要到达瓦罗兰大地去寻找快乐风男，就能获得召唤水晶，使左学姐复活。然而在过程中，死库水学长会碰到洛克萨斯的战士。 这天，死库水学长来到了瓦罗兰大地，突然一个战士向死库水学长袭来，死库水学长二话不说直接魅惑死了这个战士，之后成功的获得了战士遗留下的火箭枪（弹药有无限）。死库水学长是个神枪手，他每次开枪都能把两个战士给干掉，但是他每开k枪后下一枪只能杀死一个人，然后下一枪又恢复到正常一枪杀死两个人。最后他终于获得了召唤水晶救活了左学姐并过上了幸福的生活。由于兴奋，死库水只知道自己开了n枪，但不知道杀了多少战士，你能帮帮死库水学长算算他杀了多少战士吗？ 输入第一行，为两个整数n，k（|n|&lt;=10^16，1&lt;=k&lt;=100），n表示开枪数，k表示每开k枪后只能杀一个人。 输出 当输入的n不合法时输出”Impossible”,否则输出死库水学长杀了多少人。 样例输入1-1 1 样例输出1Impossible 1234567891011#include&lt;bits/stdc++.h&gt;using namespace std;long long n,k;int main()&#123; scanf("%lld%lld",&amp;n,&amp;k); n&gt;=0? printf("%lld\n",2*n+1-n/(k+1)):puts("Impossible"); return 0;&#125; F.比武（yan）招亲思路题目描述代码思维题。很明显，无论怎么分，整个数列最大值一定是一个对的最大值。分两种情况讨论： 最大值被分到了前面一个组，那么无论怎么分，后面的那个组的最大值 $x$ 一定 $x&lt;=a[n]$ ,那么很明显当 $x==a[n]$ 时，有最优解，此时只有把a[n]单独分成一组。 最大值被分到了后面一个组一样的，当 $x==a[1]$ 时，有最优解;然后答案就是$$ans = Max-min(a[1],a[n])$$ 这本来是一道中等题，没想到起到了防AK的作用（18无人AC）。 题目链接 描述 死库水学长实在是太优秀了，追他的女生排了长长的一条队，死库水学长虽然表面一副很高冷的样子，实际上他已经早早地暗地里调查过这些女生并得到了她们的能力（yan）值。但是他还是要假装选拔一下，他这样把一女生分成两队： 女生们排好队，然后他选定一个女生，这个女生和她之前的所有女生一队，后面的一队。 分好之后，每队的最高能力值就是这个队的能力值，能力值较高的那个队获胜。 但是！死库水学长有一点心理变态，他最喜欢看别人被虐，所以他希望这两个队的能力值之差最大，这样他就会特别快乐。天噜啊，帮帮这个学长找出这个最大的能力值之差吧。 输入 第一行一个整数n （2&lt;=n&lt;=1,000,000）第二行n个非负整数，代表排好队后对应的女生的能力值。 输出 一行，一个整数，即题目中所提到的最大能力值之差。 样例输入1231 3 0 样例输出13 123456789101112131415161718#include&lt;bits/stdc++.h&gt;using namespace std;const int N=1e6+5;int main()&#123; int Star,n,Max=0,x;//Star:第一个数 x:当前输入数 Max: 数列最大值 scanf("%d%d",&amp;n,&amp;Star); Max=Star; for(int i=1;i&lt;n;i++)&#123; scanf("%d",&amp;x); Max=max(Max,x); //更新最大值 &#125; printf("%d\n",Max-min(Star,x));//x现在是最后一个数 return 0;&#125; G.彩灯游戏思路题目描述代码证明有点麻烦，比赛的时候肯定不会想着去证明，这种题拿到了可以先暴力输出1-100的答案看一下，用下面这个代码：12345678910111213141516#include&lt;stdio.h&gt;int main() &#123; int a[105]=&#123;0&#125;; //a[i]表示编号位i的灯被开关了几次 for(int i=1;i&lt;=100;i++) for(int j=1;j&lt;=i;j++) if(i%j==0) //如果i被j整除，说明它被开关了一次。 a[i]++; int sum=0; for(int i=1;i&lt;=100;i++)&#123; if(a[i]%2) //如果是奇数就代表最后这个灯是开的 sum++; printf("%d: %d\n",i,sum); &#125; return 0;&#125; 观察输出可以发现答案是这样的：然后我们求n的时候落在哪个ans里，由于上面是个数，那么我们对第一行的等差数列求和，即 $S_n= \frac {(3+[3+2 *(x-1)]) *n} {2}$然后让 $S_n=n$，化解之后就是 $\sqrt{n+1}-1=x$，然后答案就是ans=ceil(sqrt(n+1))-1,然后发现它等价于ans=sqrt(n)，当然两个都能A。注意long long 题目链接 描述 小画学姐是个特别怕黑的弱者，好吧她一直都这么怂，所以胆小的她最喜欢的事情就是收集各种彩灯以备不时之需（并没有暗示礼物的意思）。有一天学校停电了，这些彩灯终于有了用武之地，小画学姐找了N个小伙伴陪她一起点亮这N盏灯，然而你们的小画学姐毒性不浅，她并不想“平凡”地点亮这些收藏，而是要通过一些特殊的规则才可以。 首先她把N个小伙伴从1到N依次排序，同时也把她的N盏灯从1到N依次排序。 然后每一个小伙伴根据自己的序号对所有是自己序号倍数编号的灯进行操作，操作很简单，若是灯开着就将它关闭，若灯关闭就打开这盏灯，可以肯定的是最初的时候小画学姐的灯全部都是关闭的。 那么问题来了，当N个小伙伴都进行操作后，小画学姐一共点亮了多少灯？ 输入输入只有一行，为一个整数N（$1&lt;=N&lt;=2*10^15$） 输出 输出小画学姐点亮彩灯的数量。 样例输入1234613 样例输出123223 123456789#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; long long n; scanf("%lld",&amp;n); printf("%lld\n",(long long)sqrt(n)); return 0;&#125; H.简单的射箭练习思路题目描述代码以下是出题人自己写的题解：假设左学姐射中靶心概率为A，死库水学长射中靶心概率为B，显然答案是$A+A(1-A)(1-B)+A(1-A)^2(1-B)^2+A(1-A)^3(1-B)^3+…+A(1-A)^{n-1}(1-B)^{n-1}$显然是个等比数列前n项和：$ \frac {A(1-(1-A)^{(n+1)}(1-B)^{(n+1)})}{1-(1-A)(1-B)}$，n显然无穷大，那么 $(1-A)^{n+1}(1-B)^{n+1}$ 显然是无限接近于0，因为保留12位小数，这个东西显然可以忽略，所以答案就是$ \frac{A}{1-(1-A)*(1-B)}$当然你也可以暴力，当等比项$(1-A)^{n+1}(1-B)^{n+1}$小于$10^{-18}$左右的时候，就可以输出了。但是这种做法被我卡掉了。众所周知，double只能保证14位小数精度，显然精度不够，我们需要使用long double,因为dev奇怪的原因c语言无法输出long double ,所以需要用c++输出，考虑到你们不会，我把怎么使用放在了提示里。 题目链接 描述 弓箭手zxj与sksxz在进行一场比赛。他们轮流射击，zxj先手。 每次射击，zxj有a/b的概率命中靶心，sksxz有c/d的概率命中靶心。先命中靶心的赢得比赛。 求zxj赢得比赛的概率。 输入 多组输入，每组一行四个整数a,b,c,d 输出 一个实数表示答案，四舍五入保留12位小数。 样例输入121 2 3 42 3 4 5 样例输出120.5714285714290.714285714286 1 I.简单易懂的签到题思路题目描述代码先两重循环求每行的最大值。再看每个最大值是不是这一列的最小值。 题目链接 描述 给定一个5*5的矩阵，每行只有一个最大值，每列只有一个最小值，寻找这个矩阵的鞍点。 鞍点指的是矩阵中的一个元素，它是所在行的最大值，并且是所在列的最小值（如果存在多个符合条件的数，则输出第一个即可）。 从1开始编号,从上往下从，左往右遍历的第一个 输入 5行，每行5个数 输出 一行，三个数，鞍点的行，列，值. 样例输入1234511 3 5 6 912 4 7 8 1010 5 6 9 118 6 4 7 215 10 11 20 25 样例输出14 1 8 1234567891011121314151617181920212223242526272829//这题代码写得有点丑#include&lt;bits/stdc++.h&gt;using namespace std;int main() &#123; int a[5][5],Max[5][3]=&#123;0&#125;;//Max[i][0]:第i行的最大值 Max[i][1]:第i行最大值的行 Max[i][2]:第i行最大值的列 for(int i=0;i&lt;5;i++) for(int j=0;j&lt;5;j++)&#123; scanf("%d",&amp;a[i][j]); if(Max[i][0]&lt;a[i][j])&#123; //更新第i行的最大值 Max[i][0]=a[i][j]; //值 Max[i][1]=i; //行 Max[i][2]=j; //列 &#125; &#125; for(int i=0;i&lt;5;i++) for(int j=0;j&lt;5;j++)&#123; if(a[j][Max[i][2]]&lt;Max[i][0]) break;//如果当前列有比它小的，说明它不是当前列最小，break if(j==4)&#123; printf("%d %d %d\n",Max[i][1]+1,Max[i][2]+1,Max[i][0]); return 0; &#125; &#125; &#125; return 0;&#125; J.善良的左学姐思路题目描述代码贪心从小到大排序，每次拿最小 题目链接 描述 最近，李学长和肖学长都比较喜欢死库水，今天他们两人因为一条死库水起了争执，坐在一旁的左学姐当然不能坐视不管，于是她为了平息这场战争，决定去再买几条死库水给两位学长，每家商店的死库水价格不都相同，规定每家商店最多买一条死库水，左学姐比较穷，但她又想尽可能多的买几条死库水以博得两位学长的宠幸，所以她想让你帮忙计算她最多能给两位学长买多少条死库水。 输入多组测试数据，每组数据第一行输入一个n和m，n表示商店数目，m表示左学姐现在有多少钱，紧接着第二行是a1，a2…ai…an这n个数，ai表示第i个商店的死库水价格;如果n为0，这组数据不做计算，程序结束。（0 &lt; n &lt;= 100 , 0 &lt; ai &lt;= 10,000,000,000） 输出 每组测试数据输出一行表示左学姐能买到死库水的最大数量。 样例输入12345 191 3 2 6 910 303 2 4 5 9 2 12 5 5 1 样例输出1248 12345678910111213141516171819202122#include&lt;bits/stdc++.h&gt;using namespace std;#define rep(i,a,n) for(int i=a;i&lt;n;i++)#define repd(i,a,n) for(int i=n-1;i&gt;=a;i--)#define CRL(a,x) memset(a,x,sizeof(a))const int N=1e2+5;int n,i,ans;long long a[N]=&#123;0&#125;,m;int main()&#123; while(~scanf("%d%lld",&amp;n,&amp;m))&#123; rep(j,0,n) scanf("%lld",&amp;a[j]); sort(a,a+n); //这里用的自带的快速排序，也可以改成冒泡排序 ans=i=0; //初始化 while(m&gt;=a[i])&#123; ans++; m-=a[i++]; &#125; printf("%d\n",ans); &#125; return 0;&#125; 大家加油，还有一次比赛，努力提升自己吧！]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>比赛题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Transport Ship(多重背包)]]></title>
    <url>%2FTransport-Ship%2F</url>
    <content type="text"><![CDATA[描述传送门：ACM-ICPC 2018 焦作赛区网络预赛 K &emsp;There are $N$ different kinds of transport ships on the port. The $i^{th}$kind of ship can carry the weight of $V[i]$ and the number of the $i^{th}$ kind of ship is $2^{C[i]} - 1$. How many different schemes there are if you want to use these ships to transport cargo with a total weight of $S$? It is required that each ship must be full-filled. Two schemes are considered to be the same if they use the same kinds of ships and the same number for each kind. Input The first line contains an integer $T(1 \le T \le 20)$, which is the number of test cases. For each test case: The first line contains two integers: $N(1 \le N \le 20)$, $Q(1 \le Q \le 10000)$, representing the number of kinds of ships and the number of queries. For the next $N$ lines, each line contains two integers: $V[i](1 \le V[i] \le 20)$ , $C[i](1 \le C[i] \le 20)$, representing the weight the $i^{th}$ kind of ship can carry, and the number of the $i^{th}$ kind of ship is $2^{C[i]} - 1$. For the next $Q$ lines, each line contains a single integer: $S(1 \le S \le 10000)$, representing the queried weight. Output For each query, output one line containing a single integer which represents the number of schemes for arranging ships. Since the answer may be very large, output the answer modulo $1000000007$. Examples intput 1234511 22 112 output 1201 思路 完全背包二进制优化，因为数量都是$2^n-1$,也就是说二进制的所有位数都是1，就可以保证不会有相同种类相同数量的。 dp[i]=(dp[i]+dp[i-cost]) \% mod; 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;bits/stdc++.h&gt;using namespace std;#define rep(i,a,n) for(int i=a;i&lt;n;i++)#define repd(i,a,n) for(int i=n-1;i&gt;=a;i--)#define CRL(a,x) memset(a,x,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll;const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7;int dp[10005],n,V,Cont[500005],Cost[500005];void ZeroOnePack(int cost,int cont) &#123; for(int i=V; i&gt;=cost; i--) if(dp[i-cost]&gt;0&amp;&amp;i&gt;=cost) &#123; if(dp[i]==-1) dp[i]++; dp[i]=(dp[i]+dp[i-cost])%mod; &#125;&#125;void CompletePack(int cost,int valum) &#123; for(int i=cost; i&lt;=V; i++) if(dp[i-cost]&gt;0&amp;&amp;i&gt;=cost) &#123; if(dp[i]==-1) dp[i]++; dp[i]=(dp[i]+dp[i-cost])%mod; &#125;&#125;void MultiplePack(int cost,int amount) &#123; if(cost*amount&gt;=V) CompletePack(cost,amount); else &#123; int k=1; while(k&lt;amount) &#123; ZeroOnePack(cost*k,k); amount-=k; k&lt;&lt;=1; &#125; ZeroOnePack(cost*amount,amount); &#125;&#125;int main() &#123; ll ans=0; int T,que[10005],nq,q; scanf("%d",&amp;T); while(T--) &#123; CRL(dp,-1); dp[0]=1; scanf("%d%d",&amp;n,&amp;nq); rep(i,0,n) &#123; scanf("%d%d",&amp;Cost[i],&amp;Cont[i]); Cont[i]=(1&lt;&lt;Cont[i])-1; &#125; rep(i,0,nq) &#123; scanf("%d",&amp;que[i]); V=max(que[i],V); &#125; rep(i,0,n) MultiplePack(Cost[i],Cont[i]);、 rep(i,0,nq) &#123; if(dp[que[i]]==-1) puts("0"); else printf("%d\n",dp[que[i]]); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>背包问题</tag>
        <tag>dp</tag>
        <tag>二进制</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[A Simple Math Problem(矩阵快速幂)]]></title>
    <url>%2FA-Simple-Math-Problem%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-1757 &emsp;Lele now is thinking about a simple function $f(x)$. F(i)= \begin{cases} f(x) = x &x=10\\ \end{cases}And $a_i(0&lt;=i&lt;=9)$ can only be 0 or 1 . Now, I will give $a_0 ~ a_9$ and two positive integers $k$ and $m$ ,and could you help Lele to caculate $f(k)%m$. Input The problem contains mutiple test cases.Please process to the end of file.In each case, there will be two lines.In the first line , there are two positive integers $k$ and $m$. $( k&lt;2*10^9 , m &lt; 10^5 )$In the second line , there are ten integers represent $a_0 ~ a_9$. Output For each case, output $f(k) % m$ in one line. Examples intput 123410 99991 1 1 1 1 1 1 1 1 120 5001 0 1 0 1 0 1 0 1 0 output 1245104 思路 O(n)肯定会T，可以考虑矩阵快速幂求解。 由于题目给了递推式，所以很显然我们需要求一个$X$矩阵，使得这个矩阵满足\begin{equation*} X^{n - 9} \begin{bmatrix} 9\\ 8\\ 7\\ 6\\ 5\\ 4\\ 3\\ 2\\ 1\\ 0 \end{bmatrix}= X \begin{bmatrix} F(n-1))\\ F(n-2)\\ F(n-3)\\ F(n-4)\\ F(n-5)\\ F(n-6)\\ F(n-7)\\ F(n-8)\\ F(n-9)\\ F(n-10) \end{bmatrix}= \begin{bmatrix} F(n)\\ F(n-1))\\ F(n-2)\\ F(n-3)\\ F(n-4)\\ F(n-5)\\ F(n-6)\\ F(n-7)\\ F(n-8)\\ F(n-9) \end{bmatrix} \end{equation*}，易得X=\begin{bmatrix} a_0&a_1&a_2&a_3&a_4&a_5&a_6&a_7&a_8&a_9\\ 1 & 0&0&0&0&0&0&0&0&0\\ 0 & 1&0&0&0&0&0&0&0&0\\ 0 & 0&1&0&0&0&0&0&0&0\\ 0 & 0&0&1&0&0&0&0&0&0\\ 0 & 0&0&0&1&0&0&0&0&0\\ 0 & 0&0&0&0&1&0&0&0&0\\ 0 & 0&0&0&0&0&1&0&0&0\\ 0 & 0&0&0&0&0&0&1&0&0\\ 0 & 0&0&0&0&0&0&0&1&0\\ \end{bmatrix}。将$F_{n}$按递推式展开，取对应系数即可， 递推式是从10开始的，所以对与第$n$项，只需求$X^{n-9}$，所得矩阵再左乘一个$\begin{bmatrix}F_9 &amp; F_8 &amp; F_7 &amp; F_6 &amp; F_5 &amp; F_4&amp; F_3&amp; F_2&amp; F_1&amp; F_0\end{bmatrix}^{-1}$，所得矩阵的第一个元素即为$F_i$ 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include &lt;bits/stdc++.h&gt;using namespace std;#define rep(i,a,n) for(int i=a;i&lt;n;i++)#define repd(i,a,n) for(int i=n-1;i&gt;=a;i--)#define CRL(a,x) memset(a,x,sizeof(a))typedef long long ll;ll mod= 1e9+7;struct Mat &#123; //矩阵 ll data[15][15]; Mat() &#123;CRL(data,0);&#125; Mat operator* (Mat &amp;a) const &#123; //重载 * 运算符 Mat c; rep(i,0,10) rep(j,0,10) rep(k,0,10) c.data[i][j]=(c.data[i][j]+data[i][k]*a.data[k][j]%mod)%mod; return c; &#125;&#125;a;Mat Mat_qpow(Mat a,int n) &#123; //矩阵快速幂 Mat tem; rep(i,0,10) tem.data[i][i]=1; while(n) &#123; if(n&amp;1LL) tem=tem*a; a=a*a; n&gt;&gt;=1LL; &#125; return tem;&#125;int main() &#123; std::ios::sync_with_stdio(false); ll M[15][15] = &#123;0&#125;,num[10],n,ans=0; while(cin&gt;&gt;n&gt;&gt;mod) &#123; rep(i,0,10) cin&gt;&gt;num[i]; if(n&lt;10) &#123; //特判 cout&lt;&lt;n&lt;&lt;endl; continue; &#125; rep(i,0,10) M[i+1][i]=1,M[0][i]=num[i]; //初始化常数矩阵 memcpy(a.data,M,sizeof(M)); ans=0; a=Mat_qpow(a,n-9); //只求n-9次方 rep(i,0,10) ans=(ans+a.data[0][i]*(9-i)%mod)%mod; //处理结果 cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>矩阵快速幂</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[又见斐波拉契（矩阵快速幂）]]></title>
    <url>%2F%E5%8F%88%E8%A7%81%E6%96%90%E6%B3%A2%E6%8B%89%E5%A5%91%2F</url>
    <content type="text"><![CDATA[描述传送门：2018年湘潭大学程序设计竞赛-G &emsp;这是一个加强版的斐波那契数列。 F(i)= \begin{cases} F(i-1)+F(i-2)+i^3+i^2+i+1 &i>1\\ 0 &i=0\\ 1 &1=1\\ \end{cases}给定递推式求F(n)的值，由于这个值可能太大，请对$10^9+7$取模。 Input 第一行是一个整数T(1 ≤ T ≤ 1000)，表示样例的个数。以后每个样例一行，是一个整数$n(1 ≤ n ≤ 10^18)$。 Output 每个样例输出一行，一个整数，表示F(n) mod 1000000007。 Examples intput 123454123100 output 123411657558616258 思路 n最大$10^18$，O(n)肯定会T，可以考虑矩阵快速幂求解。 由于题目给了递推式，所以很显然我们需要求一个$X$矩阵，使得这个矩阵满足\begin{equation*} X^{i - 1} \begin{bmatrix} F_{1}\\ F_0\\ 1\\ 1\\ 1\\ 1 \end{bmatrix}= X \begin{bmatrix} F_{i - 1}\\ F_{i - 2}\\ i^3\\ i^2\\ i\\ 1 \end{bmatrix}= \begin{bmatrix} F_{i}\\ F_{i - 1}\\ (i + 1)^3\\ (i + 1)^2\\ i + 1\\ 1 \end{bmatrix} \end{equation*}，易得X=\begin{bmatrix} 1&1&1&1&1&1\\ 1 & 0&0&0&0&0\\ 0 & 0&1&3&3&1\\ 0 & 0&0&1&2&1\\ 0 & 0&0&0&1&1\\ 0 & 0&0&0&0&1\\ \end{bmatrix}。将$F_{i}，F_{i - 1}，(i + 1)^3，(i + 1)^2$按递推式展开，取对应系数即可， 递推式是从2开始的，所以对与第$n$项，只需求$X^{n-1}$，所得矩阵再左乘一个$\begin{bmatrix}F_1 &amp; F_0 &amp; 2^3 &amp; 2^2 &amp; 2 &amp; 1\end{bmatrix}^{-1}$，所得矩阵的第一个元素即为$F_i$ 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include &lt;bits/stdc++.h&gt;using namespace std;#define rep(i,a,n) for(int i=a;i&lt;n;i++)#define repd(i,a,n) for(int i=n-1;i&gt;=a;i--)#define CRL(a,x) memset(a,x,sizeof(a))typedef long long ll;const ll mod= 1e9+7;struct Mat&#123; //矩阵 ll data[6][6]; Mat()&#123;CRL(data,0);&#125; Mat operator* (Mat &amp;a) const&#123; //重载*运算符 Mat c; rep(i,0,6) rep(j,0,6) rep(k,0,6) c.data[i][j]=(c.data[i][j]+data[i][k]*a.data[k][j]%mod)%mod; return c; &#125;&#125;;Mat Mat_qpow(Mat a,ll n)&#123; //矩阵快速幂 Mat tem;rep(i,0,6) tem.data[i][i]=1; //单位阵初始化 while(n)&#123; if(n&amp;1) tem=tem*a; a=a*a; n&gt;&gt;=1; &#125; return tem;&#125;ll M[6][6] = &#123; //常数阵，即上面提到的X矩阵 &#123;1, 1, 1, 1, 1, 1&#125;, &#123;1, 0, 0, 0, 0, 0&#125;, &#123;0, 0, 1, 3, 3, 1&#125;, &#123;0, 0, 0, 1, 2, 1&#125;, &#123;0, 0, 0, 0, 1, 1&#125;, &#123;0, 0, 0, 0, 0, 1&#125;&#125;;int main()&#123; Mat a,ans; memcpy(a.data,M,sizeof(M)); int t;ll n; scanf("%d",&amp;t); while(t--)&#123; scanf("%lld",&amp;n); if(n&lt;2LL) &#123;printf("%lld\n",n);continue;&#125;//特判 ans=Mat_qpow(a,n-1); printf("%lld\n",(ans.data[0][0]+ans.data[0][2]*8%mod+ans.data[0][3]*4%mod+ans.data[0][4]*2%mod+ans.data[0][5])%mod); &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>矩阵快速幂</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Fibonacci（矩阵快速幂）]]></title>
    <url>%2FFibonacci%2F</url>
    <content type="text"><![CDATA[描述传送门：poj-3070 &emsp;In the Fibonacci integer sequence, $F_0 = 0, F_1 = 1$, and $F_n = F_n − 1 + F_n − 2 for n ≥ 2$. For example, the first ten terms of the Fibonacci sequence are: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, …An alternative formula for the Fibonacci sequence is \begin{bmatrix} F_{n+1} & F_{n} \\ F_{n} & F_{n-1} \\ \end{bmatrix}= \begin{bmatrix} 1 & 1 \\ 1 & 0 \\ \end{bmatrix}^n= \begin{bmatrix} 1 & 1 \\ 1 & 0 \\ \end{bmatrix} \begin{bmatrix} 1 & 1 \\ 1 & 0 \\ \end{bmatrix}... \begin{bmatrix} 1 & 1 \\ 1 & 0 \\ \end{bmatrix}Given an integer $n$, your goal is to compute the last 4 digits of $F_n$. Input The input test file will contain multiple test cases. Each test case consists of a single line containing n (where $0 ≤ n ≤ 1,000,000,000$). The end-of-file is denoted by a single line containing the number −1. Output For each test case, print the last four digits of Fn. If the last four digits of Fn are all zeros, print ‘0’; otherwise, omit any leading zeros (i.e., print Fn mod 10000). Examples intput 12345099999999991000000000-1 output 12340346266875 思路 题目直接给出了转移矩阵，显然那个二阶常数矩阵需要用到矩阵快速幂才能求解。 注意单位阵和初始化。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546/*Problem: 3070 Memory: 668K Time: 0MS Language: G++ Result:Accepted*/#include &lt;iostream&gt;#include &lt;string.h&gt;using namespace std;#define rep(i,a,n) for(int i=a;i&lt;n;i++)#define repd(i,a,n) for(int i=n-1;i&gt;=a;i--)#define CRL(a,x) memset(a,x,sizeof(a))const int N=1e3+5;const int mod=1e4;struct Mat&#123; int data[2][2]; Mat()&#123;CRL(data,0);&#125; //构造函数 Mat operator*(const Mat &amp;h)&#123; //重载乘号 Mat c; rep(i,0,2) rep(j,0,2) rep(k,0,2) c.data[i][j]=(c.data[i][j]+data[i][k]%mod*h.data[k][j]%mod)%mod; return c; &#125;&#125;Fn,c;void Mat_qpow(Mat &amp;Fn,int n)&#123;//矩阵快速幂 实际上是c的n次方 while(n)&#123; if(n&amp;1) Fn=Fn*c; c=c*c; n&gt;&gt;=1; &#125;&#125;int main()&#123; std::ios::sync_with_stdio(false); int n; while(cin&gt;&gt;n&amp;&amp;~n)&#123; Fn.data[0][0]=Fn.data[1][1]=1;Fn.data[0][1]=Fn.data[1][0]=0;//单位阵初始化 c.data[0][0]= c.data[0][1]=c.data[1][0]=1;c.data[1][1]=0;//常数阵初始化 Mat_qpow(Fn,n); cout&lt;&lt;Fn.data[0][1]&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>矩阵快速幂</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[To the Max（最大子矩阵）]]></title>
    <url>%2FTo-the-Max%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-1081 &emsp;Given a two-dimensional array of positive and negative integers, a sub-rectangle is any contiguous sub-array of size 1 x 1 or greater located within the whole array. The sum of a rectangle is the sum of all the elements in that rectangle. In this problem the sub-rectangle with the largest sum is referred to as the maximal sub-rectangle. As an example, the maximal sub-rectangle of the array: &emsp;0 -2 -7 0&emsp;9 &nbsp;2 -6 2&nbsp;-4 &nbsp;1 -4 1&nbsp;-1 &nbsp;8 0 -2 is in the lower left corner: &emsp;9 2&nbsp;-4 1&nbsp;-1 8 and has a sum of 15. Input &emsp;The input consists of an N x N array of integers. The input begins with a single positive integer N on a line by itself, indicating the size of the square two-dimensional array. This is followed by N 2 integers separated by whitespace (spaces and newlines). These are the N 2 integers of the array, presented in row-major order. That is, all numbers in the first row, left to right, then all numbers in the second row, left to right, etc. N may be as large as 100. The numbers in the array will be in the range [-127,127]. Output Output the sum of the maximal sub-rectangle. Examples intput 1234540 -2 -7 0 9 2 -6 2-4 1 -4 1 -1 8 0 -2 output 115 思路 求最大子矩阵，可借用最大子段和的思想来做，如下图，要求宽为$(i-j)$这么宽的最大区间和，就可以把i到j行按列加到一起，然后就转换成了求一维数组最大子段和，每一个元素就是红色区域。 对于矩阵$a[n][n]$，构造一个dp数组，使$dp[i][j]$为$dp[0][0]$到$dp[i][j]$的和。那么下图矩阵a的红色区域就可以表示为: $dp[i][k]-dp[i][k-1]-dp[j-1][k]+dp[j-1][k-1]$，这样就实现了$O(1)$查找区间和，而dp数组只需$O(N^2)$就能求出。 代码12345678910111213141516171819202122232425262728293031323334353637383940#include&lt;bits/stdc++.h&gt;using namespace std;#define rep(i,a,n) for(int i=a;i&lt;n;++i)#define repd(i,a,n) for(int i=n-1;i&gt;=a;--i)#define CRL(a) memset(a,0,sizeof(a))const int N=105;int dp[N][N];int AC(int n)&#123; rep(i,1,n+1) //求dp数组 rep(j,1,n+1) dp[i][j]+=dp[i-1][j]+dp[i][j-1]-dp[i-1][j-1]; int Max=dp[1][1]; rep(i,1,n+1) //i,j,k即为上图的i,j,k rep(j,1,i+1)&#123; int sum=0; rep(k,1,n+1)&#123; int tem=dp[i][k]-dp[i][k-1]-dp[j-1][k]+dp[j-1][k-1]; sum= sum&gt;0? sum+tem:tem; if(sum&gt;Max) Max=sum; &#125; &#125; return Max;&#125;int main()&#123; std::ios::sync_with_stdio(false); int a[N][N],n; while(cin&gt;&gt;n)&#123; rep(i,1,n+1) rep(j,1,n+1) cin&gt;&gt;dp[i][j]; cout&lt;&lt;AC(n)&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Bridging signals(最长上升子序列)]]></title>
    <url>%2FBridging-signals%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-1950 &emsp;’Oh no, they’ve done it again’, cries the chief designer at the Waferland chip factory. Once more the routing designers have screwed up completely, making the signals on the chip connecting the ports of two functional blocks cross each other all over the place. At this late stage of the process, it is tooexpensive to redo the routing. Instead, the engineers have to bridge the signals, using the third dimension, so that no two signals cross. However, bridging is a complicated operation, and thus it is desirable to bridge as few signals as possible. The call for a computer program that finds the maximum number of signals which may be connected on the silicon surface without rossing each other, is imminent. Bearing in mind that there may be housands of signal ports at the boundary of a functional block, the problem asks quite a lot of the programmer. Are you up to the task? Figure 1. To the left: The two blocks’ ports and their signal mapping (4,2,6,3,1,5). To the right: At most three signals may be routed on the silicon surface without crossing each other. The dashed signals must be bridged. A typical situation is schematically depicted in figure 1. The ports of the two functional blocks are numbered from 1 to p, from top to bottom. The signal mapping is described by a permutation of the numbers 1 to p in the form of a list of p unique numbers in the range 1 to p, in which the i:th number pecifies which port on the right side should be connected to the i:th port on the left side.Two signals cross if and only if the straight lines connecting the two ports of each pair do. Input On the first line of the input, there is a single positive integer n, telling the number of test scenarios to follow. Each test scenario begins with a line containing a single positive integer p&lt;40000, the number of ports on the two functional blocks. Then follow p lines, describing the signal mapping: On the i:th line is the port number of the block on the right side which should be connected to the i:th port of the block on the left side. Output For each test scenario, output one line containing the maximum number of signals which may be routed on the silicon surface without crossing each other. Examples intput 123456789464 2 6 3 1 5102 3 4 5 6 7 8 9 10 188 7 6 5 4 3 2 195 8 9 2 3 1 7 4 6 output 12343914 思路 求最长上升子序列。 dp，时间复杂度$O(N \log N )$, 代码1234567891011121314151617181920212223242526272829//Problem : 1950 ( Bridging signals ) Judge Status : Accepted//RunId : 25858810 Language : G++ Author : xArmin#include &lt;bits/stdc++.h&gt;using namespace std;#define rep(i,a,n) for(int i=a;i&lt;n;i++)#define repd(i,a,n) for(int i=n-1;i&gt;=a;i--)#define CRL(a) memset(a,0,sizeof(a))const int MAXX=100000+5;const int INF=INT_MAX;const int mod=1e9+7;int a[MAXX],dp[MAXX]; // a数组为数据，dp[i]表示长度为i+1的LIS结尾元素的最小值int main()&#123; int T,n,Len; cin&gt;&gt;T; while(T--)&#123; cin&gt;&gt;n; rep(i,0,n)&#123;cin&gt;&gt;a[i];dp[i]=0x3f3f3f;&#125; dp[0]=a[0];Len=0; rep(i,0,n)&#123; if(a[i]&gt;dp[Len]) dp[++Len]=a[i]; else dp[lower_bound(dp,dp+n,a[i])-dp]=a[i]; //lower_bound:返回第一个比查找的数大的数的下标 &#125; cout&lt;&lt;Len+1&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生成酷炫注释（根据图片生成）]]></title>
    <url>%2F%E7%94%9F%E6%88%90%E9%85%B7%E7%82%AB%E6%B3%A8%E9%87%8A%EF%BC%88%E6%A0%B9%E6%8D%AE%E5%9B%BE%E7%89%87%E7%94%9F%E6%88%90%EF%BC%89%2F</url>
    <content type="text"><![CDATA[预览 一般算法的网络赛结束后都可以查看别人的代码，然后就看到了各种酷炫*炸天的注释，博主实在是羡慕，于是就动手写了一个。原理特别简单，就是用opencv读取图片，转成灰度图，只含有一个通道，然后把0-255对应到可打印字符上，然后一个像素一个像素处理。由于是单像素采集，所以最后生成的文字多少就取决你的图片像素，太大了的话做注释效果不太好，也可以每四个像素取一个平均值，生成一个字符，这样横竖就缩小了一倍，也可以根据自己的需求自行调整。黑白，清晰的图片效果更好。 代码12345678910111213141516171819202122232425262728293031323334353637#include &lt;opencv/cv.h&gt;#include &lt;opencv/highgui.h&gt;#include &lt;string.h&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;using namespace std;using namespace cv;char Book[] = " $@B%8&amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\|()1&#123;&#125;[]?-_+~&lt;&gt;i!lI;:,\"^`'.";char Chang(int gray) &#123; if(gray&gt;240) return ' '; int unit = 255.0 / strlen(Book); return Book[int(gray / unit)]; //return int(gray / unit)? '0':'1'; //return rand()%2? '$':'%';&#125;int main()&#123; char name[] = "timg.jpg"; char name2[] = "timg.txt"; IplImage *a = cvLoadImage(name,0); ofstream Txtout(name2); for (int i = 0; i &lt; a-&gt;height; i++) &#123; for (int j = 0; j &lt; a-&gt;width; j++) &#123; CvScalar s = cvGet2D(a, i, j); Txtout &lt;&lt; Chang(s.val[0]); printf_s("%c",Chang(s.val[0])); &#125; Txtout &lt;&lt; endl; cout &lt;&lt; endl; &#125; Txtout.close(); return 0;&#125;]]></content>
      <categories>
        <category>娱乐</category>
      </categories>
      <tags>
        <tag>娱乐</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Distance Queries（带权LCA）]]></title>
    <url>%2FDistance-Queries%2F</url>
    <content type="text"><![CDATA[描述传送门：poj-1986 &emsp;Farmer John’s cows refused to run in his marathon since he chose a path much too long for their leisurely lifestyle. He therefore wants to find a path of a more reasonable length. The input to this problem consists of the same input as in “Navigation Nightmare” ,followed by a line containing a single integer K, followed by K “distance queries”. Each distance query is a line of input containing two integers, giving the numbers of two farms between which FJ is interested in computing distance (measured in the length of the roads along the path between the two farms). Please answer FJ’s distance queries as quickly as possible! Input Lines 1..1+M: Same format as “Navigation Nightmare” Lines 2+M: A single integer, K. 1 &lt;= K &lt;= 10,000 Lines 3+M..2+M+K: Each line corresponds to a distance query and contains the indices of two farms. Output Lines 1..K: For each distance query, output on a single line an integer giving the appropriate distance. Examples intput 12345678910117 61 6 13 E6 3 9 E3 5 7 S4 1 3 N2 4 20 W4 7 2 S31 61 42 6 output 12313336 大致题意 给出m条边和k个询问，按顺序求出每次询问的两个点的最短距离。 这道题输入巨坑！它给边的规则描述在另一道题上，就是题目里的 “Navigation Nightmare“。然后我建单向边从root跑wa了无数遍。 思路 最短路$O(N^2 \log N))$是会T的。 LCA模板题，维护一个$Dis$数组，$Dis[i]$表示i节点到根节点的距离，查询的时候，u和v的最短距离就是$Dis[u]+Dis[v]-2*Dis[LCA(u,v)]$ 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include &lt;iostream&gt;#include &lt;string.h&gt;#include &lt;vector&gt;#include &lt;stdio.h&gt;using namespace std;#define rep(i,a,n) for(int i=a;i&lt;n;i++)#define repd(i,a,n) for(int i=n-1;i&gt;=a;i--)#define CRL(a,x) memset(a,x,sizeof(a))#define Tp(a,b) make_pair(a,b)const int N = 4e4 + 5;int Fa[N], Dis[N], Begin[N],ans[10005]; vector &lt; pair&lt;int,int&gt; &gt; Qus[N]; bool Vis[N];struct node &#123; int To, S, Next; &#125;;vector&lt;node&gt; Edge;void Init() &#123; Edge.clear(); rep(i, 0, N) &#123; Fa[i] = i; Qus[i].clear(); &#125; CRL(Dis, 0); CRL(Begin, -1); CRL(Vis, false);&#125;void add(int a, int b, int s) &#123; Edge.push_back(node&#123; b,s,Begin[a]&#125;); Begin[a] = Edge.size() - 1;&#125;int Find(int x) &#123; return x == Fa[x] ? x : Fa[x] = Find(Fa[x]); &#125;void Tarjan(int u,int fa) &#123; for (int i = Begin[u]; ~i; i = Edge[i].Next) &#123; int v = Edge[i].To; if(v==fa) continue; //双向边，不往回走 Dis[v] = Edge[i].S + Dis[u]; Tarjan(v,u); Fa[v] = u; &#125; Vis[u] = true; rep(i, 0, Qus[u].size()) if (Vis[Qus[u][i].first]) ans[Qus[u][i].second] = Dis[u] + Dis[Qus[u][i].first] - Dis[Find(Qus[u][i].first)]*2;&#125;int main()&#123; int n, m, a, b, s; char x; while(~scanf("%d%d",&amp;n,&amp;m))&#123; Init(); rep(i, 0, m) &#123; scanf("%d%d%d %c",&amp;a,&amp;b,&amp;s,&amp;x); Fa[b] = a; add(a, b, s); add(b, a, s); &#125; scanf("%d",&amp;m); rep(i, 0, m) &#123; scanf("%d%d",&amp;a,&amp;b); Qus[a].push_back(Tp(b,i)); //pair.second记录询问顺序 Qus[b].push_back(Tp(a,i)); &#125; int root = Find(a); rep(i, 0, n + 1) Fa[i] = i; Tarjan(root,0); rep(i,0,m) printf("%d\n",ans[i]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>LCA</tag>
        <tag>Tarjan</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nearest Common Ancestors（Tarjan离线+LCA模板题）]]></title>
    <url>%2FNearest-Common-Ancestors%2F</url>
    <content type="text"><![CDATA[描述传送门：poj-1330 &emsp;A rooted tree is a well-known data structure in computer science and engineering. An example is shown below: In the figure, each node is labeled with an integer from {1, 2,…,16}. Node 8 is the root of the tree. Node x is an ancestor of node y if node x is in the path between the root and node y. For example, node 4 is an ancestor of node 16. Node 10 is also an ancestor of node 16. As a matter of fact, nodes 8, 4, 10, and 16 are the ancestors of node 16. Remember that a node is an ancestor of itself. Nodes 8, 4, 6, and 7 are the ancestors of node 7. A node x is called a common ancestor of two different nodes y and z if node x is an ancestor of node y and an ancestor of node z. Thus, nodes 8 and 4 are the common ancestors of nodes 16 and 7. A node x is called the nearest common ancestor of nodes y and z if x is a common ancestor of y and z and nearest to y and z among their common ancestors. Hence, the nearest common ancestor of nodes 16 and 7 is node 4. Node 4 is nearer to nodes 16 and 7 than node 8 is. For other examples, the nearest common ancestor of nodes 2 and 3 is node 10, the nearest common ancestor of nodes 6 and 13 is node 8, and the nearest common ancestor of nodes 4 and 12 is node 4. In the last example, if y is an ancestor of z, then the nearest common ancestor of y and z is y. Write a program that finds the nearest common ancestor of two distinct nodes in a tree. Input The input consists of T test cases. The number of test cases T is given in the first line of the input file. Each test case starts with a line containing an integer N , the number of nodes in a tree, $2&lt;=N&lt;=10,000$. The nodes are labeled with integers $1, 2,…, N$. Each of the next $N -1$ lines contains a pair of integers that represent an edge —the first integer is the parent node of the second integer. Note that a tree with N nodes has exactly $N - 1$ edges. The last line of each test case contains two distinct integers whose nearest common ancestor is to be computed. Output Print exactly one line for each test case. The line should contain the integer that is the nearest common ancestor. Examples intput 1234567891011121314151617181920212223242161 148 510 165 94 68 44 101 136 1510 116 710 216 38 116 1216 752 33 43 11 53 5 output 1243 题意 第二段是对LCA的解释，然后每组数据给定有N个节点，N-1条边，最后给出一组u,v，求u,V的最近公共祖先。 伪代码1234567891011Tarjan(u)&#123;//Union和find为并查集合并函数和查找函数 for each(u,v)&#123; //访问所有u子节点v Tarjan(v); //继续往下遍历 Union(u,v); //合并v到u上 标记v被访问过; &#125; for each(u,e)&#123; //访问所有和u有询问关系的e 如果e被访问过; u,e的最近公共祖先为find(e); &#125;&#125; 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859/*Problem: 1330 Memory: 1668K Time: 250MS Language: G++ Result: Accepted*/#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;string.h&gt;using namespace std;#define rep(i,a,n) for(int i=a;i&lt;n;i++)#define repd(i,a,n) for(int i=n-1;i&gt;=a;i--)#define CRL(a,x) memset(a,x,sizeof(a))const int N=1e4+5;int Fa[N],u,v;vector&lt;int&gt; Map[N];bool Vis[N];int Find(int x)&#123;return Fa[x]==x? x:Fa[x]=Find(Fa[x]);&#125;void Union(int a,int b)&#123;int fa=Find(a),fb=Find(b);Fa[fa]=fb;&#125;void Init()&#123; rep(i,0,N) &#123;Fa[i]=i;Map[i].clear();&#125; CRL(Vis,false);&#125;bool Tarjan(int root)&#123; rep(i,0,Map[root].size())&#123; if(Tarjan(Map[root][i]))return true; Union(Map[root][i],root); Vis[Map[root][i]]=true; &#125; if(root==u&amp;&amp;Vis[v])&#123; cout&lt;&lt; Find(v)&lt;&lt;endl; return true; &#125; else if(root==v&amp;&amp;Vis[u])&#123; cout&lt;&lt; Find(u)&lt;&lt;endl; return true; &#125; return false;&#125;int main()&#123; std::ios::sync_with_stdio(false); int n,m,_,a,b,root; cin&gt;&gt;_; while(_--)&#123; Init(); cin&gt;&gt;n; rep(i,0,n-1)&#123; cin&gt;&gt;a&gt;&gt;b; Fa[b]=a; Map[a].push_back(b); &#125; root=Find(a); //找根 cin&gt;&gt;u&gt;&gt;v; rep(i,0,N) Fa[i]=i; Tarjan(root); &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>LCA</tag>
        <tag>Tarjan</tag>
        <tag>离线</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[迷宫城堡(Tarjan入门)]]></title>
    <url>%2F%E8%BF%B7%E5%AE%AB%E5%9F%8E%E5%A0%A1%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-1269 &emsp;为了训练小希的方向感，Gardon建立了一座大城堡，里面有N个房间(N&lt;=10000)和M条通道(M&lt;=100000)，每个通道都是单向的，就是说若称某通道连通了A房间和B房间，只说明可以通过这个通道由A房间到达B房间，但并不说明通过它可以由B房间到达A房间。Gardon需要请你写个程序确认一下是否任意两个房间都是相互连通的，即：对于任意的i和j，至少存在一条路径可以从房间i到房间j，也存在一条路径可以从房间j到房间i。 Input 输入包含多组数据，输入的第一行有两个数：N和M，接下来的M行每行有两个数a和b，表示了一条通道可以从A房间来到B房间。文件最后以两个0结束。 Output 对于输入的每组数据，如果任意两个房间都是相互连接的，输出”Yes”，否则输出”No”。 Examples intput 1234567893 31 22 33 13 31 22 33 20 0 output 12YesNo 思路 Tarjan的模板题，求有向图的强连通分量。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include&lt;bits/stdc++.h&gt;using namespace std;#define rep(i,a,n) for(int i=a;i&lt;n;i++)#define repd(i,a,n) for(int i=n-1;i&gt;=a;i--)#define CRL(a,x) memset(a,x,sizeof(a))const int N=1e5+5;int DFN[N],Low[N],Clock,Begin[N],ans;bool InStack[N];struct node&#123;int To,Next;&#125;; //链式向前星存图vector&lt;node&gt; Edge;stack &lt;int&gt; S;void Init()&#123; CRL(DFN,0);CRL(Low,0); CRL(Begin,-1);CRL(InStack,false); while(!S.empty())S.pop(); Edge.clear(); ans=Clock=0;&#125;void Tarjan(int u)&#123; S.push(u);InStack[u]=true; //入栈 DFN[u]=Low[u]=++Clock; //维护DFS序 for(int i=Begin[u];i!=-1;i=Edge[i].Next)&#123; //遍历边 if(!DFN[Edge[i].To])&#123; Tarjan(Edge[i].To); Low[u]=min(Low[u],Low[Edge[i].To]); &#125; else if(InStack[Edge[i].To]) Low[u]=min(Low[u],DFN[Edge[i].To]); &#125; if(DFN[u]==Low[u])&#123; //弹出关键点之前的点，构成强连通分支 ans++;int tem; do&#123; tem=S.top(); S.pop(); InStack[tem]=false; &#125;while(tem!=u); &#125;&#125;int main()&#123; std::ios::sync_with_stdio(false); //关闭流同步，加速读写 int n,m,a,b; while(cin&gt;&gt;n&gt;&gt;m&amp;&amp;(n||m))&#123; Init(); rep(i,0,m)&#123; cin&gt;&gt;a&gt;&gt;b; Edge.push_back(node &#123;b,Begin[a]&#125;); Begin[a]=Edge.size()-1; &#125; rep(i,1,n+1) if(!DFN[i]) Tarjan(i); //Tarjan puts(ans==1? "Yes":"No"); //联通分支数是否为1 &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>Tarjan</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[三原色图（最小生成树 kruskal）]]></title>
    <url>%2F%E4%B8%89%E5%8E%9F%E8%89%B2%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[描述传送门：2018”百度之星”程序设计大赛 - 资格赛1006 &emsp;度度熊有一张 $n$ 个点 $m$ 条边的无向图，所有点按照 $1,2,⋯,n$ 标号，每条边有一个正整数权值以及一种色光三原色红、绿、蓝之一的颜色。 现在度度熊想选出恰好 $k$ 条边，满足只用这 $k$ 条边之中的红色边和绿色边就能使 n 个点之间两两连通，或者只用这 $k$ 条边之中的蓝色边和绿色边就能使 $n$ 个点之间两两连通，这里两个点连通是指从一个点出发沿着边可以走到另一个点。 对于每个 $k=1,2,⋯,m$，你都需要帮度度熊计算选出恰好 $k$ 条满足条件的边的权值之和的最小值。 Input 第一行包含一个正整数 T，表示有 T 组测试数据。 接下来依次描述 T 组测试数据。对于每组测试数据： 第一行包含两个整数 n 和 m，表示图的点数和边数。 接下来 m 行，每行包含三个整数 a,b,w 和一个字符 c，表示有一条连接点 a 与点 b 的权值为 w、颜色为 c 的无向边。 保证$ 1 \leq T \leq 100$，$1 \leq n,m \leq 100$，$1 \leq a,b \leq n$，$1 \leq w \leq 1000$，$c \in \{R,G,B\}$，这里 R,G,B 分别表示红色、绿色和蓝色。 Output 对于每组测试数据，先输出一行信息 “Case #x:”（不含引号），其中 $x$ 表示这是第 $x$ 组测试数据，接下来 $m$ 行，每行包含一个整数，第 $i$ 行的整数表示选出恰好 $i$ 条满足条件的边的权值之和的最小值，如果不存在合法方案，输出 −1，行末不要有多余空格。 Examples intput 1234567891015 81 5 1 R2 1 2 R5 4 5 R4 5 3 G1 3 3 G4 3 5 G5 4 1 B1 2 2 B output 123456789Case #1:-1-1-1910121722 思路 显然是求最小生树，但是加了颜色限制。 按两种限制建两个最小生成树，在n-1条边的时候取min。大于n-1条边的时候就从没选的边里选一条最短的。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include&lt;bits/stdc++.h&gt;using namespace std;#define rep(i,a,n) for(int i=a;i&lt;n;i++)#define repd(i,a,n) for(int i=n-1;i&gt;=a;i--)#define CRL(a,x) memset(a,x,sizeof(a))const int N=1e2+5;int Fa[N],test=999,Dis[N];struct node &#123; int a,b,s,Used; char col; bool operator&lt; (node e) const &#123; return s&lt;e.s; &#125;&#125; Edge1[N],Edge2[N];int Find(int x) &#123;return Fa[x]==x? x:Fa[x]=Find(Fa[x]);&#125;bool Union(int x,int y) &#123;int fa=Find(x),fb=Find(y);Fa[fa]=fb;return fa!=fb;&#125;int main() &#123; int T,n,m; cin&gt;&gt;T; rep(Case,1,T+1) &#123; cin&gt;&gt;n&gt;&gt;m; rep(i,0,n+1) Fa[i]=i; int x,y,w; char c; rep(i,0,m) &#123; cin&gt;&gt;x&gt;&gt;y&gt;&gt;w&gt;&gt;c; Edge1[i]=Edge2[i]=(node) &#123;x,y,w,0,c&#125;; &#125; sort(Edge1,Edge1+m); sort(Edge2,Edge2+m); int Clock1=0,Clock2=0,tem1=0,tem2=0; //不要蓝色建最小生成树 for(int i=0; i&lt;m&amp;&amp;Clock1&lt;n-1; i++) if(Edge1[i].col!='B'&amp;&amp;Union(Edge1[i].a,Edge1[i].b)) &#123; tem1+=Edge1[i].s; Edge1[i].Used=1; Clock1++; &#125; rep(i,0,n+1) Fa[i]=i; //初始化并查集 for(int i=0; i&lt;m&amp;&amp;Clock2&lt;n-1; i++) //不要红色建最小生成树 if(Edge2[i].col!='R'&amp;&amp;Union(Edge2[i].a,Edge2[i].b)) &#123; tem2+=Edge2[i].s; Edge2[i].Used=1; Clock2++; &#125; CRL(Dis,-1); if(Clock1==n-1||Clock2==n-1) &#123;//如果找到了最小生成树 if(Clock1!=n-1) //如果没有蓝色无解，就给他附一个极大值 tem1=0x3f3f3f; else if(Clock2!=n-1) //如果没有红色无解 tem2=0x3f3f3f; Dis[n-1]=min(tem1,tem2); int xa=-1,xb=-1; rep(i,n,m+1) &#123; //每次找没用过的最短边 while(Edge1[++xa].Used);//两种情况分别找 tem1+=Edge2[xa].s; Edge1[xa].Used=1; while(Edge2[++xb].Used); tem2+=Edge2[xb].s; Edge2[xb].Used=1; Dis[i]=min(tem1,tem2); &#125; &#125; printf("Case #%d:\n",Case); rep(i,1,m+1) printf("%d\n",Dis[i]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>最小生成树</tag>
        <tag>kruskal</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[调查问卷（状压+xjb暴力）]]></title>
    <url>%2F%E8%B0%83%E6%9F%A5%E9%97%AE%E5%8D%B7%2F</url>
    <content type="text"><![CDATA[描述传送门：2018”百度之星”程序设计大赛 - 资格赛1001 &emsp;度度熊为了完成毕业论文，需要收集一些数据来支撑他的论据，于是设计了一份包含 $m$ 个问题的调查问卷，每个问题只有 ‘A’ 和 ‘B’ 两种选项。 将问卷散发出去之后，度度熊收到了 $n$ 份互不相同的问卷，在整理结果的时候，他发现可以只保留其中的一部分问题，使得这 $n$ 份问卷仍然是互不相同的。这里认为两张问卷是不同的，当且仅当存在至少一个被保留的问题在这两份问卷中的回答不同。 现在度度熊想知道，存在多少个问题集合，使得这 n 份问卷在只保留这个集合的问题之后至少有 $k$ 对问卷是不同的。 Input 第一行包含一个整数 $T$，表示有 $T$ 组测试数据。 接下来依次描述 $T$ 组测试数据。对于每组测试数据： 第一行包含三个整数 $n$，$m$ 和 $k$，含义同题目描述。 接下来 $n$ 行，每行包含一个长度为 m 的只包含 ‘A’ 和 ‘B’ 的字符串，表示这份问卷对每个问题的回答。 保证 $1 \leq T \leq 100$，$1 \leq n \leq 10^3$，$1 \leq m \leq 10$，$1 \leq k \leq 10^6$，给定的 $n$ 份问卷互不相同。 Output 对于每组测试数据，输出一行信息 “Case #x: y”（不含引号），其中 x 表示这是第 x 组测试数据，y 表示满足条件的问题集合的个数，行末不要有多余空格。 Examples intput 123456722 2 1AABB2 2 2AABB output 12Case #1: 3Case #2: 0 思路 暴力遍历所有问题集的情况，对于每种情况就枚举所有的试卷，对于每一张试卷，判断这种情况在这张试卷之前的试卷中有多少张是跟它一样的，然后减去。最后大于$k$就ans++。 把问题集和每张试卷状压一下，用二进制数表示。 对于问题集，用1表示取这个问题，0表示不取这个问题,例如选第1，3个问题，那么就是101对应十进制的3。 对于试卷，用1表示选$A$，0表示选$B$。 代码123456789101112131415161718192021222324252627282930#include&lt;bits/stdc++.h&gt;using namespace std;#define rep(i,a,n) for(int i=a;i&lt;n;i++)#define repd(i,a,n) for(int i=n-1;i&gt;=a;i--)#define CRL(a,x) memset(a,x,sizeof(a))const int N = 1e3 + 5;int main()&#123; int T, n, m, k, ans, a[N] = &#123; 0 &#125;,M[1025]; cin &gt;&gt; T; char x; rep(Case,1,T+1) &#123; ans = 0; scanf("%d%d%d",&amp;n,&amp;m,&amp;k); getchar(); rep(i, 0, n) while ((x = getchar()) != '\n') a[i] = x == 'A' ? a[i] &lt;&lt; 1 | 1 : a[i] &lt;&lt; 1; //状压答卷 int Len=1&lt;&lt;m,tem; //Len为问题集的情况总数 rep(i, 1, Len) &#123; //遍历所有问题集 CRL(M,0);tem=0; rep(j,0, n) //遍历所有问卷 tem+=j-M[a[j]&amp;i]++; //M[i]表示当前问题集的i答案的试卷数，a[j]&amp;i表示当前问题集下，a[j]答卷的答案状态。 if (tem &gt;= k) ans++; //如果有k对以上，ans++ &#125; printf("Case #%d: %d\n",Case,ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>状压</tag>
        <tag>组合</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[巧克力（模拟）]]></title>
    <url>%2F%E5%B7%A7%E5%85%8B%E5%8A%9B%2F</url>
    <content type="text"><![CDATA[描述传送门：openjudge &emsp;罗海川学长和孙其灵学长都喜欢吃巧克力，巧克力真的很好吃。我们团队的队员也很喜欢吃，但是由于人数比较多，而他们又不想再去买巧克力，所以两位学长决定将一个$N \times M \times K$的长方体的巧克力分解成111的正方体小块，这样就可以分给更多的人了。但是两个学长分解巧克力的方法不同，罗海川学长由于没有工具，所以只能用手掰，可以将一块掰成两块。而孙其灵学长事先有准备，有一把足够长的刀，所以孙其灵学长用刀切，可以将一些切成两半。现在你能告诉我们罗海川学长和孙其灵学长将巧克力都分解成111的正方体小块最少需要多少步吗？ Input 输入包括多组测试数据。输入三个数 $N,M,K(1 &lt;=N,M,K &lt;=2000)$在一行，用空格隔开。表示巧克力的大小$N \times M \times K$。 Output 分别输出罗海川学长和孙其灵学长分解巧克力所用的最小步数。 Examples intput 121 1 32 2 2 output 122 27 3 思路 没刀的情况很简单，就是$N \times M \times K-1$。 有刀的情况也很简单，单独看每一个纬度，要切成1，就每次对半切，取两半较大的继续对半切，另一半就不用管了（显然小的那一半肯定可以叠在大的上面切完）。所以易得答案就是$\lceil \log_2N \rceil+\lceil \log_2M \rceil + \lceil \log_2K \rceil$。 代码1234567891011121314151617#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;int main()&#123; ll a,b,c，ans; while(~scanf("%lld%lld%lld",&amp;a,&amp;b,&amp;c))&#123; printf("%lld ",a*b*c-1); ans=0; if(a!=1) ans+=ceil(log(a)/log(2)); if(b!=1) ans+=ceil(log(b)/log(2)); if(c!=1) ans+=ceil(log(c)/log(2)); printf("%lld\n",ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Max Area(贪心)]]></title>
    <url>%2FMax-Area%2F</url>
    <content type="text"><![CDATA[描述传送门：swustoj-24 &emsp;又是这道题，请不要惊讶，也许你已经见过了，那就请你再来做一遍吧。这可是wolf最骄傲的题目哦。在笛卡尔坐标系正半轴（x&gt;=0,y&gt;=0）上有n个点，给出了这些点的横坐标和纵坐标，但麻烦的是这些点的坐标没有配对好，你的任务就是将这n个点的横坐标和纵坐标配对好，使得这n个点与x轴围成的面积最大。 Input 在数据的第一行有一个正整数m,表示有m组测试实例。接下来有$m$行，每行表示一组测试实例。每行的第一个数$n$，表示给出了$n$个点，接着给出了$n$个$x$坐标和$n$个$y$坐标。（给出的$x$轴的数据不会重复，$y$轴数据也不会重复）$(m&lt;5000,1&lt;n&lt;50)$ Output 输出所计算的最大面积，结果保留两位小数，每组数据占一行。 Examples intput 12324 0 1 3 5 1 2 3 46 14 0 5 4 6 8 1 5 6 2 4 3 output 1215.0059.00 思路 暴力枚举$O(n!)$肯定会T，数据范围就是赤果果的暗示要贪心。 求面积就是把多边形垂直x轴切成n-1个梯形然后分开算没什么好说的，常规sort一下也没什么好说的。 然后就会发现每一个$y_i$都会和$x_i-x_{i-1},\ x_{i+1}-x_{i}$这两个高乘一下，合并一下答案就是\sum_{i=0}^{n-1} (x_{i+1}-x_{i-1}) \times y_i，当然，还要处理一下两边的越界。 坑点：数据都是 $double$ 代码1234567891011121314151617181920212223#include&lt;bits/stdc++.h&gt;using namespace std;#define rep(i,a,n) for(int i=a;i&lt;n;i++)#define repd(i,a,n) for(int i=n-1;i&gt;=a;i--)const int N=5005;int main() &#123; double x[N],y[N],h[N],ans;int n,T; cin&gt;&gt;T; while(T--)&#123; cin&gt;&gt;n;ans=0; rep(i,0,n)cin&gt;&gt;x[i]; rep(i,0,n)cin&gt;&gt;y[i]; sort(x,x+n); h[0]=x[1]-x[0];h[n-1]=x[n-1]-x[n-2]; rep(i,1,n-1) h[i]=x[i+1]-x[i-1]; sort(h,h+n); sort(y,y+n); rep(i,0,n) ans+=h[i]*y[i]; printf("%.2lf\n",ans/2); &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Prime Path（素数筛+spfa最短路/bfs）]]></title>
    <url>%2FPrime-Path%EF%BC%88%E7%B4%A0%E6%95%B0%E7%AD%9B-spfa%E6%9C%80%E7%9F%AD%E8%B7%AF%EF%BC%89%2F</url>
    <content type="text"><![CDATA[描述传送门：poj-3126传送门：swustoj-2 &emsp;The ministers of the cabinet were quite upset by the message from the Chief of Security stating that they would all have to change the four-digit room numbers on their offices. It is a matter of security to change such things every now and then, to keep the enemy in the dark. But look, I have chosen my number 1033 for good reasons. I am the Prime minister, you know! I know, so therefore your new number 8179 is also a prime. You will just have to paste four new digits over the four old ones on your office door. No, it’s not that simple. Suppose that I change the first digit to an 8, then the number will read 8033 which is not a prime! I see, being the prime minister you cannot stand having a non-prime number on your door even for a few seconds. Correct! So I must invent a scheme for going from 1033 to 8179 by a path of prime numbers where only one digit is changed from one prime to the next prime. Now, the minister of finance, who had been eavesdropping, intervened. No unnecessary expenditure, please! I happen to know that the price of a digit is one pound. Hmm, in that case I need a computer program to minimize the cost. You don’t know some very cheap software gurus, do you? In fact, I do. You see, there is this programming contest going on… Help the prime minister to find the cheapest prime path between any two given four-digit primes! The first digit must be nonzero, of course. Here is a solution in the case above.1033173337333739377987798179 &emsp;The cost of this solution is 6 pounds. Note that the digit 1 which got pasted over in step 2 can not be reused in the last step – a new 1 must be purchased. Input &emsp;One line with a positive number: the number of test cases (at most 100). Then for each test case, one line with two numbers separated by a blank. Both numbers are four-digit primes (without leading zeros). Output &emsp; One line for each case, either with a number stating the minimal cost or containing the word Impossible. Examples intput 123431033 81791373 80171033 1033 output 123670 题目大意 如果两个四位的素数有且只有一位数字不一样时，这两两个素数可以互相变化成对方。 每组数据给你两个素数，求从一个到另一个素数需要变化的最小次数。 思路 用素数筛预处理出一万内所有素数。 $O(N^2)$预处理出边，建图完毕。 链式向前星存图。 最后从起点到终点跑一遍spfa，求得最短路，即答案。 用bfs跑也是可以过的。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;queue&gt;#include&lt;string.h&gt;using namespace std;#define rep(i,a,n) for(int i=a;i&lt;n;i++)#define repd(i,a,n) for(int i=n-1;i&gt;=a;i--)#define CRL(a) memset(a,0,sizeof(a))#define CRL2(a,x) memset(a,x,sizeof(a))const int mod = 1e9 + 7;const int N = 1e4+5;int prime[N] = &#123; 0 &#125;, num_prime = 0;int isNotPrime[N] = &#123; 1, 1 &#125;, BeginP=-1;struct node &#123;int To, S, Next;&#125;; //链式向前星存图vector &lt;node&gt; Edge;int Begin[N], Inque[N], Dis[N], n;void GetPrim() &#123; //线筛 rep(i,2,N) &#123; if (!isNotPrime[i]) &#123; prime[num_prime++] = i; if (i&gt;1000&amp;&amp;BeginP==-1) BeginP = num_prime-1; //BeginP用来存第一个四位数的，注意是-1这个点wa了好久 &#125; for (int j = 0; j&lt;num_prime&amp;&amp;i*prime[j]&lt;N; j++) &#123; isNotPrime[i*prime[j]] = 1; if (!(i%prime[j])) break; &#125; &#125;&#125;void add(int a, int b) &#123; //加边 node tem; tem.To = b; tem.S = 1; tem.Next = Begin[a]; Begin[a] = Edge.size(); Edge.push_back(tem);&#125;bool Judge(int x, int y) &#123; //判断是否只有一位不同 int Flag = 0; rep(i, 0, 4) &#123; if (x % 10 != y % 10) Flag++; x /= 10; y /= 10; &#125; return Flag==1;&#125;void spfa(int s) &#123;//最短路 rep(i,0,N+1) Dis[i] = 9999999;Dis[s] = 0; CRL(Inque);Inque[s] = 1; queue&lt;int&gt; Q;Q.push(s); while (!Q.empty()) &#123; int T = Q.front(); Q.pop();Inque[T] = 0; for (int i = Begin[T]; i != -1; i = Edge[i].Next) &#123; if (Dis[Edge[i].To]&gt;Dis[T] + Edge[i].S) &#123; Dis[Edge[i].To] = Dis[T] + Edge[i].S; Q.push(Edge[i].To); Inque[Edge[i].To] = 1; &#125; &#125; &#125;&#125;int main() &#123; ios::sync_with_stdio(false); int x, Star, End, T; GetPrim(); CRL2(Begin, -1); rep(i,BeginP,num_prime) rep(j,i,num_prime) if (Judge(prime[i], prime[j])) &#123; add(prime[i], prime[j]); add(prime[j], prime[i]); &#125; cin &gt;&gt; T; while (T--) &#123; cin &gt;&gt; Star &gt;&gt; End; spfa(Star); if(Dis[End]!=9999999) cout &lt;&lt; Dis[End] &lt;&lt; endl; else cout &lt;&lt; "Impossible" &lt;&lt; endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>最短路</tag>
        <tag>SPFA</tag>
        <tag>素数筛，bfs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Code(排列组合)]]></title>
    <url>%2FCode-%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88%2F</url>
    <content type="text"><![CDATA[描述传送门：poj-1850 &emsp;Transmitting and memorizing information is a task that requires different coding systems for the best use of the available space. A well known system is that one where a number is associated to a character sequence. It is considered that the words are made only of small characters of the English alphabet a,b,c, …, z (26 characters). From all these words we consider only those whose letters are in lexigraphical order (each character is smaller than the next character). The coding system works like this: The words are arranged in the increasing order of their length. The words with the same length are arranged in lexicographical order (the order from the dictionary). We codify these words by their numbering, starting with a, as follows:a - 1b - 2…z - 26ab - 27…az - 51bc - 52…vwxyz - 83681… Specify for a given word if it can be codified according to this coding system. For the affirmative case specify its code. Input The only line contains a word. There are some constraints: The word is maximum 10 letters length The English alphabet has 26 characters. Output The output will contain the code of the given word, or 0 if the word can not be codified. Examples intput 1bf output 155 思路 对于长度为$N$的字符串应该先求长度为$N-1$的字符串有多少种。很明显可以看出长度为i的字符串就是从26个字母中选择i个字符组合（因为有大小限制，所以不是排列）。所以长度为$N-1$的字符串有：$sum_{i=1}^{Len-1}C_{26}^{i}$种。 对于剩下的，就从a[0]开始，每次计算这个字母开头的单词个数，遍历完就行了。 代码123456789101112131415161718192021222324252627282930#include&lt;iostream&gt;#include&lt;string.h&gt;using namespace std;#define rep(i,a,n) for(int i=a;i&lt;n;i++)#define repd(i,a,n) for(int i=n-1;i&gt;=a;i--)int C(int n,int r)&#123;return r? C(n,r-1)*(n-r+1)/r:1;&#125;int main()&#123; std::ios::sync_with_stdio(false); int sum=0;char a[15]; while(cin&gt;&gt;a)&#123; int Len=strlen(a);sum=0; rep(i,1,Len) if(a[i]&lt;=a[i-1]) sum=-1; if(sum==-1) &#123;cout&lt;&lt;0&lt;&lt;endl;continue;&#125; rep(i,1,Len) sum+=C(26,i); rep(i,0,Len)&#123; char tem= i? a[i-1]+1:'a'; while(tem&lt;a[i]) sum+=C('z'-tem++,Len-i-1); &#125; cout&lt;&lt;sum+1&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>排列组合</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mayor's posters(线段树区间更新)]]></title>
    <url>%2FMayor-s-posters-%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E6%9B%B4%E6%96%B0%2F</url>
    <content type="text"><![CDATA[描述传送门：poj-2528一样的题：swustoj-764（校门外的树 Plus Plus） &emsp;The citizens of Bytetown, AB, could not stand that the candidates in the mayoral election campaign have been placing their electoral posters at all places at their whim. The city council has finally decided to build an electoral wall for placing the posters and introduce the following rules: Every candidate can place exactly one poster on the wall. All posters are of the same height equal to the height of the wall; the width of a poster can be any integer number of bytes (byte is the unit of length in Bytetown). The wall is divided into segments and the width of each segment is one byte. Each poster must completely cover a contiguous number of wall segments. They have built a wall 10000000 bytes long (such that there is enough place for all candidates). When the electoral campaign was restarted, the candidates were placing their posters on the wall and their posters differed widely in width. Moreover, the candidates started placing their posters on wall segments already occupied by other posters. Everyone in Bytetown was curious whose posters will be visible (entirely or in part) on the last day before elections.Your task is to find the number of visible posters when all the posters are placed given the information about posters’ size, their place and order of placement on the electoral wall. Input The first line of input contains a number c giving the number of cases that follow. The first line of data for a single case contains number $1\ &lt;=\ n\ &lt;=\ 10000$. The subsequent n lines describe the posters in the order in which they were placed. The $i^{th}$ line among the n lines contains two integer numbers $l_i$ and $r_i$ which are the number of the wall segment occupied by the left end and the right end of the $i^{th}$ poster, respectively. We know that for each $1\ &lt;=\ i\ &lt;=\ n$, $1 &lt;= l_i &lt;= r_i &lt;= 10000000$. After the $i^{th}$ poster is placed, it entirely covers all wall segments numbered $l_i, l_{i+1} ,… , r_i$. Output For each input data set print the number of visible posters after all the posters are placed.The picture below illustrates the case of the sample input. Examples intput 1234567151 42 68 103 47 10 output 14 题目大意 有$n$张海报要贴到墙上，按张贴顺序给出了每张海报贴的起始位置（只考虑横坐标），求最后能看到的海报的数量（只要有一点能看到就算能看到）。 思路 很明显要用线段树，维护区间是否被覆盖了。 我们可以很显然想到，应该倒序覆盖区间，因为最后面贴的一定是看得到的。 每次覆盖的时候判断是否需要更新区间的状态。也就是说，如果你即将覆盖的区域已经（由于之前的覆盖操作）完全被覆盖了，那么就不需要更新这个区间的状态了。相当于是你现在要贴的海报会被后面要贴的海报所完全覆盖，那么你现在要贴的这张海报最后就看不到了。 每次覆盖的时候，如果需要更新区间，那么ans++，详见代码。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include&lt;iostream&gt;#include&lt;string.h&gt;using namespace std;#define rep(i,a,n) for(int i=a;i&lt;n;i++)#define repd(i,a,n) for(int i=a;i&gt;=n;i--)#define CRL(a) memset(a,0,sizeof(a))const int N=1e7+5;bool tr[N&lt;&lt;2];struct node &#123;int l,r;&#125;Op[10005]; //储存操作bool Update(int root,int l,int r,int ul,int ur)&#123;//覆盖函数，true:需要更新 false:不需要更新 if(tr[root]) return false; //如果当前区间已经完全被覆盖了，就返回false if(ul==l&amp;&amp;ur==r) return tr[root]=true; //刚好为要覆盖的区间，更新！ 返回true //线段树常规操作，递归处理 bool ret; int mid=l+r&gt;&gt;1; if(ur&lt;=mid) ret=Update(root&lt;&lt;1,l,mid,ul,ur); else if(ul&gt;mid) ret=Update(root&lt;&lt;1|1,mid+1,r,ul,ur); else&#123; bool ans1=Update(root&lt;&lt;1,l,mid,ul,mid); bool ans2=Update(root&lt;&lt;1|1,mid+1,r,mid+1,ur); ret=ans1||ans2; //只要有一边需要更新就返回true &#125; if(tr[root&lt;&lt;1]&amp;&amp;tr[root&lt;&lt;1|1]) tr[root]=true;//如果更新完后这个区间的子区间都被覆盖了，他也被覆盖 return ret;&#125;int main()&#123; std::ios::sync_with_stdio(false); //关闭流同步，加速cin,cout int n,l,r,ans=0,Max,T; cin&gt;&gt;T; while(T--)&#123; cin&gt;&gt;n; CRL(tr);ans=Max=0; rep(i,0,n) &#123; cin&gt;&gt;Op[n-i-1].l&gt;&gt;Op[n-i-1].r; //倒着存操作 Max=max(Max,Op[n-i-1].r); //维护最大的横坐标 &#125; rep(i,0,n) //依次覆盖 if(Update(1,1,Max,Op[i].l,Op[i].r)) //如果需要更新，ans++ ans++; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[House Man（差分约束+链式向前星）]]></title>
    <url>%2FHouse-Man%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-3440 &emsp;In Fuzhou, there is a crazy super man. He can’t fly, but he could jump from housetop to housetop. Today he plans to use $N$ houses to hone his house hopping skills. He will start at the shortest house and make $N$-1 jumps, with each jump taking him to a taller house than the one he is jumping from. When finished, he will have been on every house exactly once, traversing them in increasing order of height, and ending up on the tallest house. The man can travel for at most a certain horizontal distance $D$ in a single jump. To make this as much fun as possible, the crazy man want to maximize the distance between the positions of the shortest house and the tallest house.The crazy super man have an ability—move houses. So he is going to move the houses subject to the following constraints: All houses are to be moved along a one-dimensional path. Houses must be moved at integer locations along the path, with no two houses at the same location. Houses must be arranged so their moved ordering from left to right is the same as their ordering in the input. They must NOT be sorted by height, or reordered in any way. They must be kept in their stated order. The super man can only jump so far, so every house must be moved close enough to the next taller house. Specifically, they must be no further than $D$ apart on the ground (the difference in their heights doesn’t matter). Given $N$ houses, in a specified order, each with a distinct integer height, help the super man figure out the maximum possible distance they can put between the shortest house and the tallest house, and be able to use the houses for training. Input In the first line there is an integer T, indicates the number of test cases.$(T\ &lt;=\ 500)$Each test case begins with a line containing two integers $N\ (1\ ≤ N\ ≤\ 1000)$ and $D\ (1\ ≤\ D\ ≤1000000)$. The next line contains $N$ integer, giving the heights of the $N$ houses, in the order that they should be moved. Within a test case, all heights will be unique. Output For each test case , output “Case %d: “first where d is the case number counted from one, then output a single integer representing the maximum distance between the shortest and tallest house, subject to the constraints above, or -1 if it is impossible to lay out the houses. Do not print any blank lines between answers. Examples intput 123456734 4 20 30 10 40 5 6 20 34 54 10 15 4 2 10 20 16 13 output 123Case 1: 3Case 2: 3Case 3: -1 思路 高度相近的两个楼的距离不得超过$D$，也就是$|Dis_i-Dis_{i+1}|&lt;=D$，减的时候保证大减小就能去掉绝对值，这是第一个约束方程。 坐标相近的两个楼的距离应该&gt;=1.即$Dis_{i+1}-Dis_i&gt;=1$，转化一下就是$Dis_i-Dis_{i+1}&lt;=-1$，这是第二个约束方程， 最大的坑点！！！！Dis的初始值一定要足够大，0xfffffff都过不了，最后取的0x3f3f3f3f。 haishitaicaile. 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define CRL2(a,x) memset(a,x,sizeof(a))#define INF 0x3f3f3f3fconst int N=1e3+5;struct node&#123;int To,S,Next;&#125;;vector &lt;node&gt; Edge;pair&lt;int,int&gt; Node[N];int Begin[N],Vis[N],Inque[N],Dis[N],n;void add(int a,int b,int w)&#123; node tem; tem.To=b; tem.S=w; tem.Next=Begin[a]; Begin[a]=Edge.size(); Edge.push_back(tem);&#125;bool spfa(int s)&#123; for(int i=0;i&lt;=n;i++) Dis[i]=INF; Dis[s]=0; CRL(Vis);Vis[s]=1; CRL(Inque);Inque[s]=1; queue&lt;int&gt; Q;Q.push(s); while(!Q.empty())&#123; int T=Q.front();Q.pop();Inque[T]=0; for(int i=Begin[T];i!=-1;i=Edge[i].Next)&#123; if(Dis[Edge[i].To]&gt;Dis[T]+Edge[i].S)&#123; Dis[Edge[i].To]=Dis[T]+Edge[i].S; Q.push(Edge[i].To); Inque[Edge[i].To]=1; if(++Vis[Edge[i].To]&gt;n)return true ; &#125; &#125; &#125; return false;&#125;int main()&#123; int T,D; cin&gt;&gt;T; for (int Case=1; Case&lt;=T;Case++)&#123; Edge.clear();CRL2(Begin,-1); scanf("%d%d",&amp;n,&amp;D); for(int i=1;i&lt;=n;i++)&#123; cin&gt;&gt;Node[i].first; Node[i].second=i; &#125; sort(Node+1,Node+1+n); //对高度排序 for(int i=1;i&lt;n;i++)&#123; add(i+1,i,-1); //第二个约束方程 if(Node[i].second&lt;Node[i+1].second) //第一个约束方程 add(Node[i].second,Node[i+1].second,D) ; else add(Node[i+1].second,Node[i].second,D) ; &#125; printf("Case %d: ",Case); if(spfa(min(Node[1].second,Node[n].second))) printf("-1\n"); //负环无解 else printf("%d\n",Dis[max(Node[1].second,Node[n].second)]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>差分约束</tag>
        <tag>最短路</tag>
        <tag>SPFA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Layout（差分约束+链式向前星）]]></title>
    <url>%2FLayout%2F</url>
    <content type="text"><![CDATA[描述传送门：poj-3169 &emsp;Like everyone else, cows like to stand close to their friends when queuing for feed. FJ has $N (2\ &lt;=\ N &lt;=\ 1,000)$ cows numbered 1..N standing along a straight line waiting for feed. The cows are standing in the same order as they are numbered, and since they can be rather pushy, it is possible that two or more cows can line up at exactly the same location (that is, if we think of each cow as being located at some coordinate on a number line, then it is possible for two or more cows to share the same coordinate). Some cows like each other and want to be within a certain distance of each other in line. Some really dislike each other and want to be separated by at least a certain distance. A list of $ML\ (1\ &lt;= ML\ &lt;=\ 10,000)$ constraints describes which cows like each other and the maximum distance by which they may be separated; a subsequent list of MD constraints $(1\ &lt; MD\ &lt;=\ 10,000)$ tells which cows dislike each other and the minimum distance by which they must be separated. Your job is to compute, if possible, the maximum possible distance between cow 1 and cow $N$ that satisfies the distance constraints. Input Line 1: Three space-separated integers: N, ML, and MD. Lines 2..ML+1: Each line contains three space-separated positive integers: A, B, and D, with $1\ &lt;=\ A\ &lt;\ B\ &lt;= N$. Cows A and B must be at most $D (1\ &lt;=\ D &lt;=\ 1,000,000)$ apart. Lines ML+2..ML+MD+1: Each line contains three space-separated positive integers: A, B, and D, with $1\ &lt;=\ A\ &lt;\ B\ &lt;= N$. Cows A and B must be at least $D (1\ &lt;=\ D\ &lt;=\ 1,000,000)$ apart. Output Line 1: A single integer. If no line-up is possible, output -1. If cows 1 and $N$ can be arbitrarily far apart, output -2. Otherwise output the greatest possible distance between cows 1 and $N$. Examples intput 12344 2 11 3 102 4 202 3 3 output 127 思路 差分约束模板题，a喜欢b,就连一条长为c的边，a不喜欢b就连一条长为-c的边。 用SPFA跑一个最短路。很容易想到，有负环即无解，没有对n点更新即随便放（即没有约束条件），其他情况输出最短路就行了。 链式向前星存图。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465//#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;queue&gt;#include&lt;stdio.h&gt;#include&lt;string.h&gt;#define CRL(a,x) memset(a,x,sizeof(a))#define INF 0xfffffffusing namespace std;const int N=1e3+5;struct node&#123;int To,S,Next;&#125;;vector&lt;node&gt; Edge;int Begin[N],Vis[N],Dis[N],Inque[N],n;void add(int x,int y,int z)&#123; node tem; tem.To=y; tem.S=z; tem.Next=Begin[x]; Begin[x]=Edge.size(); Edge.push_back(tem);&#125;void Spfa(int s)&#123; queue &lt;int&gt; Q; Inque[s]=1;Dis[s]=0; Q.push(s); while(!Q.empty())&#123; int T=Q.front();Q.pop();Inque[T]=0; for(int i=Begin[T];i!=-1;i=Edge[i].Next)&#123; if(Dis[Edge[i].To]&gt;Dis[T]+Edge[i].S)&#123; Dis[Edge[i].To]=Dis[T]+Edge[i].S; if(!Inque[Edge[i].To])&#123; Inque[Edge[i].To]=1; Q.push(Edge[i].To); if(++Vis[Edge[i].To]&gt;n)&#123; puts("-1"); return ; &#125; &#125; &#125; &#125; &#125; if(Dis[n]!=INF) printf("%d\n",Dis[n]); else puts("-2");&#125;int main()&#123; int ML,MD,a,b,d; while(~scanf("%d%d%d",&amp;n,&amp;ML,&amp;MD))&#123; Edge.clear();CRL(Begin,-1);CRL(Vis,0);CRL(Inque,0); for(int i=0;i&lt;=n;i++) Dis[i]=INF; while(ML--)&#123; scanf("%d%d%d",&amp;a,&amp;b,&amp;d); add(a,b,d); &#125; while(MD--)&#123; scanf("%d%d%d",&amp;a,&amp;b,&amp;d); add(b,a,-d); &#125; Spfa(1); &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>差分约束</tag>
        <tag>最短路</tag>
        <tag>spfa</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Is the Information Reliable?（差分约束+链式向前星）]]></title>
    <url>%2FIs-the-Information-Reliable%2F</url>
    <content type="text"><![CDATA[描述传送门：poj-2983 &emsp;The galaxy war between the Empire Draco and the Commonwealth of Zibu broke out 3 years ago. Draco established a line of defense called Grot. Grot is a straight line with N defense stations. Because of the cooperation of the stations, Zibu’s Marine Glory cannot march any further but stay outside the line. A mystery Information Group X benefits form selling information to both sides of the war. Today you the administrator of Zibu’s Intelligence Department got a piece of information about Grot’s defense stations’ arrangement from Information Group X. Your task is to determine whether the information is reliable. The information consists of M tips. Each tip is either precise or vague. Precise tip is in the form of P A B X, means defense station A is X light-years north of defense station B. Vague tip is in the form of V A B, means defense station A is in the north of defense station B, at least 1 light-year, but the precise distance is unknown. Input There are several test cases in the input. Each test case starts with two integers $N (0 &lt; N ≤ 1000)$ and $M (1 ≤ M ≤ 100000)$.The next $M$ line each describe a tip, either in precise form or vague form. Output Output one line for each test case in the input. Output “Reliable” if It is possible to arrange $N$ defense stations satisfying all the $M$ tips, otherwise output “Unreliable”. Examples intput 12345678910113 4P 1 2 1P 2 3 1V 1 3P 1 3 15 5V 1 2V 2 3V 3 4V 4 5V 3 5 output 12UnreliableReliable 思路 $V\ A\ B$ 的情况很容易想到$Dis[A]-Dis[B]&gt;=1 \Longrightarrow Dis[B]-Dis[A]&lt;=-1 $ 这符合了差分约束的形式，但重点是如何处理P A B X。 $P\ A\ B\ X$的时候，将$Dis[A]-Dis[B]=x$写成$\Longrightarrow Dis[A]-Dis[B]&lt;=x,Dis[A]-Dis[B]&gt;=x $$\Longrightarrow Dis[A]-Dis[B]&lt;=x,Dis[B]-Dis[A]&lt;=-x $,这样一张图就构造出来了。注意理清楚这个关系，不然太容易写错。 最后跑一个SPFA看看有没有负环，有就消息不可信。 链式向前星存图。 在关闭流同步的情况下，cin输入比scanf输入慢了六倍多。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980//#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;queue&gt;#include&lt;stdio.h&gt;#include&lt;string.h&gt;#define CRL(a,x) memset(a,x,sizeof(a))using namespace std;const int N=1e5+5;int Begin[N],Dis[N],n;bool Inque[N];struct node&#123;int To,S,Next;&#125;; //链式向前星节点vector &lt;node&gt; Edge;void add(int x,int y,int z)&#123; node tem; tem.To=y; tem.S=z; tem.Next=Begin[x]; Begin[x]=Edge.size(); Edge.push_back(tem);&#125;/* BFS版 */bool Spfa(int s)&#123; int Vis[N]=&#123;1&#125;; queue&lt;int&gt; Q;Q.push(s); while(!Q.empty())&#123; int tem=Q.front();Q.pop();Inque[tem]=0; //队首元素进行松弛 for(int i=Begin[tem];i!=-1;i=Edge[i].Next)&#123; if(Dis[Edge[i].To]&gt;Dis[tem]+Edge[i].S)&#123; Dis[Edge[i].To]=Dis[tem]+Edge[i].S; if(!Inque[Edge[i].To])&#123; Inque[Edge[i].To]=1; Q.push(Edge[i].To); if(++Vis[Edge[i].To]&gt;n) return true; //一个节点入队n次就证明有负环。 &#125; &#125; &#125; &#125; return false;&#125;int main()&#123; int m,a,b,s;char p; while(~scanf("%d%d",&amp;n,&amp;m))&#123; Edge.clear(); CRL(Begin,-1);CRL(Dis,0xf);CRL(Inque,0); while(m--)&#123; getchar(); p=getchar(); if(p=='P')&#123; scanf("%d%d%d",&amp;a,&amp;b,&amp;s); add(a,b,-s); //一开始这里写成了s，wa++; add(b,a,s); &#125;else&#123; scanf("%d%d",&amp;a,&amp;b); add(a,b,-1); //一开始这里写成了1，再wa++; &#125; &#125; for(int i=1;i&lt;=n;i++) add(0,i,0); Dis[0]=0; //加入超级源点 puts(Spfa(0)? "Unreliable":"Reliable"); &#125; return 0;&#125;/* //DFS版bool Spfa(int s)&#123; for(int i=Begin[s];i!=-1;i=Edge[i].Next)&#123; if(Dis[Edge[i].To]&gt;Dis[s]+Edge[i].S)&#123; Dis[Edge[i].To]=Dis[s]+Edge[i].S; if(Inque[Edge[i].To]) return true; Inque[Edge[i].To]=true; if(Spfa(Edge[i].To)) return true; Inque[Edge[i].To]=false; &#125; &#125; return false;&#125;*/]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>差分约束</tag>
        <tag>最短路</tag>
        <tag>spfa</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[序列（差分约束+链式向前星）]]></title>
    <url>%2F%E5%BA%8F%E5%88%97%2F</url>
    <content type="text"><![CDATA[描述传送门：洛谷-p1645 &emsp;有一个整数序列，它的每个数各不相同，我们不知道它的长度是多少（即整数个数），但我们知道在某些区间中间至少有多少个整数，用区间（Li,Ri,Ci）来描述，表示这个整数序列中至少有Ci个数来自区间[Li,Ri]，给出若干个这样的区间，问这个整数序列的长度最少能为多少？ Input 第一行一个整数$N$，表示区间个数；接下来$N$行，每行三个整数$（L_i,R_i,C_i）$，描述一个区间。 【数据规模】$N&lt;=1000,\ \ \ 0&lt;=L_i&lt;=R_i&lt;=1000,\ \ \ 1&lt;=C_i&lt;=R_i-L_i+1$ Output 仅一个数，表示该整数序列的最小长度。 Examples intput 1234544 5 16 10 37 10 35 6 1 output 14 思路 这是一道裸的差分约束，对于给的每个区间：$[L,R]$中至少有$c$个,连一条长为c的边从节点L-1指向节点R。为了能从0走到最大的节点，我们连一条长为0的边从节点i-1指向i.连一条长为-1的边从节点i指向i-1，这样图就建好了，最后用SPFA跑一个最长路。 由于是跑最长路，所以这些负权的环不会造成死循环。 用链式向前星存边，邻接矩阵可能要爆内存。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))int Begin[5005],N,n,Dis[1005],Vis[1005]=&#123;0&#125;;//注意边的数量struct node&#123;int To,S,Next;&#125;;vector&lt;node&gt; Edge;void add(int x,int y,int z)&#123; node tem; tem.To=y; tem.Next=Begin[x]; tem.S=z; Begin[x]=Edge.size(); Edge.push_back(tem);&#125;/*void Spfa(int s)&#123; //dfs版 for(int i=Begin[s];i;i=Edge[i].Next)&#123; if(Dis[Edge[i].To]&lt;Dis[s]+Edge[i].S)&#123; Dis[Edge[i].To]=Dis[s]+Edge[i].S; Spfa(Edge[i].To); &#125; &#125;&#125;*/void Spfa(int s)&#123; //bfs版 queue&lt;int&gt; Q; memset(Dis,-63,sizeof Dis);Dis[s]=0; Q.push(s);//Vis[s]=1; while(!Q.empty())&#123; int tem=Q.front();Q.pop();//Vis[tem]=0; for(int i=Begin[tem];i;i=Edge[i].Next)&#123; if(Dis[Edge[i].To]&lt;Dis[tem]+Edge[i].S)&#123; Dis[Edge[i].To]=Dis[tem]+Edge[i].S; Q.push(Edge[i].To); &#125; &#125; &#125;&#125;int main()&#123; int a,b,s; cin&gt;&gt;N;node tem;Edge.push_back(tem); //防止出现编号为0的边 while(N--)&#123; cin&gt;&gt;a&gt;&gt;b&gt;&gt;s; add(a-1,b,s); //连一条长为s的边从节点a-1指向节点b n=max(n,b); &#125; for(int i=1;i&lt;=n;i++)&#123; add(i-1,i,0); //连一条长为0的边从节点i-1指向i add(i,i-1,-1); //连一条长为-1的边从节点i指向i-1 &#125; //memset(Dis,-63,sizeof Dis);Dis[0]=0; dfs的初始化 Spfa(0); cout&lt;&lt;Dis[n]&lt;&lt;endl; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>差分约束</tag>
        <tag>最短路</tag>
        <tag>SPFA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[畅通工程续（SPFA+链式前向星）]]></title>
    <url>%2F%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B%E7%BB%AD%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-1874 &emsp;某省自从实行了很多年的畅通工程计划后，终于修建了很多路。不过路多了也不好，每次要从一个城镇到另一个城镇时，都有许多种道路方案可以选择，而某些方案要比另一些方案行走的距离要短很多。这让行人很困扰。现在，已知起点和终点，请你计算出要从起点到终点，最短需要行走多少距离。 Input 本题目包含多组数据，请处理到文件结束。每组数据第一行包含两个正整数N和M(0&lt;N&lt;200,0&lt;M&lt;1000)，分别代表现有城镇的数目和已修建的道路的数目。城镇分别以0～N-1编号。接下来是M行道路信息。每一行有三个整数A,B,X(0&lt;=A,B&lt;N,A!=B,0&lt;X&lt;10000),表示城镇A和城镇B之间有一条长度为X的双向道路。再接下一行有两个整数S,T(0&lt;=S,T&lt;N)，分别代表起点和终点。 Output 对于每组数据，请在一行里输出最短需要行走的距离。如果不存在从S到T的路线，就输出-1. Examples intput 123456783 30 1 10 2 31 2 10 23 10 1 11 2 output 122-1 思路 本来是可以用Dijkstra的，但是想学学SPFA，就用它写了。 用邻接矩阵存图太占空间了，所以采用 链式向前星 存图，这样也缩短了找边的时间。 有bfs，dfs两种写法，本文采用dfs，详见代码。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include &lt;bits/stdc++.h&gt;using namespace std;#define CRL(a,x) memset(a,x,sizeof(a))int Dis[205],N,M,Begin[205];struct node&#123; //链式向前星节点 int Next,To,S;&#125;;vector&lt;node&gt; Edge;void add(int x,int y,int z)&#123; node tem; tem.To=y; tem.Next=Begin[x]; Begin[x]=Edge.size(); tem.S=z; Edge.push_back(tem);&#125;void Spfa(int s)&#123; for(int i=Begin[s];i;i=Edge[i].Next)&#123; if(Dis[Edge[i].To]&gt;Dis[s]+Edge[i].S)&#123; //三角不等式：即在三角形中两边之和大于第三边，不满足我们就修改 Dis[Edge[i].To]=Dis[s]+Edge[i].S; Spfa(Edge[i].To); &#125; &#125;&#125;int main()&#123; int a,b,x,s,e; while(cin&gt;&gt;N&gt;&gt;M)&#123; Edge.clear(); node tem; Edge.push_back(tem); //不能有下标为0的边，就随便用一个来代替一下下标为0的 CRL(Dis,0xf); CRL(Begin,0); //初始化 for(int i=0;i&lt;M;i++)&#123; cin&gt;&gt;a&gt;&gt;b&gt;&gt;x; add(a,b,x); add(b,a,x); //加边 &#125; cin&gt;&gt;s&gt;&gt;e; Dis[s]=0; Spfa(s); cout&lt;&lt;(Dis[e]==0xf0f0f0f? -1:Dis[e])&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>最短路</tag>
        <tag>SPFA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Color the ball（差分入门）]]></title>
    <url>%2FColor-the-ball%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-1556 &emsp;N个气球排成一排，从左到右依次编号为1,2,3….N.每次给定2个整数a b(a &lt;= b),lele便为骑上他的“小飞鸽”牌电动车从气球a开始到气球b依次给每个气球涂一次颜色。但是N次以后lele已经忘记了第I个气球已经涂过几次颜色了，你能帮他算出每个气球被涂过几次颜色吗？ Input 每个测试实例第一行为一个整数N,(N &lt;= 100000).接下来的N行，每行包括2个整数a b(1 &lt;= a &lt;= b &lt;= N)。当N = 0，输入结束。 Output 每个测试实例输出一行，包括N个整数，第I个数代表第I个气球总共被涂色的次数 Examples intput 12345678931 12 23 331 11 21 30 output 121 1 13 2 1 思路 这道题可以用区间线段树做，但差分的代码更短。 当输入的区间为[a,b]时，让Sum[a]++，表示a以后的都+1，再让Sum[b]—，表示b以后的都-1,相当于是线段树里面的Lazy标记,最后求一下前缀和就行了。 代码1234567891011121314151617181920212223242526#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))const int N=1e5+5;int main()&#123; std::ios::sync_with_stdio(false); int n,a,b,Sum[N]; while(cin&gt;&gt;n&amp;&amp;n)&#123; CRL(Sum); for(int i=0;i&lt;n;i++)&#123; cin&gt;&gt;a&gt;&gt;b; Sum[a]++; //差分 Sum[b+1]--; &#125; cout&lt;&lt;Sum[1]; for(int i=2;i&lt;=n;i++) &#123; //前缀和 Sum[i]+=Sum[i-1]; cout&lt;&lt;" "&lt;&lt;Sum[i]; &#125; cout&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>差分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[swust oj 数据结构后40]]></title>
    <url>%2Fswustoj-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%90%8E40%2F</url>
    <content type="text"><![CDATA[博主码风太丑，勿喷。 比较简单的我就没写思路，只贴了代码。 hint: &lt;bits/stdc++.h&gt; 是万能头文件，大多oj和编译器都能用，这样就不用写这么多头文件了。 有错误请指出，thanks。 [960] 双向链表的操作问题思路题目描述代码实现 传送门 描述 建立一个长度为n的带头结点的双向链表，使得该链表中的数据元素递增有序排列。（必须使用双向链表完成，数据类型为整型。） 输入第一行：双向表的长度；第二行：链表中的数据元素。 输出 输出双向链表中的数据元素的值。 样例输入12102 4 6 3 5 8 10 21 12 9 样例输出12 3 4 5 6 8 9 10 12 21 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))typedef struct node &#123; int data; node *pre; node *next;&#125; DLinkNode;void Create (DLinkNode *&amp;Head,int n)&#123; int x; DLinkNode *p1,*p2; p1=(DLinkNode *)malloc(sizeof(DLinkNode)); Head=p2=p1; Head-&gt;pre=NULL; Head-&gt;next=NULL; while(n--) &#123; cin&gt;&gt;x;p1=Head; while(p1-&gt;next!=NULL&amp;&amp;p1-&gt;next-&gt;data&lt;=x) p1=p1-&gt;next; p2=(DLinkNode *)malloc(sizeof(DLinkNode)); p2-&gt;data=x; p2-&gt;pre=p1; p2-&gt;next=p1-&gt;next; if(p1-&gt;next!=NULL) p1-&gt;next-&gt;pre=p2; p1-&gt;next=p2; &#125;&#125;void Put(DLinkNode *Head)&#123; DLinkNode *p1=Head-&gt;next; while(p1!=NULL) &#123; cout&lt;&lt;p1-&gt;data&lt;&lt;" "; p1=p1-&gt;next; &#125;&#125;int main()&#123; DLinkNode *Head; int len; cin&gt;&gt;len; Create(Head,len); Put(Head); return 0;&#125; [980] 输出利用先序遍历创建的二叉树的层次遍历序列思路题目描述代码实现队列写bfs。 传送门 描述 利用先序递归遍历算法创建二叉树并输出该二叉树的层次遍历序列。先序递归遍历建立二叉树的方法为：按照先序递归遍历的思想将对二叉树结点的抽象访问具体化为根据接收的数据决定是否产生该结点从而实现创建该二叉树的二叉链表存储结构。约定二叉树结点数据为单个大写英文字符。当接收的数据是字符”#”时表示该结点不需要创建，否则创建该结点。最后再输出创建完成的二叉树的层次遍历序列。需要注意输入数据序列中的”#”字符和非”#”字符的序列及个数关系，这会最终决定创建的二叉树的形态。 输入输入为接受键盘输入的由大写英文字符和”#”字符构成的一个字符串（用于创建对应的二叉树）。 输出 每个用例用一行出该用例对应的二叉树的层次遍历序列。 样例输入12345A##ABC####AB##C##ABCD###EF##G##H##A##B## 样例输出12345AABCABCABHCEDFGA 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define NewNode (TreeNode *) malloc (sizeof(TreeNode))typedef struct node&#123; char data; node *Lchild,*Rchild;&#125; TreeNode;queue &lt;node *&gt; q;TreeNode * Built()&#123; TreeNode *T; char ch; cin&gt;&gt;ch; if(ch=='#') T=NULL; else &#123; T=NewNode; T-&gt;data=ch; T-&gt;Lchild=Built(); T-&gt;Rchild=Built(); &#125; return T;&#125;void Put(TreeNode *Tem)&#123; q.push(Tem); while(!q.empty()) &#123; cout&lt;&lt;q.front()-&gt;data; if(q.front()-&gt;Lchild!=NULL) q.push(q.front()-&gt;Lchild); if(q.front()-&gt;Rchild!=NULL) q.push(q.front()-&gt;Rchild); q.pop(); &#125; &#125;int main()&#123; TreeNode *Root; Root=Built(); Put(Root); return 0;&#125; [981] 统计利用二叉树存储的森林中树的棵数思路题目描述代码实现找根节点的右儿子，再找右儿子的右儿子，直到没有右儿子为止，这些右儿子的总数就是棵数。 传送门 描述 普通树及其构成的森林均可转换成相应的二叉树，反之亦然。故而可以根据相应的转换方法去统计某一二叉树对应的森林中树的棵数。相应的二叉树可利用先序递归遍历算法创建。先序递归遍历建立二叉树的方法为：按照先序递归遍历的思想将对二叉树结点的抽象访问具体化为根据接收的数据决定是否产生该结点从而实现创建该二叉树的二叉链表存储结构。约定二叉树结点数据为单个大写英文字符。当接收的数据是字符”#”时表示该结点不需要创建，否则创建该结点。最后再统计该二叉树对应的森林中树的棵数。需要注意输入数据序列中的”#”字符和非”#”字符的序列及个数关系，这会最终决定创建的二叉树的形态（序列里面允许无效字符但需要正确处理）。 输入输入为接受键盘输入的由大写英文字符和”#”字符构成的一个字符串（用于创建对应的二叉树）。 输出 输出该用例对应的二叉树表示的森林中树的棵数。 样例输入12345A#B#CD###ABC####AB##C##ABCD###EF##G##H##A##B## 样例输出1234531221 1234567891011121314151617181920212223242526272829303132333435363738#include &lt;bits/stdc++.h&gt;#define NewNode (node*)malloc(sizeof(node))using namespace std;struct node&#123; char data; node *Lchild; node *Rchild;&#125;;node * Built()&#123; node *T; char ch=getchar(); if(ch=='#') T=NULL; else &#123; T=NewNode; T-&gt;data=ch; T-&gt;Lchild=Built(); T-&gt;Rchild=Built(); &#125; return T;&#125;int Count(node *&amp;root)&#123; return root-&gt;Rchild==NULL? 1:1+Count(root-&gt;Rchild);&#125;int main()&#123; node *root=Built(); cout&lt;&lt;Count(root); return 0;&#125; [982] 输出利用二叉树存储的普通树的度思路题目描述代码实现 传送门 描述 普通树可转换成相应的二叉树（该二叉树的根结点一定缺少右儿子），反之亦然。故而可以根据相应的转换方法去统计某一二叉树对应的普通树的度。普通树的度为其结点儿子数的最大值。相应的二叉树可利用二叉树的先序递归遍历算法创建。先序递归遍历建立二叉树的方法为：按照先序递归遍历的思想将对二叉树结点的抽象访问具体化为根据接收的数据决定是否产生该结点从而实现创建该二叉树的二叉链表存储结构。约定二叉树结点数据为单个大写英文字符。当接收的数据是字符”#”时表示该结点不需要创建，否则创建该结点。最后再统计该二叉树对应的森林中树的棵数。需要注意输入数据序列中的”#”字符的序列及个数关系，这会最终决定创建的二叉树的形态（序列里面允许无效字符但需要正确处理）。 输入输入为接受键盘输入的由大写英文字符和”#”字符构成的一个字符串（用于创建对应的二叉树）。 输出 若表示的二叉树对应普通树，则该普通树的度；否则输出ERROR。 样例输入12345AB#CD##E###ABC####AB##C##ABCD###EF##G###A##B## 样例输出1234531ERROR31 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;bits/stdc++.h&gt;#define NewNode (node*)malloc(sizeof(node))using namespace std;int ans=0;struct node&#123; char data; node *Lchild; node *Rchild;&#125;;node * Built()&#123; node *T; char ch=getchar(); if(ch=='#') T=NULL; else &#123; T=NewNode; T-&gt;data=ch; T-&gt;Lchild=Built(); T-&gt;Rchild=Built(); &#125; return T;&#125;int Count(node *&amp;T)&#123; if(T==NULL) return 0; ans=max(ans,Count(T-&gt;Lchild)); ans=max(ans,Count(T-&gt;Rchild)+1) ; return ans;&#125;int main()&#123; node *root=Built(); if(root-&gt;Rchild!=NULL) cout&lt;&lt;"ERROR"; else cout&lt;&lt;Count(root); return 0;&#125; [983] 利用二叉树中序及后序遍历确定该二叉树的先序序列思路题目描述代码实现当前树的后续遍历的最后一个元素肯定是根节点。中序遍历中根节点右边是左子树，右边是右子树，递归处理。 传送门 描述 已知二叉树的中序和先序遍历可以唯一确定后序遍历、已知中序和后序遍历可以唯一确定先序遍历，但已知先序和后序，却不一定能唯一确定中序遍历。现要求根据输入的中序遍历结果及后序遍历结果，要求输出其先序遍历结果。 输入第一行为中序序列第二行为后续序列 输出 输出为遍历二叉树得到的先序序列 样例输入12BFDAEGCFDBGECA 样例输出1ABDFCEG 123456789101112131415161718192021222324#include&lt;bits/stdc++.h&gt;#define NewNode (node*)malloc(sizeof(node))using namespace std;char Zhong[1000],Hou[1000];void Ac(int Z,int H,int n)&#123; if(n&lt;=0) return; cout&lt;&lt;Hou[H+n-1]; int i=Z; while(Zhong[i]!=Hou[H+n-1]) i++; // Ac(Z,H,i-Z); Ac(i+1,H+i-Z,n+Z-i-1);&#125;int main()&#123; while(~scanf("%s%s",Zhong,Hou)) Ac(0,0,strlen(Zhong)); return 0;&#125; [984] 利用二叉树中序及先序遍历确定该二叉树的后序序列思路题目描述代码实现当前树的先续遍历的第一个元素肯定是根节点。中序遍历中根节点右边是左子树，右边是右子树，递归处理。 传送门 描述 已知二叉树的中序和先序遍历可以唯一确定后序遍历、已知中序和后序遍历可以唯一确定先序遍历，但已知先序和后序，却不一定能唯一确定中序遍历。现要求根据输入的中序遍历结果及先序遍历结果，要求输出其后序遍历结果。 输入输入数据占2行，其中第一行表示中序遍历结果，第二行为先序遍历结果。 输出 对测试数据，输出后序遍历结果。 样例输入12BFDAEGCABDFCEG 样例输出1FDBGECA 123456789101112131415161718192021222324#include&lt;bits/stdc++.h&gt;#define NewNode (node*)malloc(sizeof(node))using namespace std;char Zhong[1000],Xian[1000];void Ac(int Z,int X,int n)&#123; if(n&lt;=0) return; int i=Z; while(Zhong[i]!=Xian[X]) i++; Ac(Z,X+1,i-Z); Ac(i+1,X+i-Z+1,n+Z-i-1); cout&lt;&lt;Xian[X];&#125;int main()&#123; while(~scanf("%s%s",Zhong,Xian)) Ac(0,0,strlen(Zhong)); return 0;&#125; [986] 哈夫曼译码思路题目描述用题目代码实现重写代码实现 传送门 描述 通常要求根据给定的编码本对密文进行解码。现已给定相应字符的哈夫曼编码，要求根据编码对密文进行解码。（建立哈夫曼树以及编码、主函数等都已经给出，你只需要填写译码函数void ccode(haffnode hafftree[],int n)即可。 输入根据哈夫曼树编码表，针对字符串做好的编码结果。 输出 对每一行需要解码的串，进行解码，并输出解码后的结果。 样例输入1000100011011101110 样例输出1aabcc 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136const int maxvalue=100;const int maxbit=100;const int maxn=100;#include "iostream"#include "stdio.h"#include "stdlib.h"#include "string.h" using namespace std;struct haffnode&#123; char ch; int weight; int flag; int parent; int leftchild; int rightchild;&#125;;struct code&#123; int bit[maxn]; int start; int weight; char ch;&#125;;void haffman(int weight[],char text[],int n,haffnode hafftree[])&#123; int j,m1,m2,x1,x2,i; for(i=0; i&lt; 2*n-1; i++) &#123; if(i &lt; n) &#123; hafftree[i].weight=weight[i]; hafftree[i]. ch=text[i]; &#125; else &#123; hafftree[i].weight=0; hafftree[i].ch='#'; &#125; hafftree[i].parent=0; hafftree[i].flag=0; hafftree[i].leftchild=-1; hafftree[i].rightchild=-1; &#125; for(i=0; i&lt; n-1; i++) &#123; m1=m2=maxvalue; x1=x2=0; for(j=0; j&lt; n+i; j++) &#123; if(hafftree[j].weight&lt; m1&amp;&amp;hafftree[j].flag==0) &#123; m2=m1; x2=x1; m1=hafftree[j].weight; x1=j; &#125; else if(hafftree[j].weight&lt; m2&amp;&amp;hafftree[j].flag==0) &#123; m2=hafftree[j].weight; x2=j; &#125; &#125; hafftree[x1].parent=n+i; hafftree[x2].parent=n+i; hafftree[x1].flag=1; hafftree[x2].flag=1; hafftree[n+i].weight=hafftree[x1].weight+hafftree[x2].weight; hafftree[n+i].leftchild=x1; hafftree[n+i].rightchild=x2; &#125;&#125;void haffmancode(haffnode hafftree[],int n,code haffcode[])&#123; code cd; int i,j; int child,parent; for( i=0; i&lt; n; i++) &#123; cd.start=n-1; cd.weight=hafftree[i].weight; cd.ch=hafftree[i].ch; child=i; parent=hafftree[child].parent; while(parent!=0) &#123; if(hafftree[parent].leftchild==child) cd.bit[cd.start]=0; else cd.bit[cd.start]=1; cd.start--; child=parent; parent=hafftree[child].parent; &#125; for(j=cd.start+1; j&lt; n; j++) haffcode[i].bit[j]=cd.bit[j]; haffcode[i].start=cd.start; haffcode[i].weight=cd.weight; haffcode[i].ch=cd.ch; &#125;&#125;void ccode(haffnode hafftree[],int n)&#123; int i,j=0,m=2*n-1; char b[maxn]; memset(b,'\0',sizeof(b)); i=m-1; scanf("%s",b); while(b[j]!='\0') &#123; if(b[j]=='0') i=hafftree[i].leftchild; else i=hafftree[i].rightchild; if(hafftree[i].leftchild==-1) &#123; printf("%c",hafftree[i].ch); i=m-1; &#125; j++; &#125;&#125;int main( )&#123; int n=8; int weight[]= &#123;5,29,7,8,14,23,3,11&#125;; char text[]= &#123;'a','b','c','d','e','f','g','h'&#125;; haffnode myhafftree[maxvalue]; code myhaffcode[maxvalue]; haffman(weight,text,n,myhafftree); haffmancode(myhafftree,n,myhaffcode); ccode(myhafftree,n); return 0;&#125; 1 [987] 输出用先序遍历创建的二叉树是否为完全二叉树的判定结果思路题目描述代码实现完全二叉树是依次排列的，我们按层次遍历，找到第一个空节点，如果之前等于总结点，就是，否则不是。 传送门 描述 利用先序递归遍历算法创建二叉树并判断该二叉树是否为完全二叉树。完全二叉树只能是同深度的满二叉树缺少最后一层倒数连续个叶子结点。先序递归遍历建立二叉树的方法为：按照先序递归遍历的思想将对二叉树结点的抽象访问具体化为根据接收的数据决定是否产生该结点从而实现创建该二叉树的二叉链表存储结构。约定二叉树结点数据为单个大写英文字符。当接收的数据是字符”#”时表示该结点不需要创建，否则创建该结点。最后判断创建完成的二叉树度是否为完全二叉树。需要注意输入数据序列中的”#”字符和非”#”字符的序列及个数关系，这会最终决定创建的二叉树的形态。 输入输入为接受键盘输入的由大写英文字符和”#”字符构成的一个字符串（用于创建对应的二叉树）。 输出 对应的二叉树是否为完全二叉树的判断结果。若是输出”Y”，否则输出”N”。 样例输入123456A##ABC####AB##C##ABCD###EF##G###A##B##ABC##D##EG### 样例输出123456YNYNYY 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include&lt;bits/stdc++.h&gt;using namespace std;int sum=0,Count=1;struct node&#123; char date; node *Lchild; node *Rchild;&#125;;node *Built()&#123; node *T; char tem=getchar(); if(tem=='#') return T=NULL; sum++; T=new node; T-&gt;Lchild=Built(); T-&gt;Rchild=Built(); return T;&#125;queue &lt;node *&gt; Q;void Judge()&#123; while(!Q.empty()) &#123; node *tem=Q.front(); if(tem-&gt;Lchild==NULL) return; Count++; Q.push(tem-&gt;Lchild); if(tem-&gt;Rchild==NULL) return; Count++; Q.push(tem-&gt;Rchild); Q.pop(); &#125;&#125;int main()&#123; node *root=Built(); Q.push(root); Judge(); cout&lt;&lt;(sum==Count? 'Y':'N'); return 0;&#125; [1010] 折半查找的实现思路题目描述代码实现二分。 传送门 描述 编写程序实现折半查找算法。 输入第一行是查找表的长度n第二行是查找表中的数据元素 ；第三行是要查找的数据元素的关键字. 输出 查找成功返回位序，不成功返回-1 ,第二行为比较的次数。 样例输入123115 13 19 21 37 56 64 75 80 88 92100 样例输出12-14 12345678910111213141516171819202122#include&lt;bits/stdc++.h&gt;using namespace std;int Search(int x,int l,int r,int a[],int &amp;times)&#123; times++; int mid=l+r&gt;&gt;1; if(x==a[mid]) return mid; if(l==r) return -1; return x&lt;a[mid]? Search(x,l,mid,a,times):Search(x,mid+1,r,a,times);&#125;int main()&#123; int a[1000],x,times=0,n; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) cin&gt;&gt;a[i]; cin&gt;&gt;x; cout&lt;&lt;Search(x,0,n-1,a,times)&lt;&lt;endl;cout&lt;&lt;times; return 0;&#125; [1011] 二叉排序树的实现和查找思路题目描述代码实现博主懒了，sort+二分 传送门 描述 按照给定的关键字集合，建立二叉排序树。在建立的二叉排序树上查找指定的关键字，查找成功，输出找到该关键字比较的次数；查找不成功，输出-1. 输入关键字个数n；关键字集合；要查找的关键字； 输出 查找成功输出比较的次数，否则输出-1。 样例输入1231225 18 46 2 53 39 32 4 74 67 60 1174 样例输出14 12345678910111213141516171819202122#include&lt;bits/stdc++.h&gt;using namespace std;int Search(int x,int l,int r,int a[],int times) //二分查找&#123; int mid=l+r&gt;&gt;1; if(x==a[mid]) return times; //找到了，返回下标 if(l==r) return -1; //没找到返回-1 return x&lt;a[mid]? Search(x,l,mid,a,times+1):Search(x,mid+1,r,a,times+1); //比中间小在左边找，否则在右边找。&#125;int main()&#123; int a[1000],x,n; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) cin&gt;&gt;a[i]; cin&gt;&gt;x;sort(a,a+n); cout&lt;&lt;Search(x,0,n-1,a,1); return 0;&#125; [1012] 哈希表（链地址法处理冲突）思路题目描述代码实现往后放就行了。 传送门 描述 采用除留余数法（H（key）=key %n）建立长度为n的哈希表，处理冲突用链地址法。建立链表的时候采用尾插法。 输入 第一行为哈西表的长度m；第二行为关键字的个数n；第三行为关键字集合；第四行为要查找的数据。 输出 如果查找成功，输出该关键字所在哈希表中的地址和比较次数；如果查找不成功，输出-1。 样例输入1234131316 74 60 43 54 90 46 31 29 88 77 78 7916 样例输出13,1 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include&lt;bits/stdc++.h&gt;using namespace std;struct Hnode&#123; int data; Hnode *next;&#125;*Rear[1000];struct Hash&#123; Hnode *Head[1000]; int len,n;&#125;L;void Insert(int x)&#123; Hnode *tem= new Hnode; tem-&gt;data=x; tem-&gt;next=NULL; int ads=x%L.len; if(L.Head[ads]) //已经有了就往后放 Rear[ads]-&gt;next=tem; else L.Head[ads]=tem; Rear[ads]=tem; //更新尾节点地址&#125;int Search(int x)&#123; int ads=x%L.len,Count=1; Hnode *tem=L.Head[ads]; if(tem==NULL) return -1; while(tem!=NULL&amp;&amp;tem-&gt;data!=x) &#123; tem=tem-&gt;next; Count++; &#125; return tem==NULL? -1:Count;&#125;void Ac()&#123; int n,x; cin&gt;&gt;n; L.len=n; for(int i=0; i&lt;n; i++) L.Head[i]=Rear[i]=NULL; cin&gt;&gt;n; L.n=n; while(n--)&#123; cin&gt;&gt;x; Insert(x); &#125; cin&gt;&gt;x; int ans=Search(x); if(ans!=-1) cout&lt;&lt;x%L.len&lt;&lt;","; cout&lt;&lt;ans;&#125;int main()&#123; Ac(); return 0;&#125; [1013] 哈希表（开放定址法处理冲突）思路题目描述代码实现 传送门 描述 采用除留余数法（H（key）=key %n）建立长度为n的哈希表，处理冲突用开放定址法的线性探测。 输入 第一行为哈希表的长度n； 第二行为关键字的个数； 第三行为关键字集合； 第三行为要查找的数据。 输出 如果查找成功，输出关键字所哈希表中的地址和比较次数；如果查找不成功，输出-1。 样例输入1234131116 74 60 43 54 90 46 31 29 88 7716 样例输出13,1 1234567891011121314151617181920212223242526272829303132333435#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,-1,sizeof(a))int main()&#123; int a[105]; CRL(a); int n,m,num,k,cont=0; cin&gt;&gt;n&gt;&gt;m; for(int i=0; i&lt;m; i++) &#123; cin&gt;&gt;num; int t=num%n; while(a[t]!=-1) t=(t+1)%n; a[t]=num; &#125; cin&gt;&gt;k; int t=k%n; for(int i=0; i&lt;n; i++) &#123; cont++; if(a[t]==k) &#123; cout&lt;&lt;t&lt;&lt;","&lt;&lt;cont; return 0; &#125; else t=(t+1)%n; &#125; cout&lt;&lt;"-1"; return 0;&#125; [1014] 交换排序算法的设计与实现——冒泡排序思路题目描述代码实现祝愿大家都能抽到这题 传送门 描述 编程实现冒泡排序，按照非递减排序，测试数据为整数。 输入 第一行是待排序数据元素的个数；第二行是待排序的数据元素。 输出 第一行输出第一趟冒泡排序的结果。 样例输入121050 36 41 19 23 4 20 18 12 22 样例输出136 41 19 23 4 20 18 12 22 50 123456789101112131415#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int a[1000],n,tem; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) cin&gt;&gt;a[i]; for(int i=0;i&lt;n-1;i++) if(a[i]&gt;a[i+1]) swap(a[i],a[i+1]); for(int i=0;i&lt;n;i++) cout&lt;&lt;a[i]&lt;&lt;' '; return 0;&#125; [1015] 堆排序算法思路题目描述代码实现每次在双亲节点，左儿子，右儿子间选最小的与根节点交换即可。 传送门 描述 编写程序堆排序算法。按照从小到大的顺序进行排序，测试数据为整数。 输入 第一行是待排序数据元素的个数； 第二行是待排序的数据元素。（提示：用小根堆） 输出 一趟堆排序的结果。 样例输入121050 36 41 19 23 4 20 18 12 22 样例输出14 12 20 18 22 41 50 36 19 23 1234567891011121314151617181920212223242526272829303132#include&lt;bits/stdc++.h&gt;using namespace std;void sift(int R[],int low,int high)&#123; int i=low,j=i&lt;&lt;1,tem=R[i]; //i&lt;&lt;1==i*2,位运算快一点 while(j&lt;=high) &#123; if(j&lt;high&amp;&amp;R[j]&gt;R[j+1]) ++j; if(tem&gt;R[j])&#123; R[i]=R[j]; i=j; j=i&lt;&lt;1; &#125; &#125; R[i]=tem;&#125;int main()&#123; int R[1000],n; cin&gt;&gt;n; for(int i=1; i&lt;=n; ++i) cin&gt;&gt;R[i]; for(int i=n/2; i&gt;=1; --i) sift(R,i,n); //建堆 for(int i=1; i&lt;=n; ++i) cout&lt;&lt;R[i]&lt;&lt;" "; return 0;&#125; [1016] 插入排序算法实现思路题目描述代码实现一趟而已。。。骚起来。 传送门 描述 插入排序算法实现。 输入 第一行是待排序数据元素的个数；第二行是待排序的数据元素。 输出 一趟直接插入排序算法结果。 样例输入121050 36 41 19 23 4 20 18 12 22 样例输出136 50 41 19 23 4 20 18 12 22 1234567891011121314#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int R[1000],n; cin&gt;&gt;n; for(int i=0; i&lt;n; ++i) cin&gt;&gt;R[i]; if(R[1]&lt;R[0]) swap(R[0],R[1]); for(int i=0; i&lt;n; ++i) cout&lt;&lt;R[i]&lt;&lt;" "; return 0;&#125; [1051] 输出利用先序遍历创建的二叉树中的指定结点的孩子结点思路题目描述代码实现。。。 传送门 描述 利用先序递归遍历算法创建二叉树并输出该二叉树中指定结点的儿子结点。约定二叉树结点数据为单个大写英文字符。当接收的数据是字符”#”时表示该结点不需要创建，否则创建该结点。最后再输出创建完成的二叉树中的指定结点的儿子结点。注意输入数据序列中的”#”字符和非”#”字符的序列及个数关系，这会最终决定创建的二叉树的形态。 输入 输入用例分2行输入，第一行接受键盘输入的由大写英文字符和”#”字符构成的一个字符串（用于创建对应的二叉树），第二行为指定的结点数据。 输出 用一行输出该用例对应的二叉树中指定结点的儿子结点，格式为：L:,R:。若相应儿子不存在则以”#”。 样例输入1234A##AABC####B 样例输出1234A##AABC####B 123456789101112131415161718192021222324252627282930313233343536373839#include&lt;bits/stdc++.h&gt;using namespace std;struct node&#123; char data; node *Lchild,*Rchild;&#125;;node *Built()&#123; node *T; char tem=getchar(); if(tem=='#') return T=NULL; T=new node; T-&gt;data=tem; T-&gt;Lchild=Built(); T-&gt;Rchild=Built(); return T;&#125;void Ac(node *tem,char x)&#123; if(tem==NULL) return; if(tem-&gt;data==x) &#123; cout&lt;&lt;"L:"&lt;&lt;(tem-&gt;Lchild? tem-&gt;Lchild-&gt;data:'#'); //ÅÐ¶Ï×óÓÒ¶ù×ÓÊÇ·ñÎªULL cout&lt;&lt;",R:"&lt;&lt;(tem-&gt;Rchild? tem-&gt;Rchild-&gt;data:'#'); &#125; else&#123; Ac(tem-&gt;Lchild,x); Ac(tem-&gt;Rchild,x); &#125;&#125;int main()&#123; node *root=Built();char a,x; cin&gt;&gt;x; Ac(root,x); return 0;&#125; [1052] 输出利用先序遍历创建的二叉树中的指定结点的双亲结点思路题目描述代码实现每个节点保存双亲节点。 传送门 描述 利用先序递归遍历算法创建二叉树并输出该二叉树中指定结点的双亲结点。约定二叉树结点数据为单个大写英文字符。当接收的数据是字符“#”时表示该结点不需要创建，否则创建该结点。最后再输出创建完成的二叉树中的指定结点的双亲结点。注意输入数据序列中的“#”字符和非“#”字符的序列及个数关系，这会最终决定创建的二叉树的形态。 输入 输入用例分2行输入，第一行接受键盘输入的由大写英文字符和“#”字符构成的一个字符串（用于创建对应的二叉树），第二行为指定的结点数据。 输出 用一行输出该用例对应的二叉树中指定结点的双亲结点。若相应双亲结点不存在则以“#”代替。 样例输入1234A##AABC####B 样例输出12#A 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include&lt;bits/stdc++.h&gt;using namespace std;struct node&#123; char data; node *Lchild,*Rchild,*parents;&#125;;node *Built(node *&amp;R)&#123; node *T; char tem=getchar(); if(tem=='#') return T=NULL; T=new node; T-&gt;data=tem; T-&gt;parents=R; T-&gt;Lchild=Built(T); T-&gt;Rchild=Built(T); return T;&#125;void Ac(node *tem,char x)&#123; if(tem==NULL) return; if(tem-&gt;data==x) &#123; node *T=tem;int ans=0; while(T-&gt;Rchild!=NULL)&#123; ans++; T=T-&gt;Rchild; &#125; cout&lt;&lt;(tem-&gt;parents==NULL? ans:ans+1); &#125; else Ac(tem-&gt;Lchild,x); Ac(tem-&gt;Rchild,x);&#125;int main()&#123; node *root,*tem; root=Built(root); root-&gt;parents=NULL; char x; cin&gt;&gt;x; Ac(root,x); return 0;&#125; [1053] 输出利用先序遍历创建的二叉树中的指定结点的度思路题目描述代码实现 传送门 描述 利用先序递归遍历算法创建二叉树并输出该二叉树中指定结点的度。约定二叉树结点数据为单个大写英文字符。当接收的数据是字符“#”时表示该结点不需要创建，否则创建该结点。最后再输出创建完成的二叉树中的指定结点的度。注意输入数据序列中的字符“#”和非“#”字符的序列及个数关系，这会最终决定创建的二叉树的形态。 输入 输入用例分2行输入，第一行接受键盘输入的由大写英文字符和“#”字符构成的一个字符串（用于创建对应的二叉树），第二行为指定的结点数据。 输出 用一行输出该用例对应的二叉树中指定结点的度。 样例输入1234A##AABC####B 样例输出1201 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include&lt;bits/stdc++.h&gt;using namespace std;struct node&#123; char data; node *Lchild,*Rchild,*parents;&#125;;node *Built(node *&amp;R)&#123; node *T; char tem=getchar(); if(tem=='#') return T=NULL; T=new node; T-&gt;data=tem; T-&gt;parents=R; T-&gt;Lchild=Built(T-&gt;Lchild); T-&gt;Rchild=Built(T-&gt;Rchild); return T;&#125;int Ac(node *tem,char x)&#123; if(tem==NULL) return 0; if(tem-&gt;data==x) &#123; node *T=tem-&gt;Rchild;int ans=0; while(T!=NULL)&#123; ans++; T=T-&gt;Rchild; &#125; return tem-&gt;parents? ans+1:ans; &#125; else Ac(tem-&gt;Lchild,x); Ac(tem-&gt;Rchild,x);&#125;int main()&#123; node *root,*tem; root=Built(root); root-&gt;parents=NULL; char x; cin&gt;&gt;x; cout&lt;&lt;Ac(root,x); return 0;&#125; [1055] 邻接矩阵到邻接表思路题目描述代码实现 传送门 描述 假设无向图G采用邻接矩阵存储，编写一个算法输出邻接表。 输入 第一行为一个整数n，表示顶点的个数（顶点编号为0到n-1），接下来是为一个n*n大小的整数矩阵，表示图的邻接关系。数字为0表示不邻接，1表示邻接。 输出 输出图G的邻接表。第一行表示顶点0可直接到达的顶点编号。其他行定义相同。 样例输入12345650 1 0 1 11 0 1 1 00 1 0 1 11 1 1 0 11 0 1 1 0 样例输出123451340231340124023 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include&lt;bits/stdc++.h&gt;using namespace std;struct node&#123; int date; node *next;&#125;;node L[100],*rear[100];void Insert(node *&amp;t,int k)&#123; node *tem=new node; t-&gt;next=tem; tem-&gt;date=k; tem-&gt;next=NULL; t=tem;&#125;void Show(int n)&#123; node *p; for(int i=0; i&lt;n; i++) &#123; p=L[i].next; while(p!=NULL) &#123; cout&lt;&lt;p-&gt;date; p=p-&gt;next; &#125; cout&lt;&lt;endl; &#125;&#125;int main()&#123; int n,x; cin&gt;&gt;n; for(int i=0; i&lt;n; i++) &#123; L[i].date=i; L[i].next=NULL; rear[i]=&amp;L[i]; &#125; for(int i=0; i&lt;n; i++) for(int j=0; j&lt;n; j++) &#123; cin&gt;&gt;x; if(x) Insert(rear[i],j); &#125; Show(n); return 0;&#125; [1056] 邻接表到邻接矩阵思路题目描述代码实现注意读入数据的方法。 传送门 描述 假设无向图G采用邻接表存储，编写一个算法输出邻接矩阵。 输入 第一行为一个整数n，表示顶点的个数（顶点编号为0到n-1）。第二行表示顶点0可直接到达的顶点编号，其他行定义相同。 输出 输出图G的邻接矩阵。整数矩阵大小为n*n，表示图的邻接关系。数字为0表示不邻接，1表示邻接。 样例输入12345651 3 40 2 31 3 40 1 2 40 2 3 样例输出123450101110110010111110110110 12345678910111213141516171819202122#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int Map[100][100]=&#123;0&#125;,n,x;char t; cin&gt;&gt;n; for(int i=0;i&lt;n;++i) &#123; do&#123; scanf("%d%c",&amp;x,&amp;t); Map[i][x]=1; &#125;while(t==' '); &#125; for(int i=0;i&lt;n;++i)&#123; for(int j=0;j&lt;n;++j) printf("%d",Map[i][j]); printf("\n"); &#125; return 0;&#125; [1057] 有向图的出度计算思路题目描述代码实现头结点保存结点数。 传送门 描述 假设有向图G采用邻接表存储，设计算法求出图G中每个顶点的出度。 输入 第一行为图中顶点的个数n 第二行为图的边的条数e 第三行为依附于一条边的两个顶点的数据信息。 输出 图G中每个顶点的出度。第一行表示顶点0的出度，其他行定义相同。 样例输入12345678560 10 31 21 34 04 3 样例输出1234522002 12345678910111213141516171819202122232425262728293031323334353637#include&lt;bits/stdc++.h&gt;using namespace std;struct node &#123; int data; node *next;&#125;;node L[100],*Rear[100];void Insert(int a,int b)&#123; node *tem=new node; Rear[a]-&gt;next=tem; tem-&gt;data=b; tem-&gt;next=NULL; Rear[a]=tem; L[a].data++;&#125;int main()&#123; int n,edg,a,b; cin&gt;&gt;n&gt;&gt;edg; for(int i=0;i&lt;n;i++)&#123; L[i].data=0; //头结点保存结点数 L[i].next=NULL; Rear[i]=&amp;L[i]; &#125; while(edg--) &#123; cin&gt;&gt;a&gt;&gt;b; Insert(a,b); &#125; for(int i=0;i&lt;n;i++) cout&lt;&lt;L[i].data&lt;&lt;endl;//输出结点数 return 0;&#125; [1058] 无向图顶点度的计算思路题目描述代码实现 传送门 描述 假设无向图G采用邻接矩阵存储，设计算法求出图G中每个顶点的度。 输入 第一行为一个整数n，表示顶点的个数（顶点编号为0到n-1）。接下来是为一个n*n大小的整数矩阵，表示图的邻接关系。数字为0表示不邻接，1表示邻接。 输出 图G中每个顶点的度。第一行表示顶点0的度，其他行定义相同。 样例输入12345650 1 0 1 11 0 1 1 00 1 0 1 11 1 1 0 11 0 1 1 0 样例输出1234533343 12345678910111213141516#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int sum=0,n,x; cin&gt;&gt;n; for(int i=0;i&lt;n;i++)&#123; sum=0; for(int j=0;j&lt;n;j++)&#123; cin&gt;&gt;x; if(x) sum++; &#125; cout&lt;&lt;sum&lt;&lt;endl; &#125; return 0;&#125; [1058] 有向图的最大出度计算思路题目描述代码实现 传送门 描述 假设有向图G采用邻接表存储，求出图G中出度最大的顶点，并输出顶点的编号（有多个结果的都要输出）。（顶点的数据元素为整型数据。）。 输入 第一行为图中顶点的个数n； 第二行为图的边的条数e； 第三行为依附于一条边的两个顶点信息。邻接。 输出 图G中每个顶点的度。第一行表示顶点0的度，其他行定义相同。 样例输入12345650 1 0 1 11 0 1 1 00 1 0 1 11 1 1 0 11 0 1 1 0 样例输出1234533343 123456789101112131415161718192021222324252627282930313233343536373839404142#include&lt;bits/stdc++.h&gt;using namespace std;struct node &#123; int data; node *next;&#125;;node L[100],*Rear[100];void Insert(int a,int b)&#123; node *tem=new node; Rear[a]-&gt;next=tem; tem-&gt;data=b; tem-&gt;next=NULL; Rear[a]=tem; L[a].data++;&#125;int main()&#123; int n,edg,a,b,Max=0,Mi=0; cin&gt;&gt;n&gt;&gt;edg; for(int i=0;i&lt;n;i++)&#123; L[i].data=0; //头结点保存结点数 L[i].next=NULL; Rear[i]=&amp;L[i]; &#125; while(edg--) &#123; cin&gt;&gt;a&gt;&gt;b; Insert(a,b); &#125; for(int i=0;i&lt;n;i++) Max=max(Max,L[i].data); cout&lt;&lt;Max&lt;&lt;endl; for(int i=0;i&lt;n;i++) if(L[i].data==Max) cout&lt;&lt;i; return 0;&#125; [1060] 无向图的最大度计算思路题目描述代码实现 传送门 描述 假设无向图G采用邻接矩阵存储，求出图G最大度值并输出顶点的编号（有多个结果的都要输出）。 输入 第一行为一个整数n，表示顶点的个数（顶点编号为0到n-1）。接下来是为一个n*n大小的整数矩阵，表示图的邻接关系。数字为0表示不邻接，1表示邻接。 输出 图G中度的最大值以及顶点编号。第一行表示最大度值，第二行表示所有顶点的编号。 样例输入1234565 0 1 0 1 1 1 0 1 1 1 0 1 0 1 1 1 1 1 0 1 1 1 1 1 0 样例输出124134 1234567891011121314151617#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int sum[100]=&#123;0&#125;,n,x,Max=0; cin&gt;&gt;n; for(int i=0;i&lt;n;i++)&#123; for(int j=0;j&lt;n;j++)&#123; cin&gt;&gt;x; if(x) sum[i]++; &#125; Max=max(sum[i],Max); &#125; cout&lt;&lt;Max&lt;&lt;endl; for(int i=0;i&lt;n;i++) if(sum[i]==Max) cout&lt;&lt;i; return 0; [1061] 有向图的k出度计算思路题目描述代码实现 传送门 描述 假设有向图G采用邻接矩阵存储，计算图G中出度为k的顶点数量，并输出顶点的编号。 输入 第一行第一个整数n表示顶点的个数（顶点编号为0到n-1），第二个数表示出度k，接下来是为一个n*n大小的整数矩阵，表示图的邻接关系。数字为0表示不邻接，1表示不邻接。 输出 图G中出度为k顶点数量以及顶点编号。第一行表示出度为k顶点数量，第二行表示顶点的编号。 样例输入1234565 20 1 0 1 00 0 1 1 00 0 0 0 00 0 0 0 01 0 0 1 0 样例输出123014 123456789101112131415161718#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int sum[100]=&#123;0&#125;,n,x,Sum=0,k; cin&gt;&gt;n&gt;&gt;k; for(int i=0;i&lt;n;i++)&#123; for(int j=0;j&lt;n;j++)&#123; cin&gt;&gt;x; if(x) sum[i]++; &#125; if(sum[i]==k) Sum++; &#125; cout&lt;&lt;Sum&lt;&lt;endl; for(int i=0;i&lt;n;i++) if(sum[i]==k) cout&lt;&lt;i; return 0;&#125; [1062] 有向图的边存在判断思路题目描述代码实现祝愿大家也能抽到这道题。 传送门 描述 假设有向图G采用邻接矩阵存储，判断图G中是否存在边。 输入 第一行第一个整数n表示顶点的个数（顶点编号为0到n-1），第二行表示顶点i和j，接下来是为一个n*n大小的整数矩阵，表示图的邻接关系。数字为0表示不邻接，1表示不邻接。 输出 yes（存在），no（不存在）。 样例输入123456750 20 1 0 1 00 0 1 1 00 0 0 0 00 0 0 0 01 0 0 1 0 样例输出1no 123456789101112#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int Map[100][100],n,a,b; cin&gt;&gt;n&gt;&gt;a&gt;&gt;b; for(int i=0;i&lt;n;i++) for(int j=0;j&lt;n;j++) cin&gt;&gt;Map[i][j]; cout&lt;&lt;(Map[a][b]? "yes":"no"); return 0;&#125; [1063] 带权有向图计算思路题目描述代码实现 传送门 描述 假设带权有向图G采用邻接矩阵存储，计算图的最大权值、最小权值以及对应的有向边。 输入 第一行第一个整数n表示顶点的个数（顶点编号为0到n-1），第二行表示顶点i和j，接下来是为一个n*n大小的整数矩阵，表示图的邻接关系。数字为大于0表示邻接值，-1表示不邻接，对角线为0。 输出 第一行为最大权值，第二行为有向边。第三行为最小权值，第四行为有向边。 样例输入1234565 0 5 -1 23 -1 -1 0 31 56 -1 -1 -1 0 -1 -1 -1 -1 -1 0 -1 56 -1 -1 19 0 样例输出12346&lt;1 3&gt;&lt;4 0&gt;5&lt;0 1&gt; 12345678910111213141516171819202122232425#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int Map[100][100],n,Max=0,Min=0xfffffff; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) for(int j=0;j&lt;n;j++)&#123; cin&gt;&gt;Map[i][j]; if(Map[i][j]&gt;0)&#123; Max=max(Max,Map[i][j]); Min=min(Min,Map[i][j]); &#125; &#125; cout&lt;&lt;Max&lt;&lt;endl; for(int i=0;i&lt;n;i++) for(int j=0;j&lt;n;j++) if(Map[i][j]==Max) printf("&lt;%d %d&gt;",i,j); cout&lt;&lt;endl&lt;&lt;Min&lt;&lt;endl; for(int i=0;i&lt;n;i++) for(int j=0;j&lt;n;j++) if(Map[i][j]==Min) printf("&lt;%d %d&gt;",i,j); return 0;&#125; [1064] 带权无向图存储判定思路题目描述代码实现 传送门 描述 假设无向图G采用邻接矩阵存储，判断输入数据格式是否正确（即是否为对称矩阵）。 输入 第一行第一个整数n表示顶点的个数（顶点编号为0到n-1），接下来是为一个n*n大小的整数矩阵，表示图的邻接关系。数字为大于0表示邻接值，-1表示不邻接，对角线为0。 输出 yes（正确），no（错误）。 样例输入12345650 6 -1 22 16 0 1 1 -1-1 1 0 1 122 1 1 0 91 -1 1 9 0 样例输出1yes 123456789101112131415#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int Map[100][100],n,Flag=0; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) for(int j=0;j&lt;n;j++)&#123; cin&gt;&gt;Map[i][j]; if(i&gt;j&amp;&amp;Map[i][j]!=Map[j][i]) Flag=1; &#125; cout&lt;&lt;(Flag? "no":"yes"); return 0;&#125; [1065] 无向图的连通分量计算思路题目描述代码实现 用并查集做。 把一个联通分支的点当做一个集合，两个点有边就合并他们所在的集合，最后看有几个集合，就是有几个联通分支。 这道题后台给的好像都是联通图，所以直接输出1也可以。太水了 传送门 描述 假设无向图G采用邻接矩阵存储，编写一个算法求连通分量的个数。 输入 第一行为一个整数n，表示顶点的个数（顶点编号为0到n-1），接下来是为一个n*n大小的整数矩阵，表示图的邻接关系。数字为0表示不邻接，1表示不邻接。 输出 连通分量的个数。 样例输入12345650 1 0 1 11 0 1 1 00 1 0 1 11 1 1 0 11 0 1 1 0 样例输出11 1234567891011121314151617181920212223242526272829303132#include&lt;bits/stdc++.h&gt;using namespace std;int Fa[1000];int Find(int x) //找x所在的集合代表&#123; return Fa[x]==x? x:Fa[x]=Find(Fa[x]);&#125;void Union(int a,int b)&#123; //合并a,b所在的集合 int fa=Find(a); int fb=Find(b); if(fa!=fb) Fa[b]=fa;&#125;int main()&#123; int n,x,ans=0; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) Fa[i]=i; for(int i=0;i&lt;n;i++) for(int j=0;j&lt;n;j++)&#123; cin&gt;&gt;x; if(x) Union(i,j); &#125; for(int i=0;i&lt;n;i++) if(Fa[i]==i)ans++; cout&lt;&lt;ans;&#125; [1067] 有向图的邻接表存储强连通判断思路题目描述代码实现 传送门 描述 假设有向图G采用邻接表存储，设计一个算法，判断图G是否是强连通图。若是则返回yes；否则返回no。（图中顶点信息为整型数据。） 输入 第一行为图中顶点的个数n；第二行为图的边的条数e；接下来e行，每行是一条边依附的两个顶点信息。 输出 强连通图输出yes,否则输出no. 样例输入123456789570 11 2 1 32 33 0 3 44 0 样例输出1yes 123456789101112131415161718192021222324#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int Map[100][100]=&#123;0&#125;,n,m,Flag=0,a,b; cin&gt;&gt;n&gt;&gt;m; while(m--)&#123; cin&gt;&gt;a&gt;&gt;b; Map[a][b]=1; &#125; for(int i=0;i&lt;n;i++) for(int j=0;j&lt;n;j++) for(int k=0;k&lt;n;k++)&#123; if(Map[j][i]&amp;&amp;Map[i][k]) Map[j][k]=1; &#125; for(int i=0;i&lt;n;i++) for(int j=0;j&lt;i;j++) if(Map[i][j]!=Map[j][i]) Flag=1; cout&lt;&lt;(Flag? "no":"yes"); return 0;&#125; [1068] 图的按录入顺序深度优先搜索思路题目描述代码实现普通dfs，注意标记一下用过的点就行了。 传送门 描述 图的深度优先搜索类似于树的先根遍历，即从某个结点开始，先访问该结点，然后深度访问该结点的第一棵子树，依次为第二顶子树。如此进行下去，直到所有的结点都访问为止。在该题中，假定所有的结点以“A”至“Z”中的若干字符表示，且要求结点的访问顺序根据录入的顺序进行访问。如果结点录入的顺序为HUEAK，从H开始进行深度优先搜索，则可能的搜索结果为：H-&gt;A-&gt;K-&gt;U&gt;E. 输入 第一行为一个整数n，表示顶点的个数，第二行为n个大写字母构成的字符串，表示顶点，接下来是为一个n*n大小的整数矩阵，表示图的邻接关系。数字为0表示不邻接，否则为相应的边的长度。最后一行为一个字符，表示要求进行深度优先搜索的起始顶点。 输出 用一行输出深度优先搜索结果，起始点为给定的顶点。 样例输入123456785HUEAK0 0 2 3 00 0 0 7 42 0 0 0 03 7 0 0 10 4 0 1 0H 样例输出1HEAUK 1234567891011121314151617181920212223242526272829303132#include&lt;bits/stdc++.h&gt;using namespace std;char Node[1000];int Mark[1000]=&#123;0&#125;,Map[1000][1000],n;void dfs(int x)&#123; cout&lt;&lt;Node[x]; for(int i=0;i&lt;n;i++)&#123; if(Map[x][i]&amp;&amp;!Mark[i])&#123; Mark[i]=1; dfs(i); &#125; &#125;&#125;int main()&#123; char S; cin&gt;&gt;n; scanf("%s",Node); for(int i=0;i&lt;n;i++) for(int j=0;j&lt;n;j++) cin&gt;&gt;Map[i][j]; cin&gt;&gt;S; int i=0; while(Node[i]!=S)i++; Mark[i]=1; dfs(i); return 0;&#125; [1069] 图的按录入顺序广度优先搜索思路题目描述代码实现用队列写bfs。 传送门 描述 图的广度优先搜索类似于树的按层次遍历，即从某个结点开始，先访问该结点，然后访问该结点的所有邻接点，再依次访问各邻接点的邻接点。如此进行下去，直到所有的结点都访问为止。在该题中，假定所有的结点以“A”—“Z”中的若干字符表示，且要求结点的访问顺序根据录入的顺序进行访问。如果结点录入的顺序为HUEAK，要求从H开始进行广度优先搜索，则可能的搜索结果为：H-&gt;E-&gt;A-&gt;U-&gt;K 输入 第一行为一个整数n，表示顶点的个数，第二行为n个大写字母构成的字符串，表示顶点，接下来是为一个n*n大小的整数矩阵，表示图的邻接关系。数字为0表示不邻接，否则为相应的边的长度。最后一行为一个字符，表示要求进行广度优先搜索的起始顶点。 输出 用一行输出广度优先搜索结果，起始点为给定的顶点。 样例输入123456785HUEAK0 0 2 3 00 0 0 7 42 0 0 0 03 7 0 0 10 4 0 1 0H 样例输出1HEAUK 12345678910111213141516171819202122232425262728293031323334353637#include&lt;bits/stdc++.h&gt;using namespace std;char Node[1000];int Mark[1000]=&#123;0&#125;,Map[1000][1000],n;queue&lt;int&gt; S;void bfs(int x)&#123; S.push(x); while(!S.empty())&#123; int tem=S.front(); for(int i=0;i&lt;n;i++)&#123; if(!Mark[i]&amp;&amp;Map[tem][i])&#123; S.push(i); Mark[i]=1; &#125; &#125; cout&lt;&lt;Node[tem]; S.pop(); &#125;&#125;int main()&#123; char s; cin&gt;&gt;n; scanf("%s",Node); for(int i=0;i&lt;n;i++) for(int j=0;j&lt;n;j++) cin&gt;&gt;Map[i][j]; cin&gt;&gt;s; int i=0; while(Node[i]!=s)i++; Mark[i]=1; bfs(i); return 0;&#125; [1070] 邻接矩阵存储简单路径思路题目描述代码实现dfs，注意标记回溯。 传送门 描述 假设无向图G采用邻接矩阵存储，设计一个算法，输出图G中从顶点u到v的所有简单路径。 输入 简单路径是指路径上的顶点不重复。第一行为一个整数n，表示顶点的个数（顶点编号为0到n-1），第二行表示顶点u和v的编号，接下来是为一个n*n大小的矩阵，表示图的邻接关系。数字为0表示不邻接，1表示不邻接。 输出 输出图G中从顶点u到v的所有简单路径。 样例输入123456750 30 1 0 1 11 0 1 1 00 1 0 1 11 1 1 0 11 0 1 1 0 样例输出123456701230124301303042130423043 12345678910111213141516171819202122232425262728293031323334#include&lt;bits/stdc++.h&gt;using namespace std;int n,way[1005],Flag[1005],star,end; bool Map[1005][1005];void dfs(int node,int fill)&#123; if(node==end)&#123; way[fill]=end; for(int i=0;i&lt;=fill;i++) printf("%d",way[i]); printf("\n"); return; &#125; for(int j=0;j&lt;n;j++)&#123; if(Map[node][j]&amp;&amp;!Flag[j])&#123; way[fill]=node; Flag[node]=1; dfs(j,fill+1); Flag[node]=0; &#125; &#125; return;&#125;int main()&#123; cin&gt;&gt;n&gt;&gt;star&gt;&gt;end; for(int i=0;i&lt;n;i++) for(int j=0;j&lt;n;j++) cin&gt;&gt;Map[i][j]; dfs(star,0); return 0;&#125; [1071] 有向图的邻接矩阵存储顶点删除思路题目描述代码实现 传送门 描述 假设有向图G采用邻接矩阵存储，要求删除某一个顶点i（包括与其相关连的边）。 输入 第一行第一个整数n表示顶点的个数（顶点编号为0到n-1），第二个数表示被删除的顶点编号，接下来是为一个n*n大小的整数矩阵，表示图的邻接关系。数字为0表示不邻接，1表示邻接。 输出 新的邻接矩阵，第一行表示顶点的个数;第二行是剩余的结点编号;接下来是为一个（n-1）*（n-1）大小的整数矩阵。 样例输入1234565 20 1 0 1 00 0 1 1 00 0 0 0 00 0 0 0 01 0 0 1 0 样例输出123456401340110001000001010 1234567891011121314151617#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int n,a,x; cin&gt;&gt;n&gt;&gt;a;cout&lt;&lt;n-1&lt;&lt;endl; for(int i=0;i&lt;n;i++) if(i!=a) cout&lt;&lt;i;cout&lt;&lt;endl; for(int i=0;i&lt;n;i++)&#123; for(int j=0;j&lt;n;j++)&#123; cin&gt;&gt;x; if(i!=a&amp;&amp;j!=a) cout&lt;&lt;x; &#125; if(i!=a)cout&lt;&lt;endl; &#125; return 0;&#125; [1072] 有向图的邻接矩阵存储根计算思路题目描述代码实现暴力出奇迹啊，floyd变形，简单易懂，详见代码。 传送门 描述 若有向图中存在一个顶点v，从v可以通过路径到达图中其他所有顶点，那么称v为该有向图的根。假设图G采用邻接矩阵存储，求有向图的所有根。 输入 第一行为一个整数n，表示顶点的个数（顶点编号为0到n-1），接下来是为一个n*n大小的整数矩阵，表示图的邻接关系。 输出 有向图的所有根。 样例输入12345650 1 0 0 00 0 1 1 00 0 0 1 01 0 0 0 11 0 0 0 0 样例输出101234 1234567891011121314151617181920212223242526#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int Map[100][100]=&#123;0&#125;,n,m,Flag=0,a,b; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) for(int j=0;j&lt;n;j++) cin&gt;&gt;Map[i][j]; for(int i=0;i&lt;n;i++) //floyd算法变形 for(int j=0;j&lt;n;j++) for(int k=0;k&lt;n;k++) if(Map[j][i]&amp;&amp;Map[i][k]) //如果j-&gt;i,i-&gt;k那么 j-&gt;k。 Map[j][k]=1; for(int i=0;i&lt;n;i++)&#123; int sum=0; for(int j=0;j&lt;n;j++) if(Map[i][j]&amp;&amp;i!=j) sum++; if(sum==n-1)cout&lt;&lt;i; &#125; return 0;&#125; [1075] 求最小生成树(Prim算法）思路题目描述代码实现书上有详细解释，这里就不多赘述。 传送门 描述 求出给定无向带权图的最小生成树。图的定点为字符型，权值为不超过100的整形。在提示中已经给出了部分代码，你只需要完善Prim算法即可。 输入 第一行为图的顶点个数n第二行为图的边的条数e接着e行为依附于一条边的两个顶点和边上的权值 输出 最小生成树中的边。 样例输入12345678910111213610ABCDEFA B 6A C 1A D 5B C 5C D 5B E 3E C 6C F 4F D 2E F 6 样例输出1(A,C)(C,F)(F,D)(C,B)(B,E) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192#include&lt;iostream&gt;#include&lt;stdio.h&gt;using namespace std;#define INF 0xffffffftypedef struct&#123; int n; int e; char data[500]; int edge[500][500];&#125; Graph;typedef struct&#123; int index; int cost;&#125; mincost;typedef struct&#123; int x; int y; int weight;&#125; EDGE;typedef struct&#123; int index; int flag;&#125; F;void create(Graph &amp;G,int n,int e)&#123; int i,j,k,w; char a,b; for(i=0; i&lt; n; i++) cin&gt;&gt;G.data[i]; for(i=0; i&lt; n; i++) for(j=0; j&lt; n; j++) &#123; if(i==j) G.edge[i][j]=0; else G.edge[i][j]=100; &#125; for(k=0; k&lt; e; k++) &#123; cin&gt;&gt;a; cin&gt;&gt;b; cin&gt;&gt;w; for(i=0; i&lt; n; i++) if(G.data[i]==a) break; for(j=0; j&lt; n; j++) if(G.data[j]==b) break; G.edge[i][j]=w; G.edge[j][i]=w; &#125; G.n=n; G.e=e;&#125;void Prim(Graph &amp;G,int v,int n)&#123; int lowcost[n],Min,closest[n],k; for(int i=0;i&lt;G.n;i++)&#123; lowcost[i]=G.edge[v][i]; closest[i]=v; &#125; for(int i=1;i&lt;G.n;i++)&#123; Min=INF; for(int j=0;j&lt;G.n;j++) if(lowcost[j]&amp;&amp;lowcost[j]&lt;Min)&#123; Min=lowcost[j]; k=j; &#125; printf("(%c,%c)",G.data[closest[k]],G.data[k]); lowcost[k]=0; for(int j=0;j&lt;G.n;j++) if(lowcost[j]&amp;&amp;G.edge[k][j]&lt;lowcost[j])&#123; lowcost[j]=G.edge[k][j]; closest[j]=k; &#125; &#125;&#125;int main()&#123; Graph my; int n,e; cin&gt;&gt;n&gt;&gt;e; create(my,n,e); Prim(my,0,n); return 0;&#125; [1076] 判断给定有向图是否存在回路思路题目描述代码实现还是floyd变形，暴力出奇迹。 传送门 描述 判断给定有向图是否存在回路。 输入 第一行为图中顶点的个数n； 第二行为途中弧度条数e；第二行为顶点信息;接着e行为e条弧依附的两个顶点。 输出 该图是否存在回路，是输出yes;，不是输出no。 样例输入123456744A B C DA BA CB DC D 样例输出1no 12345678910111213141516171819202122232425262728293031#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; map&lt;char,int&gt; M; int Map[100][100]=&#123;0&#125;,n,e,Flag=0;char tem,a,b; cin&gt;&gt;n&gt;&gt;e; for(int i=0;i&lt;n;i++)&#123; cin&gt;&gt;tem; M.insert(make_pair(tem,i)); &#125; while(e--)&#123; cin&gt;&gt;a&gt;&gt;b; Map[M[a]][M[b]]=1; &#125; for(int i=0;i&lt;n;i++) for(int j=0;j&lt;n;j++) for(int k=0;k&lt;n;k++) if(Map[j][i]&amp;&amp;Map[i][k]) //如果j-&gt;i,i&gt;k Map[j][k]=1; //那么就可以j-&gt;k for(int i=0;i&lt;n;i++) if(Map[i][i]) Flag=1; cout&lt;&lt;(Flag? "yes":"no"); return 0;&#125; [1077] 平衡二叉树的判定思路题目描述代码实现找有没有哪个树的左右儿子生成的子树深度之差大于1。 传送门 描述 编写程序判断给定的二叉树是否是平衡二叉树。 输入 二叉树的先序序列。 输出 如果是平衡二叉树，输出yes！，否者输出no！ 样例输入1AB##C## 样例输出1yes！ 123456789101112131415161718192021222324252627282930313233343536373839404142#include&lt;bits/stdc++.h&gt;using namespace std;int Flag=0;typedef struct node&#123; char data; node *Lchild,*Rchild;&#125; TreeNode;TreeNode * Built()&#123; TreeNode *T; char ch; cin&gt;&gt;ch; if(ch=='#') T=NULL; else&#123; T=new node; T-&gt;data=ch; T-&gt;Lchild=Built(); T-&gt;Rchild=Built(); &#125; return T;&#125;int Deep(TreeNode *&amp;Tem)&#123; if(Tem==NULL) return 0; int dl=Deep(Tem-&gt;Lchild); int dr=Deep(Tem-&gt;Rchild); if(abs(dl-dr)&gt;1) Flag=1; return 1+max(dl,dr);&#125;int main()&#123; TreeNode *Root; Root=Built(); Deep(Root); cout&lt;&lt;(Flag? "no!":"yes!"); return 0;&#125; [1098] 堆的判断思路题目描述代码实现找是否存在一个节点的值小于它双亲结点的值。 传送门 描述 编写程序判断以下给出的整数序列是否为最小堆。 输入 第一行是元素的个数n；第二行是n个整数序列。 输出 如果是小根堆，输出Yes，否者输出No。 样例输入1210100 86 48 73 35 39 42 57 66 21 样例输出1No 12345678910111213141516171819#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int n,a[100],Flag=0; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) cin&gt;&gt;a[i]; for(int i=1;i&lt;=n&gt;&gt;1;i++) if(i&lt;&lt;1&lt;n&amp;&amp;a[i&lt;&lt;1]&lt;a[i])&#123; Flag=1; break; &#125; cout&lt;&lt;(Flag? "No":"Yes"); return 0;&#125; [1099] 希尔排序算法实现思路题目描述代码实现只要一趟，滑稽.jpg 传送门 描述 编程实现希尔排序算法，按照非递减排序，测试数据为整数。 输入 第一行是待排序数据元素的个数n；第二行是待排序的数据元素。 输出 一趟希尔排序后的结果。 样例输入121050 36 41 19 23 4 20 18 12 22 样例输出14 20 18 12 22 50 36 41 19 23 123456789101112131415161718192021222324#include&lt;iostream&gt;#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int a[1000],b[1000],c[1000],n; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) cin&gt;&gt;a[i]; int i=0,j=n&gt;&gt;1,mid=j,k=0; while(i&lt;mid&amp;&amp;j&lt;n)&#123; if(a[i]&lt;a[j]) c[k++]=a[i++]; else c[k++]=a[j++]; &#125; while(i&lt;mid) c[k++]=a[i++]; while(j&lt;n) c[k++]=a[j++]; for(int i=0;i&lt;n;i++) cout&lt;&lt;c[i]&lt;&lt;" "; return 0;&#125; [1105] 交换二叉树的孩子结点思路题目描述代码实现递归交换即可。 传送门 描述 编程程序实现将二叉树中所有结点的左右孩子互换。 输入 二叉树的先序序列（输入先序序列建立二叉树）。 输出 第一行为交换后的二叉树的中序序列第二行为交换后的二叉树的先序序列 样例输入1ABD###C### 样例输出12CABDACBD 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define NewNode (TreeNode *) malloc (sizeof(TreeNode))typedef struct node&#123; char data; node *Lchild,*Rchild;&#125; TreeNode;TreeNode * Built()&#123; TreeNode *T; char ch; cin&gt;&gt;ch; if(ch=='#') T=NULL; else &#123; T=NewNode; T-&gt;data=ch; T-&gt;Lchild=Built(); T-&gt;Rchild=Built(); &#125; return T;&#125;void Change(TreeNode *&amp;Tem)&#123; if(Tem==NULL) return; swap(Tem-&gt;Lchild,Tem-&gt;Rchild); Change(Tem-&gt;Lchild); Change(Tem-&gt;Rchild);&#125; void Put1(TreeNode *&amp;Tem)&#123; if(Tem==NULL) return; Put1(Tem-&gt;Lchild); cout&lt;&lt;Tem-&gt;data; Put1(Tem-&gt;Rchild); &#125; void Put2(TreeNode *&amp;Tem)&#123; if(Tem==NULL) return; cout&lt;&lt;Tem-&gt;data; Put2(Tem-&gt;Lchild); Put2(Tem-&gt;Rchild); &#125;int main()&#123; TreeNode *Root; Root=Built(); Change(Root); Put1(Root);cout&lt;&lt;endl; Put2(Root); return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Large Division(数论)]]></title>
    <url>%2FLarge-Division%2F</url>
    <content type="text"><![CDATA[描述传送门：Light oj-1214 &emsp;Given two integers, a and b, you should check whether a is divisible by b or not. We know that an integer a is divisible by an integer b if and only if there exists an integer c such that a = b * c. Input Input starts with an integer T (≤ 525), denoting the number of test cases. Each case starts with a line containing two integers $a (-10^200 ≤ a ≤ 10^200)$ and b (|b| &gt; 0, b fits into a 32 bit signed integer). Numbers will not contain leading zeroes. Output For each case, print the case number first. Then print ‘divisible’ if a is divisible by b. Otherwise print ‘not divisible’. Examples intput 12345676101 1010 67-101 1017678123668327637674887634 10111010000000000000000 256-202202202202000202202202 -101 output 123456Case 1: divisibleCase 2: divisibleCase 3: divisibleCase 4: not divisibleCase 5: divisibleCase 6: divisible 思路 题目就是问是否 a%b==0; 两百位的数肯定不能直接算，高精度除法说不定能过。 把a换一种方式表示，比如1234=((1*10+2)*10+3)*10+4。两边同时取模，由于(a+b)%c==a%c+b%c,所以可以分步取模。 时间复杂度O(N)。 代码123456789101112131415161718192021#include &lt;bits/stdc++.h&gt;using namespace std;char a[205];long long x,sum;int main()&#123; int T; cin&gt;&gt;T; for(int Case=1;Case&lt;=T;Case++) &#123; sum=0; scanf("%s%lld",a,&amp;x); int len=strlen(a); for(int i= a[0]=='-'? 1:0;i&lt;len;i++) sum=(sum*10+(a[i]-'0'))%x; cout&lt;&lt;"Case "&lt;&lt;Case&lt;&lt;(sum? ": not divisible":": divisible")&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最长回文子串(Manachar算法)]]></title>
    <url>%2F%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-3068 给出一个只由小写英文字符a,b,c…y,z组成的字符串S,求S中最长回文子串的长度.回文就是正反读都是一样的字符串,如aba, abba等 Input 输入有多组case,不超过120组,每组输入为一行小写英文字符a,b,c…y,z组成的字符串S两组case之间由空行隔开(该空行不用处理)。字符串长度len &lt;= 110000 Output 每一行一个整数x,对应一组case,表示该组case的字符串中所包含的最长回文长度. Examples intput 123aaaaabab output 1243 思路 len最大是1100000，暴力肯定会T，直接套用Manachar算法。 Manachar算法时间复杂度为$O(N)$。 代码123456789101112131415161718192021222324252627282930313233343536#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define INF 0xfffffffconst int N=110005;char s[N&lt;&lt;1];int p[N&lt;&lt;1];int Manachar()&#123; CRL(p); int n=strlen(s+1),mx=0,ans=0,id=0; for(int i=n;i&gt;=1;i--)&#123; //初始化插入特殊字符，统一了长度为奇偶两种情况。 s[i&lt;&lt;1]=s[i]; s[i&lt;&lt;1|1]='*'; &#125; s[1]='*'; n=n&lt;&lt;1|1; for(int i=0;i&lt;n;i++)&#123; if(mx&gt;i) p[i]=min(mx-i,p[2*id-i]); else p[i]=1; while(i-p[i]&gt;0&amp;&amp;i+p[i]&lt;=n&amp;&amp;s[i-p[i]]==s[i+p[i]]) p[i]++; if (p[i]+i&gt;mx) &#123;id=i; mx=p[i]+i;&#125; &#125; for(int i=1;i&lt;=n;i++) if(p[i]-1&gt;ans) ans=p[i]-1; return ans; &#125; int main()&#123; while(~scanf("%s",s+1)) cout&lt;&lt;Manachar()&lt;&lt;endl; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Manachar算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hard challenge(模拟)]]></title>
    <url>%2FHard-challenge%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-6127 &emsp;There are n points on the plane, and the ith points has a value $val_i$, and its coordinate is $(x_i,y_i)$. It is guaranteed that no two points have the same coordinate, and no two points makes the line which passes them also passes the origin point. For every two points, there is a segment connecting them, and the segment has a value which equals the product of the values of the two points. Now HazelFan want to draw a line throgh the origin point but not through any given points, and he define the score is the sum of the values of all segments that the line crosses. Please tell him the maximum score. Input The first line contains a positive integer $T(1≤T≤5)$, denoting the number of test cases.For each test case:The first line contains a positive integer $n(1≤n≤5×10^4)$.The next n lines, the ith line contains three integers $x_i,yi,val_i(|x_i|,|y_i|≤10^9,1≤val_i≤10^4)$. Output For each test case:A single line contains a nonnegative integer, denoting the answer. Examples intput 12345678221 1 11 -1 131 1 11 -1 10-1 0 100 output 1211100 大致题意 有$n$个点，每个点都有一个值，两个点确定的线段的值为两个点的乘积。求一条过原点的直线，使它穿过的所有线段的值之和最大，输出这个最大值。 思路 第一次做这种题完全没有什么思路，想到的算法还没敲都被自己YY TLE了，最后还是靠大佬点拨了一下按斜率排序。（果然还是太菜了） 易得直线穿过的值之和就是两块区域中点的和的乘积。 对于每个点，我们求这个点和原点连线的斜率，然后对所有的点按斜率排序。 先选一条直线，将所有的点分为两部分，然后慢慢旋转180°。由于我们对斜率排序，所以我们选择x=0为初始直线。 我们将x=0这条直线逆时针旋转，可以想象一下它在旋转的时候，会依次碰到排序后的点，（由于题目说了不会存在两点连线过原点的情况，所以不会同时碰到两个点。一开始没看到，想了好久）。每碰到一个点，就将它的值从原集合减去加到另一个集合中。找到所有分法的最大值。 ans要用long long。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define INF 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; const int N=5e4+5;struct node&#123; int x,y,valum; double Angle;&#125;point[N];bool cmp(node x,node y)&#123;return x.Angle&lt;y.Angle;&#125;int main()&#123; int Case,n;ll sum1,sum2,ans; cin&gt;&gt;Case; while(Case--) &#123; sum1=0;sum2=0; cin&gt;&gt;n; for(int i=0;i&lt;n;i++)&#123; scanf("%d%d%d",&amp;point[i].x,&amp;point[i].y,&amp;point[i].valum); point[i].Angle=point[i].y*1.0/point[i].x; //算斜率 &#125; sort(point,point+n,cmp); for(int i=0;i&lt;n;i++) //初始时直线是x=0,所以x&gt;0是一个集合，x&lt;=0是个集合。 if(point[i].x&gt;0) sum1+=point[i].valum; else sum2+=point[i].valum; ans=sum1*sum2; for(int i=0;i&lt;n;i++)&#123; //旋转 if(point[i].x&gt;0) sum1-=point[i].valum,sum2+=point[i].valum; else sum1+=point[i].valum,sum2-=point[i].valum; ans=max(ans,sum1*sum2); //取最大 &#125; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Biorhythms(拓展欧几里德+中国剩余定理)]]></title>
    <url>%2FBiorhythms%2F</url>
    <content type="text"><![CDATA[描述传送门：poj-1006 &emsp;Some people believe that there are three cycles in a person’s life that start the day he or she is born. These three cycles are the physical, emotional, and intellectual cycles, and they have periods of lengths 23, 28, and 33 days, respectively. There is one peak in each period of a cycle. At the peak of a cycle, a person performs at his or her best in the corresponding field (physical, emotional or mental). For example, if it is the mental curve, thought processes will be sharper and concentration will be easier. &emsp;Since the three cycles have different periods, the peaks of the three cycles generally occur at different times. We would like to determine when a triple peak occurs (the peaks of all three cycles occur in the same day) for any person. For each cycle, you will be given the number of days from the beginning of the current year at which one of its peaks (not necessarily the first) occurs. You will also be given a date expressed as the number of days from the beginning of the current year. You task is to determine the number of days from the given date to the next triple peak. The given date is not counted. For example, if the given date is 10 and the next triple peak occurs on day 12, the answer is 2, not 3. If a triple peak occurs on the given date, you should give the number of days to the next occurrence of a triple peak. Input You will be given a number of cases. The input for each case consists of one line of four integers p, e, i, and d. The values p, e, and i are the number of days from the beginning of the current year at which the physical, emotional, and intellectual cycles peak, respectively. The value d is the given date and may be smaller than any of p, e, or i. All values are non-negative and at most 365, and you may assume that a triple peak will occur within 21252 days of the given date. The end of input is indicated by a line in which $p = e = i = d = -1$. Output For each test case, print the case number followed by a message indicating the number of days to the next triple peak, in the form:Case 1: the next triple peak occurs in 1234 days.Use the plural form days even if the answer is 1. Examples intput 12345670 0 0 00 0 0 1005 20 34 3254 5 6 7283 102 23 320203 301 203 40-1 -1 -1 -1 output 123456Case 1: the next triple peak occurs in 21252 days.Case 2: the next triple peak occurs in 21152 days.Case 3: the next triple peak occurs in 19575 days.Case 4: the next triple peak occurs in 16994 days.Case 5: the next triple peak occurs in 8910 days.Case 6: the next triple peak occurs in 10789 days. 思路 转化一下即求解最小的$x$并满足： S: \begin{cases} x \equiv a\ \ (mod\ 23)\\ x \equiv b\ \ (mod\ 38) \\ x \equiv c\ \ (mod\ 33) \\ \end{cases} 裸的中国剩余定理，处理一下x&lt;=0和x&lt;d的情况就行了。在这里wa了几发 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344#include&lt;iostream&gt;#include&lt;algorithm&gt; #include&lt;string.h&gt; #include&lt;string&gt; #include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define INF 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; int exgcd(int a,int b,int &amp;x,int &amp;y)&#123; if(b==0) return x=1,y=0,a; int tem=exgcd(b,a%b,y,x); y-=a/b*x; return tem;&#125;int China(int w[],int b[],int k,int d)&#123; int x,y,ns=0,m,n=1; for(int i=0;i&lt;k;i++) n*=w[i]; for(int i=0;i&lt;k;i++)&#123; m=n/w[i]; exgcd(w[i],m,x,y); ans=(ans+y*m*b[i])%n; &#125; if(ans&lt;=0||ans&lt;d) ans+=n; return ans;&#125;int main()&#123; ios::sync_with_stdio(false); int a[3],w[3]=&#123;23,28,33&#125;,d,Case=0; while(cin&gt;&gt;a[0]&gt;&gt;a[1]&gt;&gt;a[2]&gt;&gt;d&amp;&amp;a[0]&gt;=0&amp;&amp;a[1]&gt;=0&amp;&amp;a[2]&gt;=0&amp;&amp;d&gt;=0) printf("Case %d: the next triple peak occurs in %d days.\n",++Case,China(w,a,3,d)-d); return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>拓欧</tag>
        <tag>中国剩余定理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C Looooops(拓展欧几里德)]]></title>
    <url>%2FC-Looooops%2F</url>
    <content type="text"><![CDATA[描述传送门：poj-2115 A Compiler Mystery: We are given a C-language style for loop of typefor(variable = A; variable != B; variable += C) statement; Ie, a loop which starts by setting variable to value A and while variable is not equal to B, repeats statement followed by increasing the variable by C. We want to know how many times does the statement get executed for particular values of A, B and C, assuming that all arithmetics is calculated in a k-bit unsigned integer type (with values 0 &lt;= x &lt; $2^k$) modulo $2^k$. Input The input consists of several instances. Each instance is described by a single line with four integers A, B, C, k separated by a single space. The integer k (1 &lt;= k &lt;= 32) is the number of bits of the control variable of the loop and A, B, C (0 &lt;= A, B, C &lt; 2 k) are the parameters of the loop. The input is finished by a line containing four zeros. Output The output consists of several lines corresponding to the instances on the input. The i^(th) line contains either the number of executions of the statement in the i^(th) instance (a single integer number) or the word “FOREVER” if the loop does not terminate. Examples intput 123453 3 2 163 7 2 167 3 2 163 4 2 160 0 0 0 output 12340232766FOREVER 思路 $k=2^k$,即求$a+t \cdot c-k \cdot m=b$，求最小正数$t$，拓欧基本操作。 代码123456789101112131415161718192021222324252627282930313233343536373839404142#include&lt;iostream&gt;#include&lt;algorithm&gt; #include&lt;string.h&gt; #include&lt;string&gt; #include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define INF 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; ll exgcd(ll a,ll b,ll &amp;x,ll &amp;y)&#123; if(b==0) return x=1,y=0,a; ll tmp=exgcd(b,a%b,y,x); y-=a/b*x; return tmp;&#125;int main()&#123; ll a,b,c,k,x,y,d,t; while(~scanf("%lld%lld%lld%lld",&amp;a,&amp;b,&amp;c,&amp;k)&amp;&amp;(a||b||c||k)) &#123; k=(1LL)&lt;&lt;k; //注意1要转成long long的1,否则k=32时要爆精度。 t=b-a; ll gcd=exgcd(c,k,x,y); if((b-a)%gcd) printf("FOREVER\n"); else&#123; x*=(b-a)/gcd; k /= gcd; x = (x%k + k) % k; printf("%lld\n",x); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>拓欧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[青蛙的约会(拓展欧几里德)]]></title>
    <url>%2F%E9%9D%92%E8%9B%99%E7%9A%84%E7%BA%A6%E4%BC%9A%2F</url>
    <content type="text"><![CDATA[描述传送门：poj-1061 &emsp;两只青蛙在网上相识了，它们聊得很开心，于是觉得很有必要见一面。它们很高兴地发现它们住在同一条纬度线上，于是它们约定各自朝西跳，直到碰面为止。可是它们出发之前忘记了一件很重要的事情，既没有问清楚对方的特征，也没有约定见面的具体位置。不过青蛙们都是很乐观的，它们觉得只要一直朝着某个方向跳下去，总能碰到对方的。但是除非这两只青蛙在同一时间跳到同一点上，不然是永远都不可能碰面的。为了帮助这两只乐观的青蛙，你被要求写一个程序来判断这两只青蛙是否能够碰面，会在什么时候碰面。我们把这两只青蛙分别叫做青蛙A和青蛙B，并且规定纬度线上东经0度处为原点，由东往西为正方向，单位长度1米，这样我们就得到了一条首尾相接的数轴。设青蛙A的出发点坐标是x，青蛙B的出发点坐标是y。青蛙A一次能跳m米，青蛙B一次能跳n米，两只青蛙跳一次所花费的时间相同。纬度线总长L米。现在要你求出它们跳了几次以后才会碰面。 Input 输入只包括一行5个整数x，y，m，n，L，其中x≠y &lt; 2000000000，0 &lt; m、n &lt; 2000000000，0 &lt; L &lt; 2100000000。 Output 输出碰面所需要的跳跃次数，如果永远不可能碰面则输出一行”Impossible”。 Examples intput 11 2 3 4 5 output 14 思路 显然我们要求满足$(x+t \cdot m)\%L=(y+t \cdot n)\% L$的最小正数$t$。 变换一下得$t\cdot (m-n)+k \cdot L= y-x$,再变一下得到最后的式子\frac {t \cdot gcd}{y-x} \cdot (m-n)+\frac {k \cdot gcd}{y-x} \cdot L=gcd其中$gcd=gcd(m-n,L)$。然后直接套拓欧模板。 拓展欧几里德详解 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include&lt;iostream&gt;#include&lt;algorithm&gt; #include&lt;string.h&gt; #include&lt;string&gt; #include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define INF 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; ll exgcd(ll a,ll b,ll &amp;x,ll &amp;y) //拓展欧几里德算法 &#123; if(b==0)&#123;x=1;y=0;return a;&#125; ll r=exgcd(b,a%b,x,y); ll c=x; x=y; y=c-a/b*y; return r;&#125;int main()&#123; ll x,y,m,n,L,ans,a,b; cin&gt;&gt;x&gt;&gt;y&gt;&gt;m&gt;&gt;n&gt;&gt;L; a=m-n;ll c=y-x;b=L; //处理一下 if(a&lt;0)&#123; a=-a;c=-c; &#125; ll gcd=exgcd(a,b,x,y); if(c%gcd) cout&lt;&lt;"Impossible"&lt;&lt;endl; else&#123; x=x*c/gcd; if(x&gt;0) x=x%(b/gcd); else x=x%(b/gcd)+b/gcd; cout&lt;&lt;x&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>拓欧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Who Gets the Most Candies?(线段树+约瑟夫环)]]></title>
    <url>%2FWho-Gets-the-Most-Candies%2F</url>
    <content type="text"><![CDATA[描述传送门：poj-2886 &emsp;N children are sitting in a circle to play a game. The children are numbered from 1 to N in clockwise order. Each of them has a card with a non-zero integer on it in his/her hand. The game starts from the K-th child, who tells all the others the integer on his card and jumps out of the circle. The integer on his card tells the next child to jump out. Let A denote the integer. If A is positive, the next child will be the A-th child to the left. If A is negative, the next child will be the (−A)-th child to the right. The game lasts until all children have jumped out of the circle. During the game, the p-th child jumping out will get F(p) candies where F(p) is the number of positive integers that perfectly divide p. Who gets the most candies? Input There are several test cases in the input. Each test case starts with two integers N $(0 &lt; N \leq 500,000)$ and K $(1 \leq K \leq N) on the first line. The next N lines contains the names of the children (consisting of at most 10 letters) and the integers (non-zero with magnitudes within $10^8$) on their cards in increasing order of the children’s numbers, a name and an integer separated by a single space in a line with no leading or trailing spaces. Output Output one line for each test case containing the name of the luckiest child and the number of candies he/she gets. If ties occur, always choose the child who jumps out of the circle first. Examples intput 123454 2Tom 2Jack 4Mary -1Sam 1 output 1Sam 3 题目大意 有N个人，每个人有一个数$a_i$。从第K个人开始出列，如果他的数$a_i$&gt;0，则他顺时针方向第$(a_i)$个人出列，循环，直到最后一个人出列。 $x$表示在第$x$轮出列,$f(x)$表示$x$的因数个数。求最大的$f(x)$。 思路 线段树维护区间值和，表示这个区间还剩多少人，每次更新就在对应区间-1。 设当前这轮$k$出列，用$k=(k+a_i$)%当前剩余人数，求得下一个$k$的值。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) mamset(a,0,sizeof(a))typedef long long ll;const int N=5e5+5;typedef pair&lt;char[12],int &gt; pp;int tr[N&lt;&lt;2],book[N];pp people[N];int Init() //打表book[i]表示i的因数个数 &#123; for(int i=1;i&lt;=500000;i++) for(int j=i;j&lt;=500000;j+=i) book[j]++;&#125;void Built(int root,int l,int r)&#123; if(l==r) &#123; tr[root]=1; return;&#125; else&#123; int mid=l+r&gt;&gt;1; Built(root&lt;&lt;1,l,mid); Built(root&lt;&lt;1|1,mid+1,r); tr[root]=tr[root&lt;&lt;1]+tr[root&lt;&lt;1|1]; &#125;&#125;int Update(int root,int l,int r,int x) &#123; if(l==r) &#123; tr[root]--; return l; &#125; else&#123; tr[root]--; int mid=l+r&gt;&gt;1; if(x&lt;=tr[root&lt;&lt;1]) return Update(root&lt;&lt;1,l,mid,x); //判断出列的在左边还是右边 else return Update(root&lt;&lt;1|1,mid+1,r,x-tr[root&lt;&lt;1]); &#125;&#125;int main()&#123; ios::sync_with_stdio(false); Init(); int n,k,ans=0,tem; while(cin&gt;&gt;n&gt;&gt;k) &#123; ans=0;tem=k; Built(1,1,n); for(int i=1;i&lt;=n;i++) cin&gt;&gt;people[i].first&gt;&gt;people[i].second; for(int i=1;i&lt;=n;i++) if(ans&lt;book[i]) ans=book[i]; //找到最大的f(x) for(int i=1;i&lt;=n;i++) //依次出列 &#123; tem=Update(1,1,n,k); //第k个人出列 if(book[i]==ans) &#123; cout&lt;&lt;people[tem].first&lt;&lt;" "&lt;&lt;ans&lt;&lt;endl; break; &#125; if(people[tem].second&gt;0) //判断下一个出列的人的位置 k=(k-1+people[tem].second-1)%(n-i)+1; else k=((k-1+people[tem].second)%(n-i)+(n-i))%(n-i)+1; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Minimum Inversion Number(树状数组+离散化处理)]]></title>
    <url>%2FMinimum-Inversion-Number%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-1394 &emsp;The inversion number of a given number sequence $a_1, a_2, …, a_n$ is the number of pairs $(a_i, a_j)$ that satisfy i &lt; j and $a_i &gt; a_j$. For a given sequence of numbers a1, a2, …, an, if we move the first m &gt;= 0 numbers to the end of the seqence, we will obtain another sequence. There are totally n such sequences as the following: $a_1, a_2, …, a_(n-1), a_n$ (where m = 0 - the initial seqence)$a_2, a_3, …, a_n, a_1$ (where m = 1)$a_3, a_4, …, a_n, a_1, a_2$ (where m = 2)…$a_n, a_1, a_2, …, a_(n-1) (where m = n-1) You are asked to write a program to find the minimum inversion number out of the above sequences. Input The input consists of a number of test cases. Each case consists of two lines: the first line contains a positive integer n (n &lt;= 5000); the next line contains a permutation of the n integers from 0 to n-1. Output For each case, output the minimum inversion number on a single line. Examples intput 12101 3 6 9 0 8 5 7 4 2 output 116 大致题意 给你一个长$n$的数列，每次把第一个数放到末尾，求这$n$种排列方式中的最小逆序数。 思路 求出原始数列的逆序数。 O(n)遍历，每次求出新的数列的逆序数，每次变化得到的新的逆序数为$tem+(n-2*b[i]+1)$，b[i]为数列第i个值。 求逆序数的方法有：暴力，归并排序，树状数组+离散化,这次我用的是树状数组。详见求数列的逆序数 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define lowbit(x) (x&amp;(-x))#define INF 0xfffffffftypedef long long ll;const int N=5e5+5;int tr[N],b[N],n;typedef pair &lt;int,int&gt; pp;pp a[N];void Update(int x)&#123;while(x&lt;=n)&#123;tr[x]++;x+=lowbit(x);&#125;&#125;int Query(int x)&#123;int sum=0;while(x&gt;0)&#123;sum+=tr[x];x-=lowbit(x);&#125;return sum;&#125;int main()&#123; while(cin&gt;&gt;n) &#123; CRL(tr); for(int i=1;i&lt;=n;i++) //离散化开始 &#123; cin&gt;&gt;a[i].first; a[i].second=i; &#125; sort(a+1,a+n+1); for(int i=1;i&lt;=n;i++) b[a[i].second]=i; //离散化结束 int ans=0; for(int i=1;i&lt;=n;i++) &#123; Update(b[i]); ans+=(i-Query(b[i])); &#125; int tem=ans; for(int i=1;i&lt;n;i++) &#123; tem=tem+(n-2*b[i]+1); ans=min(ans,tem); &#125; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0; &#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Billboard（线段树）]]></title>
    <url>%2FBillboard%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-2795 &emsp;At the entrance to the university, there is a huge rectangular billboard of size h*w (h is its height and w is its width). The board is the place where all possible announcements are posted: nearest programming competitions, changes in the dining room menu, and other important information. On September 1, the billboard was empty. One by one, the announcements started being put on the billboard. Each announcement is a stripe of paper of unit height. More specifically, the i-th announcement is a rectangle of size 1 * wi. When someone puts a new announcement on the billboard, she would always choose the topmost possible position for the announcement. Among all possible topmost positions she would always choose the leftmost one. If there is no valid location for a new announcement, it is not put on the billboard (that’s why some programming contests have no participants from this university). Given the sizes of the billboard and the announcements, your task is to find the numbers of rows in which the announcements are placed. Input There are multiple cases (no more than 40 cases). The first line of the input file contains three integer numbers, h, w, and n (1 &lt;= h,w &lt;= $10^9$; 1 &lt;= n &lt;= 200,000) - the dimensions of the billboard and the number of announcements. Each of the next n lines contains an integer number wi (1 &lt;= wi &lt;=$ 10^9 $) - the width of i-th announcement. Output For each announcement (in the order they are given in the input file) output one number - the number of the row in which this announcement is placed. Rows are numbered from 1 to h, starting with the top row. If an announcement can’t be put on the billboard, output “-1” for this announcement. Examples intput 1234563 5 524333 output 123451213-1 思路 线段树，对每行建树，叶子节点为此行剩余的宽度，维护区间最大值。 单点修改，单点查询。 每次贴广告就更新一次，如果根节点左右都放不下就返回-1。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define INF 0xffffffftypedef unsigned long long LL;typedef long long ll;const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7;const int N=2*1e6+5;int tr[N&lt;&lt;2];void Built(int root,int l,int r,int c)&#123; if(l==r) tr[root]=c; else &#123; int mid=l+r&gt;&gt;1; Built(root&lt;&lt;1,l,mid,c); Built(root&lt;&lt;1|1,mid+1,r,c); tr[root]=max(tr[root&lt;&lt;1],tr[root&lt;&lt;1|1]); &#125;&#125;int Update(int root,int l,int r,int c)&#123; int tem; if(l==r) &#123; if(tr[root]&lt;c) return -1; tr[root]-=c; return l; &#125; else &#123; int mid=l+r&gt;&gt;1; if(tr[root&lt;&lt;1]&gt;=c) tem=Update(root&lt;&lt;1,l,mid,c); else if(tr[root&lt;&lt;1|1]&gt;=c) tem=Update(root&lt;&lt;1|1,mid+1,r,c); else return -1; tr[root]=max(tr[root&lt;&lt;1],tr[root&lt;&lt;1|1]); &#125; return tem;&#125;int main()&#123; int h,w,n,x; ios::sync_with_stdio(false); while(cin&gt;&gt;h&gt;&gt;w&gt;&gt;n) &#123; h= h&gt;n? n:h; Built(1,1,h,w); while(n--) &#123; cin&gt;&gt;x; cout&lt;&lt;Update(1,1,h,x)&lt;&lt;endl; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[swust oj(数据结构前40)]]></title>
    <url>%2Fswust-oj-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%89%8D40%2F</url>
    <content type="text"><![CDATA[博主码风太丑，勿喷。由于据说数据结构考试必须强行用学的这些数据结构，所以都老老实实写的。用数组模拟的代码有时间再写了 [941] 有序顺序表的合并操作的实现思路题目描述顺序表实现数组模拟实现每次比较两个序列的前两个，选小的放入c，详见代码。 传送门 描述 已知两非递减的顺序线性表，要求合并成一个新的非递减顺序线性表。(测试数据为整型) 输入 输入包含四行，第一行为自然数n，表示第一个非递减顺序线性表的长度;第二行为n个自然数构成的非递减顺序线性表;第三行为自然数m，表示第二个非递减顺序线性表的长度;第四行为m个自然数构成的非递减顺序线性表。 输出 输出：用一行输出合并后的非递减顺序线性表，各数之间用一个空格隔开。 样例输入123421 332 3 6 样例输出11 2 3 3 6 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct &#123; int date[100]; int len;&#125; SqList;void Create (SqList *&amp;L)&#123; int n; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) cin&gt;&gt;L-&gt;date[i]; L-&gt;len=n;&#125;void Merge(SqList *&amp;La,SqList *&amp;Lb,SqList *&amp;Lc)&#123; int ia=0,ib=0,ic=0; while(ia&lt;La-&gt;len&amp;&amp;ib&lt;Lb-&gt;len) Lc-&gt;date[ic++]= La-&gt;date[ia] &lt;= Lb-&gt;date[ib]? La-&gt;date[ia++]:Lb-&gt;date[ib++]; while(ia&lt;La-&gt;len) Lc-&gt;date[ic++]=La-&gt;date[ia++]; while(ib&lt;Lb-&gt;len) Lc-&gt;date[ic++]=Lb-&gt;date[ib++]; Lc-&gt;len=La-&gt;len+Lb-&gt;len;&#125;void Put(SqList *&amp;La)&#123; for(int i=0;i&lt;La-&gt;len;i++) cout&lt;&lt;La-&gt;date[i]&lt;&lt;" "; &#125;int main()&#123; SqList *La,*Lb,*Lc; La=(SqList *) malloc(sizeof(SqList)); Lb=(SqList *) malloc(sizeof(SqList)); Lc=(SqList *) malloc(sizeof(SqList)); Create(La); Create(Lb); Merge(La,Lb,Lc); Put(Lc); return 0;&#125; 敬请期待… [942] 逆置顺序表思路题目描述顺序表实现数组模拟实现… 传送门 描述 建立长度为n的顺序表，然后将表中的数据元素逆置，即若表中原来的数据元素序列为（a0，a1，a2，…，an），则逆置后的数据元素序列为（an，an-1，an-2，…，a1，a0）。（数据类型为字符型） 输入 第一行为顺序表的长度n；第二行为顺序表中的数据元素. 输出 输出为逆置后的顺序表. 样例输入127ABCDEFG 样例输出1G F E D C B A 1234567891011121314151617181920212223242526272829303132333435363738394041#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct &#123; char date[100]; int len;&#125; SqList;void Create (SqList *&amp;L)&#123; int n; cin&gt;&gt;n; getchar(); for(int i=0;i&lt;n;i++) scanf("%c",&amp;L-&gt;date[i]); L-&gt;len=n;&#125;void Put(SqList *&amp;La)&#123; for(int i=La-&gt;len-1;i&gt;=0;i--) cout&lt;&lt;La-&gt;date[i]&lt;&lt;" "; &#125;int main()&#123; SqList *La; La=(SqList *) malloc(sizeof(SqList)); Create(La); Put(La); return 0;&#125; 敬请期待… [943] 顺序表插入操作的实现思路题目描述顺序表实现数组模拟实现插入到位置i就要把i及以后的元素都后移一个，再插入。 传送门 描述 建立长度为n的顺序表，在指定的数据元素item之前插入数据元素data。如果指定的数据元素item不存在，则将data插入到顺序表的尾端。（数据类型为整型） 输入 第一行为顺序表的长度n；第二行为顺序表中的数据元素；第三行为指定的数据元素item；第四行为要插入的数据元素data； 输出 顺序表中的数据元素。 样例输入12341010 20 30 40 50 60 70 80 90 1005055 样例输出110 20 30 40 55 50 60 70 80 90 100 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct &#123; int date[100]; int len;&#125; SqList;void Create (SqList *&amp;L)&#123; int n; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) cin&gt;&gt;L-&gt;date[i]; L-&gt;len=n;&#125;void Put(SqList *&amp;La)&#123; for(int i=0;i&lt;La-&gt;len;i++) cout&lt;&lt;La-&gt;date[i]&lt;&lt;" "; &#125;void Insert(SqList *&amp;La,int add,int x)&#123; int Flag=0; while(La-&gt;date[Flag]!=add&amp;&amp;Flag&lt;La-&gt;len) Flag++; if(Flag==La-&gt;len) &#123; La-&gt;date[Flag]=x; &#125; else &#123; int i=La-&gt;len-1; while(Flag&lt;=i&amp;&amp;i&gt;=0) &#123; La-&gt;date[i+1]=La-&gt;date[i]; i--; &#125; La-&gt;date[i+1]=x; &#125; La-&gt;len++; &#125; int main()&#123; SqList *La; La=(SqList *) malloc(sizeof(SqList)); Create(La); int a,b; cin&gt;&gt;a&gt;&gt;b; Insert(La,a,b); Put(La); return 0;&#125; 敬请期待… [952] 单链表的插入操作的实现思路题目描述单链表实现数组模拟实现基操 传送门 描述 建立长度为n的单链表，在第i个结点之前插入数据元素data。 输入 第一行为自然数n，表示链式线性表的长度；第二行为n个自然数表示链式线性表各元素值；第三行为指定插入的位置i；第四行为待插入数据元素data。 输出 指定插入位置合法时候，输出插入元素后的链式线性表的所有元素，元素之间用一个空格隔开。输入不合法，输出”error!”。 样例输入123451 2 3 4 536 样例输出11 2 6 3 4 5 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct node &#123; int data; node *next;&#125; LinkNode;void Create (LinkNode *&amp;Head,int n)&#123; Head=(LinkNode *)malloc(sizeof(LinkNode)); LinkNode *p1,*p2; p1=p2=Head; for(int i=0;i&lt;n;i++) &#123; p1=(LinkNode *)malloc(sizeof(LinkNode)); cin&gt;&gt;p1-&gt;data; if(i==0) Head-&gt;next=p1; p2-&gt;next=p1; p2=p1; &#125; p2-&gt;next=NULL;&#125;void Put(LinkNode *Head)&#123; LinkNode *p1=Head-&gt;next; while(p1!=NULL) &#123; cout&lt;&lt;p1-&gt;data&lt;&lt;" "; p1=p1-&gt;next; &#125;&#125;void Insert(LinkNode *&amp;Head,int add,int x)&#123; LinkNode *p1=Head,*tem; for(int i=1;i&lt;add;i++) p1=p1-&gt;next; tem=(LinkNode *)malloc(sizeof(LinkNode)); tem-&gt;data=x; tem-&gt;next=p1-&gt;next; p1-&gt;next=tem;&#125;int main()&#123; LinkNode *Head; int len; cin&gt;&gt;len; Create(Head,len); int a,b; cin&gt;&gt;a&gt;&gt;b; if(a&lt;=0||a&gt;len) cout&lt;&lt;"error!"; else &#123; Insert(Head,a,b); Put(Head); &#125; return 0;&#125; 敬请期待… [953] 单链表的删除操作的实现思路题目描述单链表实现数组模拟实现基操 传送门 描述 建立长度为n的单链表，删除第i个结点之前的结点。 输入 第一行为自然数n，表示链式线性表的长度；第二行为n个自然数表示链式线性表各元素值；第三行为指定的删除参数i。 输出 指定删除位置合法时候，输出删除元素后的链式线性表的所有元素，元素之间用一个空格隔开。输入不合法，输出”error!”。 样例输入123451 2 3 4 536 样例输出11 3 4 5 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct node &#123; int date; node *next;&#125; LinkNode;void Create (LinkNode *&amp;Head,int n)&#123; Head=(LinkNode *)malloc(sizeof(LinkNode)); LinkNode *p1,*p2; p1=p2=Head; for(int i=0;i&lt;n;i++) &#123; p1=(LinkNode *)malloc(sizeof(LinkNode)); cin&gt;&gt;p1-&gt;date; if(i==0) Head-&gt;next=p1; p2-&gt;next=p1; p2=p1; &#125; p2-&gt;next=NULL;&#125;void Put(LinkNode *Head)&#123; LinkNode *p1=Head-&gt;next; while(p1!=NULL) &#123; cout&lt;&lt;p1-&gt;date&lt;&lt;" "; p1=p1-&gt;next; &#125;&#125;void Delete(LinkNode *&amp;Head,int x)&#123; LinkNode *p1=Head,*tem; for(int i=0;i&lt;x-2;i++) p1=p1-&gt;next; p1-&gt;next=p1-&gt;next-&gt;next;&#125;int main()&#123; LinkNode *Head; int len; cin&gt;&gt;len; Create(Head,len); int x; cin&gt;&gt;x; if(x&lt;=1||x&gt;len) cout&lt;&lt;"error!"; else &#123; Delete(Head,x); Put(Head); &#125; return 0;&#125; 敬请期待… [954] 单链表的链接题目链接题目描述单链表实现数组模拟实现 传送门 描述 建立长度为n的单链表A和长度为m的单链表B。编程实现将B表链接在A表的尾端，形成一个单链表A。数据类型指定为字符型。 输入 第一行为A表的长度n；第二行为A表中的数据元素;第三行为B表的长度m；第四行为B表中的数据元素。 输出 输出为链接好后的A表中的所有数据元素。 样例输入12344A B C D 61 2 3 4 5 6 样例输出1A B C D 1 2 3 4 5 6 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct node &#123; char date; node *next;&#125; LinkNode;void Create (LinkNode *&amp;Head)&#123; int n; cin&gt;&gt;n; Head=(LinkNode *)malloc(sizeof(LinkNode)); LinkNode *p1,*p2; p1=p2=Head; for(int i=0;i&lt;n;i++) &#123; p1=(LinkNode *)malloc(sizeof(LinkNode)); getchar(); scanf("%c",&amp;p1-&gt;date); if(i==0) Head-&gt;next=p1; p2-&gt;next=p1; p2=p1; &#125; p2-&gt;next=NULL;&#125;void Put(LinkNode *Head)&#123; LinkNode *p1=Head-&gt;next; while(p1!=NULL) &#123; cout&lt;&lt;p1-&gt;date&lt;&lt;" "; p1=p1-&gt;next; &#125;&#125;void Merge(LinkNode *&amp;Head1,LinkNode *&amp;Head2)&#123; LinkNode *p1=Head1; while(p1-&gt;next!=NULL) p1=p1-&gt;next; p1-&gt;next=Head2-&gt;next;&#125;int main()&#123; LinkNode *Head1,*Head2; Create(Head1); Create(Head2); Merge(Head1,Head2); Put(Head1); return 0;&#125; 敬请期待… [955] 单链表上查找算法的实现思路题目描述单链表实现数组模拟实现遍历大法好 传送门 描述 建立一个长度为n的带头结点的单链表，在该表中寻找第i个结点，若找到，则输出ok，否则输出error。处理数据类型为整型。 输入 第一行为链表的长度n；第二行为链表中的数据元素；第三行为要找的结点i。 输出 找到就输出ok，没找到就输出error。 样例输入123101 2 3 4 5 6 7 8 9 105 样例输出1ok 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct node &#123; int date; node *next;&#125; LinkNode;void Create (LinkNode *&amp;Head,int n)&#123; Head=(LinkNode *)malloc(sizeof(LinkNode)); LinkNode *p1,*p2; p1=p2=Head; for(int i=0;i&lt;n;i++) &#123; p1=(LinkNode *)malloc(sizeof(LinkNode)); cin&gt;&gt;p1-&gt;date; if(i==0) Head-&gt;next=p1; p2-&gt;next=p1; p2=p1; &#125; p2-&gt;next=NULL;&#125;int main()&#123; LinkNode *Head; int len; cin&gt;&gt;len; Create(Head,len); int n; cin&gt;&gt;n; n&lt;1||n&gt;len? cout&lt;&lt;"error":cout&lt;&lt;"ok"; return 0;&#125; 敬请期待… [956] 约瑟夫问题的实现思路题目描述循环链表实现数组模拟实现用循环链表，每次数到k就删除这个节点 传送门 描述 n个人围成一个圈，每个人分别标注为1、2、…、n，要求从1号从1开始报数，报到k的人出圈，接着下一个人又从1开始报数，如此循环，直到只剩最后一个人时，该人即为胜利者。例如当n=10,k=4时，依次出列的人分别为4、8、2、7、3、10，9、1、6、5，则5号位置的人为胜利者。给定n个人，请你编程计算出最后胜利者标号数。（要求用单循环链表完成。） 输入 第一行为人数n;第二行为报数k。 输出 输出最后胜利者的标号数。 样例输入12104 样例输出15 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct node &#123; int data; node *next;&#125; LinkNode;void Create (LinkNode *&amp;Head,int n)&#123; LinkNode *p1,*p2; p1=(LinkNode *)malloc(sizeof(LinkNode)); Head=p1;p2=p1; p1-&gt;data=n; for(int i=1;i&lt;n;i++) &#123; p1=(LinkNode *)malloc(sizeof(LinkNode)); p1-&gt;data=i; p2-&gt;next=p1; p2=p1; &#125; p2-&gt;next=Head;&#125;void Work(LinkNode *Head,int n,int k)&#123; LinkNode *p1=Head; while(n!=1) &#123; for(int i=1;i&lt;k;i++) p1=p1-&gt;next; //cout&lt;&lt;p1-&gt;next-&gt;data&lt;&lt;","; p1-&gt;next=p1-&gt;next-&gt;next; n--; &#125; cout&lt;&lt;p1-&gt;data;&#125;int main()&#123; LinkNode *Head; int n,k; cin&gt;&gt;n&gt;&gt;k; Create(Head,n); Work(Head,n,k); return 0;&#125; 敬请期待… [957] 逆置单链表思路题目描述单链表实现数组模拟实现头插法重新建立单链表 描述传送门 建立长度为n的单链表，然后将其数据元素逆置，即第1个元素变为最后一个元素，第2个元素变为倒数第2个元素，以此类推，最后一个元素变为第1个元素。（处理的数据类型为字符型。必须使用链表完成。） 输入 第一行为链表长度n；第二行为链表中的n个数据元素的值。 输出 逆置后的原始的值。 样例输入1210ABCDEFGHIJ 样例输出1J I H G F E D C B A 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct node &#123; char data; node *next;&#125; LinkNode;void Create (LinkNode *&amp;Head,int n)&#123; LinkNode *p1,*p2; p1=(LinkNode *)malloc(sizeof(LinkNode)); getchar(); scanf("%c",&amp;p1-&gt;data); Head=p2=p1; for(int i=0;i&lt;n;i++) &#123; p1=(LinkNode *)malloc(sizeof(LinkNode)); scanf("%c",&amp;p1-&gt;data); p2-&gt;next=p1; p2=p1; &#125; p2-&gt;next=NULL;&#125;void Put(LinkNode *Head)&#123; LinkNode *p1=Head; while(p1!=NULL) &#123; cout&lt;&lt;p1-&gt;data&lt;&lt;" "; p1=p1-&gt;next; &#125;&#125;void Reverse(LinkNode *&amp;Head,int n)&#123; LinkNode *p1=Head-&gt;next,*p2=p1-&gt;next; Head-&gt;next=NULL; for(int i=1;i&lt;n;i++) &#123; p1-&gt;next=Head; Head=p1; p1=p2; p2=p2-&gt;next; &#125;&#125;int main()&#123; LinkNode *Head; int len; cin&gt;&gt;len; Create(Head,len); Reverse(Head,len); Put(Head); return 0;&#125; 敬请期待… [960] 双向链表的操作问题思路题目描述双向链表实现数组模拟实现每次读入新节点就遍历一遍，然后找到合适的位置插进去。 传送门 描述 建立一个长度为n的带头结点的双向链表，使得该链表中的数据元素递增有序排列。（必须使用双向链表完成，数据类型为整型。） 输入 第一行：双向表的长度；第二行：链表中的数据元素。 输出 输出双向链表中的数据元素的值。 样例输入12102 4 6 3 5 8 10 21 12 9 样例输出12 3 4 5 6 8 9 10 12 21 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct node &#123; int data; node *pre; node *next;&#125; DLinkNode;void Create (DLinkNode *&amp;Head,int n)&#123; int x; DLinkNode *p1,*p2; p1=(DLinkNode *)malloc(sizeof(DLinkNode)); Head=p2=p1; Head-&gt;pre=NULL; Head-&gt;next=NULL; while(n--) &#123; cin&gt;&gt;x;p1=Head; while(p1-&gt;next!=NULL&amp;&amp;p1-&gt;next-&gt;data&lt;=x) p1=p1-&gt;next; p2=(DLinkNode *)malloc(sizeof(DLinkNode)); p2-&gt;data=x; p2-&gt;pre=p1; p2-&gt;next=p1-&gt;next; if(p1-&gt;next!=NULL) p1-&gt;next-&gt;pre=p2; p1-&gt;next=p2; &#125;&#125;void Put(DLinkNode *Head)&#123; DLinkNode *p1=Head-&gt;next; while(p1!=NULL) &#123; cout&lt;&lt;p1-&gt;data&lt;&lt;" "; p1=p1-&gt;next; &#125;&#125;int main()&#123; DLinkNode *Head; int len; cin&gt;&gt;len; Create(Head,len); Put(Head); return 0;&#125; 敬请期待… [961]进制转换问题思路题目描述链栈实现数组模拟实现每次把x%2入栈，再x/=2;最后全部出栈。 传送门 描述 建立顺序栈或链栈，编写程序实现十进制数到二进制数的转换。 输入 输入只有一行，就是十进制整数。 输出 转换后的二进制数。 样例输入110 样例输出11010 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct linknode&#123; int data; linknode *next; &#125; LinkStNode; void Init(LinkStNode *&amp;Top)&#123; Top=(LinkStNode *) malloc (sizeof(LinkStNode)); Top-&gt;next=NULL;&#125;void Push(LinkStNode *&amp;Top,int x) //入栈&#123; LinkStNode *tem; tem=(LinkStNode *) malloc (sizeof(LinkStNode)); tem-&gt;data=x; tem-&gt;next=Top-&gt;next; Top-&gt;next=tem; &#125; void Pop(LinkStNode *&amp;Top) //这道题直接写全部出栈 &#123; LinkStNode *tem; while(Top-&gt;next!=NULL) &#123; tem=Top-&gt;next; cout&lt;&lt;tem-&gt;data; Top=Top-&gt;next; &#125;&#125;int main()&#123; int x; cin&gt;&gt;x; if(!x) cout&lt;&lt;0; else &#123; LinkStNode *Top; Init(Top); while(x) &#123; Push(Top,x%2); x/=2; &#125; Pop(Top); &#125; return 0;&#125; 敬请期待… [962]括号匹配问题思路题目描述链栈实现数组模拟实现每次读入一个括号就比较是否可以和栈顶的匹配，可以就弹出栈顶元素，否则就把读入的压入栈。 传送门 描述 假设表达式中允许包含两种括号:圆括号和方括号。编写一个算法判断表达式中的括号是否正确配对。 输入 由括号构成的字符串，包含‘(’、‘)’、‘[’和‘]’。 输出 如果匹配输出YES，否则输出NO。 样例输入1[([][]())] 样例输出1YES 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct linknode&#123; char data; linknode *next; &#125; LinkStNode; void Init(LinkStNode *&amp;Top)&#123; Top=(LinkStNode *) malloc (sizeof(LinkStNode)); Top-&gt;next=NULL;&#125;void Push(LinkStNode *&amp;Top,char x) //入栈&#123; LinkStNode *tem; tem=(LinkStNode *) malloc (sizeof(LinkStNode)); tem-&gt;data=x; tem-&gt;next=Top-&gt;next; Top-&gt;next=tem; &#125; void Pop(LinkStNode *&amp;Top) &#123; LinkStNode *tem; tem=Top-&gt;next; Top-&gt;next=Top-&gt;next-&gt;next; free(tem);&#125;bool Empty(LinkStNode *&amp;Top)&#123; return (Top-&gt;next==NULL);&#125;char GetTop(LinkStNode *&amp;Top)&#123; if(Top-&gt;next!=NULL) return Top-&gt;next-&gt;data; return '0';&#125;int main()&#123; LinkStNode *Top; Init(Top); char x; while(scanf("%c",&amp;x)&amp;&amp;x!='\n') &#123; if(GetTop(Top)=='['&amp;&amp;x==']'||GetTop(Top)=='('&amp;&amp;x==')') Pop(Top); else Push(Top,x); &#125; Empty(Top) ? cout&lt;&lt;"YES":cout&lt;&lt;"NO"; return 0;&#125; 敬请期待… [963] 小偷的背包思路题目描述链栈dfs实现动态规划实现每个物品只有拿和不拿两种情况，用dfs（深度优先搜索）解决，时间复杂度如果用动态规划就只要 O(NV);01背包详解及优化 传送门 描述 设有一个背包可以放入的物品重量为S，现有n件物品，重量分别是w1，w2，w3，…，wn。问能否从这n件物品中选择若干件放入背包中，使得放入的重量之和正好为S。如果有满足条件的选择，则此背包有解，否则此背包问题无解。 输入 第一行为物品重量S（整数）；第二行为物品数量n，第三行为n件物品的重量的序列。 输出 有解就输出”yes!“，没有解就输出”no!“。 样例输入1232051 3 5 7 9 样例输出1yes! 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; int Weight[200],Mark[200],Max,Flag=0,n;typedef struct linknode&#123; int sum; linknode *next; &#125; LinkStNode; void Init(LinkStNode *&amp;Top)&#123; Top=(LinkStNode *) malloc (sizeof(LinkStNode)); Top-&gt;next=NULL; Top-&gt;sum=0;&#125;int GetTop(LinkStNode *&amp;Top)&#123; if(Top-&gt;next!=NULL) return Top-&gt;next-&gt;sum; return 0;&#125;void Push(LinkStNode *&amp;Top,int x) //入栈&#123; LinkStNode *tem; tem=(LinkStNode *) malloc (sizeof(LinkStNode)); tem-&gt;sum=x+GetTop(Top); tem-&gt;next=Top-&gt;next; Top-&gt;next=tem; &#125; void Pop(LinkStNode *&amp;Top) &#123; LinkStNode *tem; tem=Top-&gt;next; Top-&gt;next=Top-&gt;next-&gt;next; free(tem);&#125;bool Empty(LinkStNode *&amp;Top)&#123; return (Top-&gt;next==NULL);&#125;void dfs(LinkStNode *&amp;Top)&#123; if(GetTop(Top)&gt;Max||Flag) return; if(GetTop(Top)==Max) &#123;Flag=1;return;&#125; for(int i=0;i&lt;n;i++) &#123; if(!Mark[i]) &#123; Push(Top,Weight[i]); Mark[i]=1; dfs(Top); Mark[i]=0; Pop(Top); &#125; &#125;&#125;int main()&#123; LinkStNode *Top; CRL(Mark); Init(Top); cin&gt;&gt;Max&gt;&gt;n; for(int i=0;i&lt;n;i++) cin&gt;&gt;Weight[i]; dfs(Top); Flag? cout&lt;&lt;"yes!":cout&lt;&lt;"no!"; return 0;&#125; 12345678910111213141516171819202122232425#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;stdio.h&gt;using namespace std;int dp[30005]=&#123;0&#125;,Time[105]=&#123;0&#125;,V,n;int main()&#123; cin&gt;&gt;V&gt;&gt;n; for(int i=1;i&lt;=n;i++) &#123; cin&gt;&gt;Time[i]; &#125; for(int i=1;i&lt;=n;i++) for(int j=V;j&gt;0;j--) if(j&gt;=Time[i]) dp[j]=max(dp[j],dp[j-Time[i]]+Time[i]); if(dp[V]==V) cout&lt;&lt;"yes!"; else cout&lt;&lt;"no!"; return 0;&#125; [964] 数细胞思路题目描述队列实现自己实现DFS,经典四联通问题。 传送门 描述 一矩形阵列由数字0到9组成，数字1到9代表细胞,细胞的定义为沿细胞数字上下左右还是细胞数字则为同一细胞,求给定矩形阵列的细胞个数。编程需要用到的队列及其相关函数已经实现，你只需要完成count函数以及主函数即可。 1 输入 第一行输入两个整数，分别代表矩阵的行和列 输入m * n的矩阵，由数字0到9组成。 输出 细胞个数。 样例输入123454 101 2 3 4 5 1 1 1 6 7 1 0 3 4 5 6 1 5 1 02 0 4 5 6 6 1 6 7 10 0 6 0 6 6 1 0 8 9 样例输出11 1没看懂题目的代码 敬请期待… [965]循环队列思路题目描述链栈实现数组模拟实现基操 传送门 描述 描述根据给定的空间构造顺序循环队列，规定队满处理方法为少用一个元素空间。例如，给定5个元素空间构造循环队列，则只能存放4个元素。试根据入队及出队操作判断队列最后的元素存放情况，并输出最后队列中的元素值，即完成给定入队及出列操作后一次性全部出队的元素值。要求采用顺序队列完成，少用一个存储空间的方法区分队列的空和满。根据给定的空间构造顺序循环队列，规定队满处理方法为少用一个元素空间。例如，给定5个元素空间构造循环队列，则只能存放4个元素。试根据入队及出队操作判断队列最后的元素存放情况，并输出最后队列中的元素值，即完成给定入队及出列操作后一次性全部出队的元素值。要求采用顺序队列完成，少用一个存储空间的方法区分队列的空和满。 输入 输入的第一行为一个自然数n，表示要求构造的顺序循环队列空间数。 第二行为操作次k，接下来k行为出队入队操作，每行各代表一次操作。入队用in表示，出队用out表示，如果是入队，则in隔一空格后为一整数，表示入队元素值。 输出 输出完成所有入队出队操作后，一次性出队元素。用一个空格隔开。可以假定队在完成所有操作后不为空。 样例输入12345678947in 1in 2in 5in 6outoutin 8 样例输出15 8 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xfffffff#define NewNode (SqQueue *)malloc (sizeof(SqQueue))typedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7;struct SqQueue&#123; int data[500]; int front,rear,MaxSize;&#125;;void Init(SqQueue *&amp;q)&#123; q=NewNode; cin&gt;&gt;q-&gt;MaxSize; q-&gt;front=q-&gt;rear=0;&#125;bool Empty(SqQueue *&amp;q)&#123; return (q-&gt;front==q-&gt;rear);&#125;bool Into(SqQueue *&amp;q,int x)&#123; if((q-&gt;rear+1)%q-&gt;MaxSize==q-&gt;front) return false; q-&gt;rear=(q-&gt;rear+1)%q-&gt;MaxSize; q-&gt;data[q-&gt;rear]=x; return true;&#125;bool deQueue(SqQueue *&amp;q,int &amp;tem)&#123; if(q-&gt;front==q-&gt;rear) return false; q-&gt;front=(q-&gt;front+1)%q-&gt;MaxSize; tem=q-&gt;data[q-&gt;front]; return true;&#125;int main()&#123; SqQueue * q; Init(q); int n,tem,x;char a[10]; cin&gt;&gt;n; Output(n); return 0;&#125; 敬请期待… [966] 打印杨辉三角形思路题目描述循环队列实现数组模拟实现每次都从队首去两个，然后把和入队，然后输出，详见代码。 传送门 描述 杨辉三角形具有如下特征：1、每行数字左右对称，由1开始逐渐变大，然后变小，回到1。2、第n行的数字个数为n个。3、第n行数字和为2^(n－1)。4、每个数字等于上一行的左右两个数字之和。可用此性质写出整个帕斯卡三角形。5、将第2n+1行第1个数，跟第2n+2行第3个数、第2n+3行第5个数……连成一线，这些数的和是第2n个斐波那契数。将第2n行第2个数，跟第2n+1行第4个数、第2n+2行第6个数……这些数之和是第2n-1个斐波那契数。6、第n行的第1个数为1，第二个数为1×(n-1)，第三个数为1×(n-1)×（n-2）/2，第四个数为1×(n-1)×（n-2）/2×（n-3）/3…依此类推。例如7阶杨辉三角形如下： 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 1 5 10 10 5 1 1 6 15 20 15 6 1 要求：利用循环队列，编程实现打印杨辉三角形。（n在0-12之间取值） 输入 输入要打印的杨辉三角形的阶n。 输出 打印出n阶杨辉三角形。 样例输入17 样例输出123456711 11 2 11 3 3 11 4 6 4 11 5 10 10 5 11 6 15 20 15 6 1 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xfffffff#define NewNode (SqQueue *)malloc (sizeof(SqQueue))typedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7;struct SqQueue&#123; int data[500]; int front,rear,MaxSize;&#125;;void Init(SqQueue *&amp;q)&#123; q=NewNode; q-&gt;front=q-&gt;rear=0; q-&gt;MaxSize=500;&#125;bool Empty(SqQueue *&amp;q)&#123; return (q-&gt;front==q-&gt;rear);&#125;int GetSum(SqQueue *&amp;q)&#123; return (q-&gt;data[q-&gt;front+1]+q-&gt;data[q-&gt;front+2]); &#125; bool Into(SqQueue *&amp;q,int x)&#123; if((q-&gt;rear+1)%q-&gt;MaxSize==q-&gt;front) return false; q-&gt;rear=(q-&gt;rear+1)%q-&gt;MaxSize; q-&gt;data[q-&gt;rear]=x; return true;&#125;bool deQueue(SqQueue *&amp;q,int &amp;tem)&#123; if(q-&gt;front==q-&gt;rear) return false; q-&gt;front=(q-&gt;front+1)%q-&gt;MaxSize; tem=q-&gt;data[q-&gt;front]; return true;&#125;int main()&#123; SqQueue * q; Init(q); int n; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) &#123; for(int j=1;j&lt;=i-2;j++) &#123; int sum=GetSum(q); if(!Into(q,sum)) break; int e; if(!deQueue(q,e)) break; &#125; if(Into(q,1)) &#123; for(int j=1;j&lt;=i;j++) cout&lt;&lt;q-&gt;data[q-&gt;front+j]&lt;&lt;" "; cout&lt;&lt;endl; &#125; &#125; return 0;&#125; 敬请期待… [971] 统计利用先序遍历创建的二叉树的深度思路题目描述二叉树实现只用一个变量实现递归查找，从一个节点开始向下最深的深度就是deep(i)=1+max(deep(左儿子),deep(右儿子))。 描述传送门 利用先序递归遍历算法创建二叉树并计算该二叉树的深度。先序递归遍历建立二叉树的方法为：按照先序递归遍历的思想将对二叉树结点的抽象访问具体化为根据接收的数据决定是否产生该结点从而实现创建该二叉树的二叉链表存储结构。约定二叉树结点数据为单个大写英文字符。当接收的数据是字符”#”时表示该结点不需要创建，否则创建该结点。最后再统计创建完成的二叉树的深度（使用二叉树的后序遍历算法）。需要注意输入数据序列中的”#”字符和非”#”字符的序列及个数关系，这会最终决定创建的二叉树的形态。 输入 输入为先序遍历二叉树结点序列。 输出 对应的二叉树的深度。 样例输入12345A##ABC####AB##C## ABCD###E#F##G## A##B## 样例输出1234513241 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define NewNode (TreeNode *) malloc (sizeof(TreeNode))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct node&#123; char data; node *Lchild,*Rchild;&#125; TreeNode;TreeNode *Built()&#123; TreeNode *T; char ch; cin&gt;&gt;ch; if(ch=='#') T=NULL; else &#123; T=NewNode; T-&gt;data=ch; T-&gt;Lchild=Built(); T-&gt;Rchild=Built(); &#125; return T;&#125;int Deep(TreeNode *&amp;Tem)&#123; if(Tem==NULL) return 0; return 1+max(Deep(Tem-&gt;Lchild),Deep(Tem-&gt;Rchild));&#125;int main()&#123; TreeNode *Root; Root=Built(); cout&lt;&lt;Deep(Root); return 0;&#125; 123456789101112131415#include&lt;bits/stdc++.h&gt;using namespace std; char x;int slove()&#123; if(scanf("%c",&amp;x)&amp;&amp;x=='#') return 0; return 1+max(slove(),slove()); &#125; int main()&#123; cout&lt;&lt;slove(); return 0;&#125; [972] 统计利用先序遍历创建的二叉树的宽度思路题目描述二叉树实现简单写法跟上题差不多 传送门 描述 利用先序递归遍历算法创建二叉树并计算该二叉树的宽度。先序递归遍历建立二叉树的方法为：按照先序递归遍历的思想将对二叉树结点的抽象访问具体化为根据接收的数据决定是否产生该结点从而实现创建该二叉树的二叉链表存储结构。约定二叉树结点数据为单个大写英文字符。当接收的数据是字符”#”时表示该结点不需要创建，否则创建该结点。最后再统计创建完成的二叉树的宽度（是指二叉树每层节点数的最大值）。需要注意输入数据序列中”#”字符和非”#”字符的序列及个数关系，这会最终决定创建的二叉树的形态。 输入 输入为接受键盘输入的由大写英文字符和”#”字符构成的一个字符串（用于创建对应的二叉树）。 输出 输出该用例对应的二叉树的宽度。 样例输入12345A##ABC####AB##C##ABCD###EF##G###A##B## 样例输出1234511231 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define NewNode (TreeNode *) malloc (sizeof(TreeNode))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; int Count[100]=&#123;0&#125;,Max=0;typedef struct node&#123; char data; node *Lchild,*Rchild;&#125; TreeNode;TreeNode *Built()&#123; TreeNode *T; char ch; cin&gt;&gt;ch; if(ch=='#') T=NULL; else &#123; T=NewNode; T-&gt;data=ch; T-&gt;Lchild=Built(); T-&gt;Rchild=Built(); &#125; return T;&#125;void Num(TreeNode *&amp;T,int i)&#123; if(T!=NULL) &#123; Count[i]++;//第i层结点数+1 Max=max(Max,Count[i]); Num(T-&gt;Lchild,i+1);//T的左孩子，层数+1 Num(T-&gt;Rchild,i+1);//T的右孩子，层数+1 &#125;&#125;int main()&#123; TreeNode *Root; Root=Built(); Num(Root,1); cout&lt;&lt;Max; return 0;&#125; 12345678910111213141516171819#include&lt;bits/stdc++.h&gt;using namespace std; char x;int Book[100]=&#123;0&#125;,Max=0;void slove(int n)&#123; if(scanf("%c",&amp;x)&amp;&amp;x=='#') return ; Book[n]++; Max=max(Book[n],Max); slove(n+1); slove(n+1); &#125; int main()&#123; slove(1); cout&lt;&lt;Max; return 0;&#125; [973] 统计利用先序遍历创建的二叉树叶结点的个数思路题目描述二叉树实现数组模拟实现这题没看懂样例，但是用[971]的代码直接过了 描述 传送门 输入 利用先序递归遍历算法创建二叉树并计算该二叉树叶结点的个数。先序递归遍历建立二叉树的方法为：按照先序递归遍历的思想将对二叉树结点的抽象访问具体化为根据接收的数据决定是否产生该结点从而实现创建该二叉树的二叉链表存储结构。约定二叉树结点数据为单个大写英文字符。当接收的数据是字符”#”时表示该结点不需要创建，否则创建该结点。最后再统计创建完成的二叉树叶结点的个数。需要注意输入数据序列中的”#”字符和非”#”字符的序列及个数关系，这会最终决定创建的二叉树的形态。 输出 接受键盘输入的由大写英文字符和”#”字符构成的一个字符串（用于创建对应的二叉树）。 样例输入1234567#A##ABC####AB##C##ABCD###EF##G###A##B###A 样例输出12345670112310 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define NewNode (TreeNode *) malloc (sizeof(TreeNode))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; int Count[100]=&#123;0&#125;,Max=0;typedef struct node&#123; char data; node *Lchild,*Rchild;&#125; TreeNode;TreeNode *Built()&#123; TreeNode *T; char ch; cin&gt;&gt;ch; if(ch=='#') T=NULL; else &#123; T=NewNode; T-&gt;data=ch; T-&gt;Lchild=Built(); T-&gt;Rchild=Built(); &#125; return T;&#125;void Num(TreeNode *&amp;T,int i)&#123; if(T!=NULL) &#123; Count[i]++;//第i层结点数+1 Max=max(Max,Count[i]); Num(T-&gt;Lchild,i+1);//T的左孩子，层数+1 Num(T-&gt;Rchild,i+1);//T的右孩子，层数+1 &#125;&#125;int main()&#123; TreeNode *Root; Root=Built(); Num(Root,1); cout&lt;&lt;Max; return 0;&#125; 敬请期待… [975] 统计利用先序遍历创建的二叉树的度为2的结点个数思路题目描述二叉树实现简单写法左右儿子都！=NULL,ans++; 传送门 描述 利用先序递归遍历算法创建二叉树并计算该二叉树度为2结点的个数。先序递归遍历建立二叉树的方法为：按照先序递归遍历的思想将对二叉树结点的抽象访问具体化为根据接收的数据决定是否产生该结点从而实现创建该二叉树的二叉链表存储结构。约定二叉树结点数据为单个大写英文字符。当接收的数据是字符”#”时表示该结点不需要创建，否则创建该结点。最后再统计创建完成的二叉树度为2的结点个数。需要注意输入数据序列中的”#”字符和非”#”字符的序列及个数关系，这会最终决定创建的二叉树的形态。 输入 接受键盘输入的由大写英文字符和”#”字符构成的一个字符串（用于创建对应的二叉树）。 输出 输出该用例对应的二叉树度为2的结点个数。 样例输入1234567#A##ABC####AB##C##ABCD###EF##G##H##A##B###A 样例输出12345670001300 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define NewNode (TreeNode *) malloc (sizeof(TreeNode))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct node&#123; char data; node *Lchild,*Rchild;&#125; TreeNode;TreeNode *Built()&#123; TreeNode *T; char ch; cin&gt;&gt;ch; if(ch=='#') T=NULL; else &#123; T=NewNode; T-&gt;data=ch; T-&gt;Lchild=Built(); T-&gt;Rchild=Built(); &#125; return T;&#125;int Count(TreeNode *&amp;Tem)&#123; if(Tem==NULL) return 0; if((Tem-&gt;Lchild==NULL)^(Tem-&gt;Rchild==NULL)) return 1+Count(Tem-&gt;Lchild)+Count(Tem-&gt;Rchild); return (Count(Tem-&gt;Lchild)+Count(Tem-&gt;Rchild)); &#125;int main()&#123; TreeNode *Root; Root=Built(); cout&lt;&lt;Count(Root); return 0;&#125; 123456789101112131415161718192021#include&lt;bits/stdc++.h&gt;using namespace std; char x;int ans=0;bool slove()&#123; if(scanf("%c",&amp;x)&amp;&amp;(x=='#'||x=='\n')) return false; int a=slove(); int b=slove(); if(a&amp;&amp;b) ans++; return true; &#125; int main()&#123; slove(); cout&lt;&lt;ans; return 0;&#125; [976] 统计利用先序遍历创建的二叉树的度为1的结点个数思路题目描述二叉树实现数组模拟实现(左儿子==NULL)^(右儿子==NULL)，ans++ 传送门 描述 利用先序递归遍历算法创建二叉树并计算该二叉树度为1结点的个数。先序递归遍历建立二叉树的方法为：按照先序递归遍历的思想将对二叉树结点的抽象访问具体化为根据接收的数据决定是否产生该结点从而实现创建该二叉树的二叉链表存储结构。约定二叉树结点数据为单个大写英文字符。当接收的数据是字符”#”时表示该结点不需要创建，否则创建该结点。最后再统计创建完成的二叉树度为1的结点个数。需要注意输入数据序列中的”#”字符和非”#”字符的序列及个数关系，这会最终决定创建的二叉树的形态。 输入 输入为接受键盘输入的由大写英文字符和”#”字符构成的一个字符串（用于创建对应的二叉树）。 输出 每个用例用一行输出该用例对应的二叉树度为1的结点个数。 样例输入1234567#A##ABC####AB##C##ABCD###EF##G###A##B###A 样例输出12345670020200 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define NewNode (TreeNode *) malloc (sizeof(TreeNode))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct node&#123; char data; node *Lchild,*Rchild;&#125; TreeNode;TreeNode *Built()&#123; TreeNode *T; char ch; cin&gt;&gt;ch; if(ch=='#') T=NULL; else &#123; T=NewNode; T-&gt;data=ch; T-&gt;Lchild=Built(); T-&gt;Rchild=Built(); &#125; return T;&#125;int Count(TreeNode *&amp;Tem)&#123; if(Tem==NULL) return 0; if((Tem-&gt;Lchild==NULL)^(Tem-&gt;Rchild==NULL)) return 1+Count(Tem-&gt;Lchild)+Count(Tem-&gt;Rchild); return (Count(Tem-&gt;Lchild)+Count(Tem-&gt;Rchild)); &#125;int main()&#123; TreeNode *Root; Root=Built(); cout&lt;&lt;Count(Root); return 0;&#125; 敬请期待… [977] 统计利用先序遍历创建的二叉树中的空链域个数思路题目描述二叉树实现数组模拟实现跟前面几道差不多 传送门 描述 利用先序递归遍历算法创建二叉树并计算该二叉树中的空链域个数。先序递归遍历建立二叉树的方法为：按照先序递归遍历的思想将对二叉树结点的抽象访问具体化为根据接收的数据决定是否产生该结点从而实现创建该二叉树的二叉链表存储结构。约定二叉树结点数据为单个大写英文字符。当接收的数据是字符”#”时表示该结点不需要创建，否则创建该结点。最后再统计创建完成的二叉树中的空链域个数。需要注意输入数据序列中的”#”字符和非”#”字符的序列及个数关系，这会最终决定创建的二叉树的形态。 输入 输入为接受键盘输入的由大写英文字符和”#”字符构成的一个字符串（用于创建对应的二叉树）。 输出 输出该用例对应的二叉树中的空链域个数。 样例输入123456A##ABC####AB##C##ABCD###EF##G###A##B###A 样例输出123456244821 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define NewNode (TreeNode *) malloc (sizeof(TreeNode))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct node&#123; char data; node *Lchild,*Rchild;&#125; TreeNode;TreeNode *Built()&#123; TreeNode *T; char ch; cin&gt;&gt;ch; if(ch=='#') T=NULL; else &#123; T=NewNode; T-&gt;data=ch; T-&gt;Lchild=Built(); T-&gt;Rchild=Built(); &#125; return T;&#125;int Count(TreeNode *&amp;Tem)&#123; if(Tem==NULL) return 1; return (Count(Tem-&gt;Lchild)+Count(Tem-&gt;Rchild)); &#125;int main()&#123; TreeNode *Root; Root=Built(); cout&lt;&lt;Count(Root); return 0;&#125; 敬请期待… [978] 输出利用先序遍历创建的二叉树的中序遍历序列思路题目描述二叉树实现数组模拟实现修改一下递归顺序。 传送门 描述 利用先序递归遍历算法创建二叉树并输出该二叉树的中序遍历序列。先序递归遍历建立二叉树的方法为：按照先序递归遍历的思想将对二叉树结点的抽象访问具体化为根据接收的数据决定是否产生该结点从而实现创建该二叉树的二叉链表存储结构。约定二叉树结点数据为单个大写英文字符。当接收的数据是字符”#”时表示该结点不需要创建，否则创建该结点。最后再输出创建完成的二叉树的中序遍历序列。需要注意输入数据序列中的”#”字符和非”#”字符的序列及个数关系，这会最终决定创建的二叉树的形态。 输入 输入为接受键盘输入的由大写英文字符和”#”字符构成的一个字符串（用于创建对应的二叉树）。 输出 对应的二叉树的中序遍历序列。 样例输入12345A##ABC####AB##C##ABCD###EF##G###A##B## 样例输出12345ACBABACDCBFEGAA 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define NewNode (TreeNode *) malloc (sizeof(TreeNode))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct node&#123; char data; node *Lchild,* Rchild;&#125; TreeNode;TreeNode *Built()&#123; TreeNode *T; char ch; cin&gt;&gt;ch; if(ch=='#') T=NULL; else &#123; T=NewNode; T-&gt;data=ch; T-&gt;Lchild=Built(); T-&gt;Rchild=Built(); &#125; return T;&#125;void Put(TreeNode *&amp;Tem)&#123; if(Tem==NULL) return; Put(Tem-&gt;Lchild); cout&lt;&lt;Tem-&gt;data; Put(Tem-&gt;Rchild); &#125; int main()&#123; TreeNode *Root; Root=Built(); Put(Root); return 0;&#125; 敬请期待… [979] 输出利用先序遍历创建的二叉树的后序遍历序列思路题目描述二叉树实现数组模拟实现修改一下递归顺序。 传送门 描述 利用先序递归遍历算法创建二叉树并输出该二叉树的后序遍历序列。先序递归遍历建立二叉树的方法为：按照先序递归遍历的思想将对二叉树结点的抽象访问具体化为根据接收的数据决定是否产生该结点从而实现创建该二叉树的二叉链表存储结构。约定二叉树结点数据为单个大写英文字符。当接收的数据是字符”#”时表示该结点不需要创建，否则创建该结点。最后再输出创建完成的二叉树的后序遍历序列。需要注意输入数据序列中的”#”字符和非”#”字符的序列及个数关系，这会最终决定创建的二叉树的形态。 输入 输入为接受键盘输入的由大写英文字符和”#”字符构成的一个字符串（用于创建对应的二叉树）。 输出 对应的二叉树的后序遍历序列。 样例输入12345A##ABC####AB##C##ABCD###EF##G###A##B## 样例输出12345ACBABCADCFGEBAA 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define NewNode (TreeNode *) malloc (sizeof(TreeNode))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct node&#123; char data; node *Lchild,*Rchild;&#125; TreeNode;TreeNode *Built()&#123; TreeNode *T; char ch; cin&gt;&gt;ch; if(ch=='#') T=NULL; else &#123; T=NewNode; T-&gt;data=ch; T-&gt;Lchild=Built(); T-&gt;Rchild=Built(); &#125; return T;&#125;void Put(TreeNode *&amp;Tem)&#123; if(Tem==NULL) return; Put(Tem-&gt;Lchild); Put(Tem-&gt;Rchild); cout&lt;&lt;Tem-&gt;data; &#125; int main()&#123; TreeNode *Root; Root=Built(); Put(Root); return 0;&#125; 敬请期待… [1027]舞伴问题思路题目描述队列实现数组模拟实现每次分别取两个队列的队首元素，然后放到队尾。 传送门 描述 假设在周末舞会上，男士们和女士们进入舞厅时，各自排成一队。跳舞开始时，依次从男队和女队的队头上各出一人配成舞伴。若两队初始人数不相同，则较长的那一队中未配对者等待下一轮舞曲。要求编写程序实现舞伴问题。 输入 输入一共5行，第一行是男生人数m；第二行依次是男生的姓名；第三行是女士的人数n；第四行依次是女士的姓名；第五行是跳舞的轮数。 输出 配对的男士和女士的姓名。 样例输入123455A B C D E3F G H2 样例输出1B G 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct qnode&#123; char data; struct qnode *next;&#125;QNode;typedef struct&#123; QNode * front; QNode * rear;&#125;Head;void Init(Head *&amp;q)&#123; q=(Head *) malloc (sizeof(Head)); q-&gt;front=q-&gt;rear=NULL;&#125;bool Empty(Head *&amp;q)&#123; return (q-&gt;rear==NULL);&#125;void In(Head *&amp;q,char &amp;x)&#123; QNode *p; p=(QNode *) malloc(sizeof(QNode)); p-&gt;data=x; p-&gt;next=NULL; if(q-&gt;rear==NULL) q-&gt;front=q-&gt;rear=p; else &#123; q-&gt;rear-&gt;next=p; q-&gt;rear=p; &#125;&#125;bool Out(Head *&amp;q,char &amp;x)&#123; QNode *T; if(q-&gt;rear==NULL) return false; t=q-&gt;front; if(q-&gt;front==q-&gt;rear) q-&gt;front=q-&gt;rear=NULL; else q-&gt;front=q-&gt;front-&gt;next; x=t-&gt;data; free(t); return true;&#125;int main()&#123; Head *q1; Head *q2; Init(q1); Init(q2); int n;char x,a,b;; cin&gt;&gt;n; while(n--) &#123; cin&gt;&gt;x; In(q1,x); &#125; cin&gt;&gt;n; while(n--) &#123; cin&gt;&gt;x; In(q2,x); &#125; cin&gt;&gt;n; while(n--) &#123; Out(q1,a); Out(q2,b); In(q1,a); In(q2,b); &#125; cout&lt;&lt;a&lt;&lt;" "&lt;&lt;b; return 0;&#125; 敬请期待… [1028]特定字符序列的判断思路题目描述链栈实现数组模拟实现去掉’@’就和括号匹配问题一样了。 传送门 描述 编写一程序，识别依次读入的一个以“#”为结束符的字符序列是否为形如“序列1@序列2”模式的字符序列。期中序列1和序列2中都不含字符“@”，且序列2是序列1的逆序列。例如“a+b@b+a”是满足条件的序列字符，而“1+3@3-1”则不是。 输入 一个以“#”结束的字符序列。 输出 是满足条件的字符序列输出“yes!”；否则输出“no!”。 样例输入1a+b@b+a# 样例输出1yes! 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct linknode&#123; char data; linknode *next; &#125; LinkStNode; void Init(LinkStNode *&amp;Top)&#123; Top=(LinkStNode *) malloc (sizeof(LinkStNode)); Top-&gt;next=NULL;&#125;void Push(LinkStNode *&amp;Top,char x) //入栈&#123; LinkStNode *tem; tem=(LinkStNode *) malloc (sizeof(LinkStNode)); tem-&gt;data=x; tem-&gt;next=Top-&gt;next; Top-&gt;next=tem; &#125; void Pop(LinkStNode *&amp;Top) &#123; LinkStNode *tem; tem=Top-&gt;next; Top-&gt;next=Top-&gt;next-&gt;next; free(tem);&#125;bool Empty(LinkStNode *&amp;Top)&#123; return (Top-&gt;next==NULL);&#125;char GetTop(LinkStNode *&amp;Top)&#123; if(Top-&gt;next!=NULL) return Top-&gt;next-&gt;data; return '0';&#125;int main()&#123; LinkStNode *Top; Init(Top); char x; while(scanf("%c",&amp;x)&amp;&amp;x!='\n') &#123; if(GetTop(Top)=='['&amp;&amp;x==']'||GetTop(Top)=='('&amp;&amp;x==')'||GetTop(Top)=='&#123;'&amp;&amp;x=='&#125;') Pop(Top); else Push(Top,x); &#125; Empty(Top) ? cout&lt;&lt;"YES":cout&lt;&lt;"NO"; return 0;&#125; 敬请期待… [1035] 定位顺序表中的最大和最小值思路题目描述顺序表实现数组模拟实现… 传送门 描述 建立长度为n的顺序表，在表中找出最大值和最小值元素所在的位置。 输入 第一行为顺序表的长度n；第二行为顺序表中的数据元素； 输出 第一行为最大值的位置；第二行为最小值的位置。 样例输入1271 2 3 4 5 6 7 样例输出12Lmax=6Lmin=0 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct &#123; int data[100]; int len;&#125; SqList;void Create (SqList *&amp;L)&#123; int n; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) cin&gt;&gt;L-&gt;data[i]; L-&gt;len=n;&#125;void Find(SqList *&amp;L,int &amp;Min,int &amp;Max)&#123; for(int i=0;i&lt;L-&gt;len;i++) &#123; if(L-&gt;data[Min]&gt;L-&gt;data[i]) Min=i; if(L-&gt;data[Max]&lt;L-&gt;data[i]) Max=i; &#125;&#125;int main()&#123; SqList *La; int Min,Max; La=(SqList *) malloc(sizeof(SqList)); Create(La); Find(La,Min,Max); cout&lt;&lt;"Lmax="&lt;&lt;Max&lt;&lt;"\r\n"; cout&lt;&lt;"Lmin="&lt;&lt;Min; return 0;&#125; 敬请期待… [1036] 寻找整数序列的主元素思路题目描述顺序表实现数组模拟实现算法的策略是从前向后扫描数组元素，标记出一个可能成为主元素的元素Num。 然后重新计数， 确认 Num 是否是主元素。算法可分为以下两步： 选取候选的主元素：依次扫描所给数组中的每个整数，将第一个遇到的整数 Num 保存到 c 中，记录 Num 的出现次数为 1；若遇到的下一个整数仍等于 Num，则计数加 1，否则计数减 1； 当计数减到 0 时，将遇到的下一个整数保存到 c 中，计数重新记为 1，开始新一轮计数，即从当前位置开始重复上述过程，直到扫描完全部数组元素。 判断 c 中元素是否是真正的主元素：再次扫描该数组，统计 c 中元素出现的次数，若大于 n/2，则为主元素；否则，序列中不存在主元素。 传送门 描述 已知一个整数序列$A=（a_0，a_1，…a_n）$，如果其中有一个元素的出现次数超过n/2，就称该元素为A的主元素，否则就称整数序列没有主元素。例如A=（0，5，5，3，5，7，5，5），则5为主元素。A=（0，5，5，3，5，1，5，7），则A中没有主元素。要求编写程序实现寻找给定整数序列的主元素，如果找到，则输出主元素。如果没有找到，则输出-1。 输入 第一行为整数序列的个数n第二行为一个整数序列。 输出 如果找到主元素，输出主元素的值，否则输出-1。 样例输入1280 5 5 3 5 7 5 5 样例输出15 把数组模拟的改成顺序表就行了。 1234567891011121314151617181920212223242526272829303132333435363738394041#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; int a[200];int main()&#123; int n,ans,Count=0; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) &#123; cin&gt;&gt;a[i]; if(!Count) &#123; ans=a[i]; Count++; &#125; else if(a[i]==ans) Count++; else Count--; &#125; Count=0; for(int i=0;i&lt;n;i++) if(a[i]==ans) Count++; Count&gt;n/2 ? cout&lt;&lt;ans:cout&lt;&lt;-1; return 0;&#125; [1037]集合的并运算的实现思路题目描述顺序表实现数组模拟实现遍历大法好 传送门 描述 假设有两个集合 A 和 B 分别用两个线性表 LA 和 LB 表示，即线性表中的数据元素即为集合中的成员。编程实现集合A和集合B的并运算。 输入 第一行为集合A的数据元素个数n 第二行输入n个集合A的数据元素 第三行为集合B的数据元素的个数； 第四行输入m个集合B的数据元素。 输出 第一行为A和B的并集. 样例输入123480 5 6 3 8 7 9 1071 3 4 7 8 9 5 样例输出10 5 6 3 8 7 9 10 1 4 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct &#123; int date[100]; int len;&#125; SqList;void Create (SqList *&amp;L)&#123; int n; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) cin&gt;&gt;L-&gt;date[i]; L-&gt;len=n;&#125;void Merge(SqList *&amp;La,SqList *&amp;Lb)&#123; for(int i=0;i&lt;Lb-&gt;len;i++) &#123; int j=0; for(;j&lt;La-&gt;len;j++) if(La-&gt;date[j]==Lb-&gt;date[i]) break; if(j==La-&gt;len) &#123; La-&gt;date[j]=Lb-&gt;date[i]; La-&gt;len++; &#125; &#125;&#125;void Put(SqList *&amp;La)&#123; for(int i=0;i&lt;La-&gt;len;i++) cout&lt;&lt;La-&gt;date[i]&lt;&lt;" "; &#125;int main()&#123; SqList *La,*Lb; La=(SqList *) malloc(sizeof(SqList)); Lb=(SqList *) malloc(sizeof(SqList)); Create(La); Create(Lb); Merge(La,Lb); Put(La); return 0;&#125; 敬请期待… [1038]顺序表中重复数据的删除思路题目描述顺序表实现数组模拟实现遍历，找到就删。注意不要每一次都从头找。 传送门 描述 将存储在顺序表中的长度为n的线性表中指定的数据全部删除。 输入 第一行为顺序表的长度n； 第二行为顺序表中的数据元素； 第三行为指定要删除的元素值。 输出 如果表不空，输出删除指定值后的线性表；如果删除后表空，则输出-1。 样例输入123811 22 33 44 44 55 44 6644 样例输出111 22 33 55 66 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct &#123; int date[100]; int len;&#125; SqList;void Create (SqList *&amp;L)&#123; int n; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) cin&gt;&gt;L-&gt;date[i]; L-&gt;len=n;&#125;void Put(SqList *&amp;La)&#123; for(int i=0;i&lt;La-&gt;len;i++) cout&lt;&lt;La-&gt;date[i]&lt;&lt;" "; &#125;bool Find(SqList *&amp;L,int x,int &amp;li)&#123; for(int i=li;i&lt;L-&gt;len;i++) if(L-&gt;date[i]==x) &#123; li=i; return true; &#125; return false;&#125;void Delete(SqList *&amp;L,int x)&#123; for(int i=x;i&lt;L-&gt;len;i++) L-&gt;date[i]=L-&gt;date[i+1]; L-&gt;len--;&#125;int main()&#123; SqList *La; La=(SqList *) malloc(sizeof(SqList)); Create(La); int x,li=0; cin&gt;&gt;x; while(Find(La,x,li)) &#123; Delete(La,li); &#125; if(La-&gt;len==0) cout&lt;&lt;-1; else Put(La); return 0;&#125; 敬请期待… [1039] 单链表中信息的分类思路题目描述顺序表实现数组模拟实现… 传送门 描述 已知L为设有头结点的单链表中第一个结点的指针，每个结点数据域存放一个字符，该字符可能是英文字母字符或数字字符或其他字符。编写程序构造三个以带头结点的单循环链表表示的线性表，使每个表中只含同一类字符，最后输出链表中的信息。 输入 链表中的数据元素 输出 第一行为数字链表中的信息； 第二行为英文字母字符链表中的信息； 第三行为其它字符链表中的信息。 样例输入1abc123@$12 样例输出12312312abc@$ 是我菜了，没看懂要求，所以直接用数组做的。 1234567891011121314151617181920212223242526272829303132333435#include&lt;stdio.h&gt;#include&lt;string.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;#include&lt;algorithm&gt;#include&lt;iostream&gt;#include&lt;stack&gt;#include&lt;map&gt;using namespace std;int main()&#123; char str[1005]; cin &gt;&gt; str; int k, l, m; k = l = m = 0; char str1[500], str2[500], str3[500]; for (int i = 0; i &lt; strlen(str); i++) &#123; if (str[i] &gt;= '0'&amp;&amp;str[i] &lt;= '9') &#123; str1[k++] = str[i]; &#125; else if ((str[i] &gt;= 'a'&amp;&amp;str[i] &lt;= 'z')|| ( str[i] &gt;= 'A'&amp;&amp;str[i]&lt;='Z') ) &#123; str2[l++] = str[i]; &#125; else &#123; str3[m++] = str[i]; &#125; &#125; str1[k] = str2[l] = str3[m] = '\0'; cout &lt;&lt; str1 &lt;&lt; endl &lt;&lt; str2 &lt;&lt; endl &lt;&lt; str3 &lt;&lt; endl; return 0;&#125; [1040] 一元多项式加法运算的实现思路题目描述链表实现数组模拟实现插入排序测试数据没有答案为0的情况，我就没考虑这种情况。 传送门 描述 编程实现一元多项式的加法运算。（要求用链表实现） 输入 第一个一元多项式A； 第二个一元多项式B。 以（0，0）作为输入结束。 输出 多项式A和多项式B的和。 样例输入125,3 7,8 9,15 0,02,0 6,3 -7,8 0,0 样例输出12x^0+11x^3+9x^15 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct node &#123; int xishu; int cifang; node *next;&#125; LinkNode;void Init(LinkNode *&amp;Head)&#123; Head=(LinkNode *)malloc(sizeof(LinkNode)); Head-&gt;next=NULL;&#125;void Create (LinkNode *&amp;Head)&#123; LinkNode *p1,*p2; p1=Head; int c,x; while(scanf("%d,%d",&amp;c,&amp;x)&amp;&amp;(c||x)) &#123; p1=Head; while(p1-&gt;next!=NULL&amp;&amp;p1-&gt;next-&gt;cifang&lt;x) p1=p1-&gt;next; if(p1-&gt;next==NULL||p1-&gt;next-&gt;cifang&gt;x) &#123; p2=(LinkNode *)malloc(sizeof(LinkNode)); p2-&gt;cifang=x; p2-&gt;xishu=c; p2-&gt;next=p1-&gt;next; p1-&gt;next=p2; &#125; else p1-&gt;next-&gt;xishu+=c; &#125;&#125;void Put(LinkNode *Head)&#123; LinkNode *p1=Head-&gt;next; while(p1!=NULL) &#123; if(p1-&gt;xishu==0) &#123; p1=p1-&gt;next; continue; &#125; if(p1!=Head-&gt;next) cout&lt;&lt;"+"; cout&lt;&lt;p1-&gt;xishu&lt;&lt;"x^"&lt;&lt;p1-&gt;cifang; p1=p1-&gt;next; &#125;&#125;int main()&#123; LinkNode *Head; Init(Head); Create(Head); Create(Head); Put(Head); return 0;&#125; 敬请期待… [1042] 中缀表达式转换为后缀表达式思路题目描述链栈实现数组模拟实现读入不是’+’,’-‘,’*’,’-‘，就入栈再出栈，否则入栈，当遇到’)’时，将栈里从栈顶到’(‘的元素全部出栈，最后全部出栈，所得到的出栈顺序就是后缀表达式。 传送门 描述 中缀表达式是一个通用的算术或逻辑公式表示方法，操作符是以中缀形式处于操作数的中间（例：3 + 4），中缀表达式是人们常用的算术表示方法。后缀表达式不包含括号，运算符放在两个运算对象的后面，所有的计算按运算符出现的顺序，严格从左向右进行（不再考虑运算符的优先规则，如：(2 + 1) 3 ， 即2 1 + 3 。利用栈结构，将中缀表达式转换为后缀表达式。(测试数据元素为单个字符) 输入 中缀表达式 输出 后缀表达式 样例输入1A+(B-C/D)*E 样例输出1ABCD/-E*+ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct linknode&#123; char data; linknode *next; &#125; LinkStNode; void Init(LinkStNode *&amp;Top)&#123; Top=(LinkStNode *) malloc (sizeof(LinkStNode)); Top-&gt;next=NULL;&#125;void Push(LinkStNode *&amp;Top,int x) //入栈&#123; LinkStNode *tem; tem=(LinkStNode *) malloc (sizeof(LinkStNode)); tem-&gt;data=x; tem-&gt;next=Top-&gt;next; Top-&gt;next=tem; &#125; bool Empty(LinkStNode *&amp;Top)&#123; return (Top-&gt;next==NULL);&#125;bool Pop(LinkStNode *&amp;Top,char &amp;x) &#123; if(Empty(Top)) return false; LinkStNode *tem; tem=Top-&gt;next; x=tem-&gt;data; Top-&gt;next=Top-&gt;next-&gt;next; free(tem); return true;&#125;int GetTop(LinkStNode *&amp;Top)&#123; if(Top-&gt;next!=NULL) return Top-&gt;next-&gt;data; return 0;&#125;int main()&#123; LinkStNode *Top; Init(Top); char x,tem; while(scanf("%c",&amp;x)&amp;&amp;x!='\n') &#123; if(x=='+'||x=='-'||x=='*'||x=='/'||x=='(') Push(Top,x); else if(x==')') while(Pop(Top,tem)&amp;&amp;tem!='(') cout&lt;&lt;tem; else &#123; Push(Top,x); Pop(Top,tem); cout&lt;&lt;tem; &#125; &#125; while(Pop(Top,tem)) cout&lt;&lt;tem; return 0;&#125; 敬请期待… [1043] 利用栈完成后缀表达式的计算思路题目描述链栈实现数组模拟实现是数字就入栈，否则弹出栈顶两个进行运算，再将运算结果压入栈。 传送门 描述 后缀表达式不包含括号，运算符放在两个运算对象的后面，所有的计算按运算符出现的顺序，严格从左向右进行（不再考虑运算符的优先规则，如：(2 + 1) * 3 ， 即2 1 + 3 *。利用栈结构，将后缀表达式的结果计算出来。 输入 后缀表达式。以#号作为表达式结束标志。为了简单，处理的数据为0-9的整数。 输出 计算结果。 样例输入13 6 6 2 / - 3 * +# 样例输出112 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct linknode&#123; int data; linknode *next; &#125; LinkStNode; void Init(LinkStNode *&amp;Top)&#123; Top=(LinkStNode *) malloc (sizeof(LinkStNode)); Top-&gt;next=NULL;&#125;void Push(LinkStNode *&amp;Top,int x) //入栈&#123; LinkStNode *tem; tem=(LinkStNode *) malloc (sizeof(LinkStNode)); tem-&gt;data=x; tem-&gt;next=Top-&gt;next; Top-&gt;next=tem; &#125; int Pop(LinkStNode *&amp;Top) &#123; int x; LinkStNode *tem; tem=Top-&gt;next; x=tem-&gt;data; Top-&gt;next=Top-&gt;next-&gt;next; free(tem); return x;&#125;bool Empty(LinkStNode *&amp;Top)&#123; return (Top-&gt;next==NULL);&#125;int GetTop(LinkStNode *&amp;Top)&#123; if(Top-&gt;next!=NULL) return Top-&gt;next-&gt;data; return 0;&#125;int main()&#123; LinkStNode *Top; Init(Top); char x,Flag=' '; while(scanf("%c",&amp;x)&amp;&amp;Flag!='#') &#123; if(x&gt;'0'&amp;&amp;x&lt;'9') Push(Top,x-'0'); else &#123; int b=Pop(Top),a=Pop(Top); switch(x) &#123; case '+' : Push(Top,a+b);break; case '-' : Push(Top,a-b);break; case '*' : Push(Top,a*b);break; case '/' : Push(Top,a/b);break; &#125; &#125; scanf("%c",&amp;Flag); &#125; cout&lt;&lt;GetTop(Top); return 0;&#125; 敬请期待… [1044] 顺序栈基本操作的实现思路题目描述链栈实现数组模拟实现…我直接写的链栈，改改就好了 传送门 描述 编程实现顺序栈的初始化、入栈、出栈、取栈顶元素和计算栈中元素个数等基本操作。 输入 第一行为入栈元素的个数； 第二行依次为入栈的元素； 出栈操作的次数n. 输出 输出n次出栈后的栈顶元素值。如果是空栈，输出-1. 样例输入12341 2 3 42 样例输出12 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xfffffff#define MaxSize 200typedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct &#123; int data[MaxSize]; int Top; &#125; SqStack; void Init(SqStack *&amp;S)&#123; S=(SqStack *) malloc (sizeof(SqStack)); S-&gt;Top=-1;&#125;bool Push(SqStack *&amp;S,int x) //入栈&#123; if(S-&gt;Top==MaxSize-1) return false; S-&gt;Top++; S-&gt;data[S-&gt;Top]=x; return true; &#125; bool Empty(SqStack *&amp;S)&#123; return (S-&gt;Top==-1);&#125;bool Pop(SqStack *&amp;S,int &amp;x) &#123; if(S-&gt;Top==-1) return false; x=S-&gt;data[S-&gt;Top]; S-&gt;Top--; return true;&#125;bool GetTop(SqStack *&amp;S,int &amp;x)&#123; if(S-&gt;Top==-1) return false; x=S-&gt;data[S-&gt;Top]; return true;&#125;int main()&#123; SqStack *S; Init(S); int tem,n; cin&gt;&gt;n; while(n--) &#123; cin&gt;&gt;tem; Push(S,tem); &#125; cin&gt;&gt;n; while(n--) Pop(S,tem); if(Empty(S)) cout&lt;&lt;-1; else &#123; GetTop(S,tem); cout&lt;&lt;tem; &#125; return 0;&#125; 敬请期待… [1045] 集合的交运算的实现思路题目描述顺序表实现数组模拟实现… 传送门 描述 假设有两个集合 A 和 B 分别用两个线性表 LA 和 LB 表示，即线性表中的数据元素即为集合中的成员。编程实现集合A和集合B的交运算。 输入 第一行为集合A的数据元素个数n;第二行输入n个集合A的数据元素 ;第三行为集合B的数据元素的个数；第四行输入m个集合B的数据元素 输出 A和B的交集 样例输入123480 5 6 3 8 7 9 1071 3 4 7 8 9 5 样例输出15 3 8 7 9 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct &#123; int date[100]; int len;&#125; SqList;void Create (SqList *&amp;L)&#123; int n; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) cin&gt;&gt;L-&gt;date[i]; L-&gt;len=n;&#125;void Merge(SqList *&amp;La,SqList *&amp;Lb)&#123; for(int i=0;i&lt;La-&gt;len;i++) &#123; int j=0; for(;j&lt;Lb-&gt;len;j++) if(La-&gt;date[i]==Lb-&gt;date[j]) &#123; cout&lt;&lt;La-&gt;date[i]&lt;&lt;" "; break; &#125; &#125;&#125;int main()&#123; SqList *La,*Lb; La=(SqList *) malloc(sizeof(SqList)); Lb=(SqList *) malloc(sizeof(SqList)); Create(La); Create(Lb); Merge(La,Lb); return 0;&#125; 敬请期待… [1046] 链栈基本操作的实现思路题目描述链栈实现数组模拟实现… 传送门 描述 编程实现链栈的初始化、入栈、出栈和计算栈中元素个数等基本操作。（测试数据为整数。） 输入 第一行为入栈元素的个数;第二行为入栈元素；出栈操作的次数n. 输出 n次出栈后的栈顶元素。如果是空栈，输出-1. 样例输入12341 2 3 42 样例输出12 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct linknode&#123; int data; linknode *next; &#125; LinkStNode; void Init(LinkStNode *&amp;Top)&#123; Top=(LinkStNode *) malloc (sizeof(LinkStNode)); Top-&gt;next=NULL;&#125;void Push(LinkStNode *&amp;Top,int x) //入栈&#123; LinkStNode *tem; tem=(LinkStNode *) malloc (sizeof(LinkStNode)); tem-&gt;data=x; tem-&gt;next=Top-&gt;next; Top-&gt;next=tem; &#125; bool Empty(LinkStNode *&amp;Top)&#123; return (Top-&gt;next==NULL);&#125; int Pop(LinkStNode *&amp;Top) &#123; if(Empty(Top)) return 0; int x; LinkStNode *tem; tem=Top-&gt;next; x=tem-&gt;data; Top-&gt;next=Top-&gt;next-&gt;next; free(tem); return x;&#125;int GetTop(LinkStNode *&amp;Top)&#123; if(Top-&gt;next!=NULL) return Top-&gt;next-&gt;data; return 0;&#125;int main()&#123; LinkStNode *Top; Init(Top); int n,x; cin&gt;&gt;n; while(n--) &#123; cin&gt;&gt;x; Push(Top,x); &#125; cin&gt;&gt;n; while(n--) &#123; Pop(Top); &#125; Empty(Top)? cout&lt;&lt;-1: cout&lt;&lt;GetTop(Top); return 0;&#125; 敬请期待… [1101] 顺序表中数据的循环移动思路题目描述顺序表实现数组模拟实现Lb-&gt;date[i]=La-&gt;date[(i+k)%La-&gt;len]; 传送门 描述 设有长度为n（n&gt;1）的顺序表R，将R中保存的序列循环左移P（0 &lt; P &lt; n）个位置，即将R中的数据由（x0,x1,…,xn-1）变换为(xp,xp+1,…,xn-1,x0,x1,…,xp-1)。如果p值不合法，输出“error！”。 输入 第一行为数据元素个数n；第二行为n个整数；第三行为要左移的位数p 输出 移动后的序列。 样例输入123101 2 3 4 5 6 7 8 9 105 样例输出16 7 8 9 10 1 2 3 4 5 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct &#123; int date[100]; int len;&#125; SqList;void Create (SqList *&amp;L)&#123; int n; cin&gt;&gt;n; L=(SqList *) malloc(sizeof(SqList)); for(int i=0;i&lt;n;i++) cin&gt;&gt;L-&gt;date[i]; L-&gt;len=n;&#125;void Put(SqList *&amp;La)&#123; for(int i=0;i&lt;La-&gt;len;i++) cout&lt;&lt;La-&gt;date[i]&lt;&lt;" "; &#125;void Move(SqList *&amp;La,SqList *&amp;Lb,int k)&#123; for(int i=0;i&lt;La-&gt;len;i++) Lb-&gt;date[i]=La-&gt;date[(i+k)%La-&gt;len]; Lb-&gt;len=La-&gt;len;&#125;int main()&#123; int k; SqList *La; SqList *Lb=(SqList *) malloc(sizeof(SqList)); Create(La); cin&gt;&gt;k; if(k&lt;=0||k&gt;=La-&gt;len) cout&lt;&lt;"error!"; else &#123; Move(La,Lb,k); Put(Lb); &#125; return 0;&#125; 敬请期待… [1102] 顺序表上数据的划分问题的实现思路题目描述顺序表实现数组模拟实现这道题要正着找大的，逆着找小的。 传送门 描述 建立一个顺序表L，然后以第一个为分界，将所有小于等于它的元素移到该元素的前面，将所有大于它的元素移到该元素的后面。 输入 顺序表长度n；顺序表中的数据元素。 输出 移动后的数据元素。 样例输入121032 5 22 43 23 56 54 57 11 25 样例输出125 11 23 22 5 32 43 56 54 57 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct &#123; int date[100]; int len;&#125; SqList;void Create (SqList *&amp;L)&#123; int n; cin&gt;&gt;n; L=(SqList *) malloc(sizeof(SqList)); for(int i=0;i&lt;n;i++) cin&gt;&gt;L-&gt;date[i]; L-&gt;len=n;&#125;void Put(SqList *&amp;La)&#123; for(int i=0;i&lt;La-&gt;len;i++) cout&lt;&lt;La-&gt;date[i]&lt;&lt;" "; &#125;void Move(SqList *&amp;La,SqList *&amp;Lb)&#123; int tem=La-&gt;date[0]; Lb-&gt;len=0; for(int i=La-&gt;len-1;i&gt;=0;i--) if(La-&gt;date[i]&lt;tem) &#123; Lb-&gt;date[Lb-&gt;len]=La-&gt;date[i]; Lb-&gt;len++; &#125; Lb-&gt;date[Lb-&gt;len]=tem; Lb-&gt;len++; for(int i=0;i&lt;La-&gt;len;i++) if(La-&gt;date[i]&gt;tem) &#123; Lb-&gt;date[Lb-&gt;len]=La-&gt;date[i]; Lb-&gt;len++; &#125;&#125;int main()&#123; int k; SqList *La; SqList *Lb=(SqList *) malloc(sizeof(SqList)); Create(La); Move(La,Lb); Put(Lb); return 0;&#125; 敬请期待… [1103] 删除顺序表中指定区间的数据思路题目描述线性表实现数组模拟实现… 传送门 描述 建立顺序表L，将指定区间的数据从顺序表中删除。假设指定区间是合法数据，无序做合法性判断。测试数据为整型。 输入 第一行是表长n；第二行是表中数据元素。 输出 删除以后的顺序表中的数据元素。 样例输入1231022 32 11 23 43 59 17 65 45 5710 20 样例输出122 32 23 43 59 65 45 57 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct &#123; int date[100]; int len;&#125; SqList;void Create (SqList *&amp;L)&#123; int n; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) cin&gt;&gt;L-&gt;date[i]; L-&gt;len=n;&#125;void Put(SqList *&amp;La)&#123; for(int i=0;i&lt;La-&gt;len;i++) cout&lt;&lt;La-&gt;date[i]&lt;&lt;" "; &#125;bool Find(SqList *&amp;L,int l,int r,int &amp;li)&#123; for(int i=0;i&lt;L-&gt;len;i++) if(L-&gt;date[i]&gt;=l&amp;&amp;L-&gt;date[i]&lt;=r) &#123; li=i; return true; &#125; return false;&#125;void Delete(SqList *&amp;L,int x)&#123; for(int i=x;i&lt;L-&gt;len;i++) L-&gt;date[i]=L-&gt;date[i+1]; L-&gt;len--;&#125;int main()&#123; SqList *La; La=(SqList *) malloc(sizeof(SqList)); Create(La); int l,r,li; cin&gt;&gt;l&gt;&gt;r; while(Find(La,l,r,li)) &#123; Delete(La,li); &#125; if(La-&gt;len==0) cout&lt;&lt;-1; else Put(La); return 0;&#125; 敬请期待…]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[尔尔序的神奇计数问题(set容器)]]></title>
    <url>%2F%E5%B0%94%E5%B0%94%E5%BA%8F%E7%9A%84%E7%A5%9E%E5%A5%87%E8%AE%A1%E6%95%B0%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[描述传送门：swustoj-2612 &emsp; 现在有4个集合，分别为$A,B,C,D$，且每一个集合的大小都是n。尔尔序想求解一个问题，现在他把$A,B,C$的交集的大小、$A,B,D$的交集的大小，$A,C,D$的交集的大小，$B,C,D$的交集的大小之和记为$X$，同时把$A,B$的交集的大小、$A,C$的交集的大小、$A,D$的交集的大小、$B,C$的交集的大小、$B,D$的交集的大小之和记为Y，求解$|X−Y|$的值。 Input 第一行输入一个整数$n(1\leq n \leq5 \times 10^4)$代表这4个集合的大小。第二行输入$n$整数$A_i\ (1\leq A_i \leq10^{18})$，代表集合$A$中的数。第三行输入$n$整数$B_i\ (1\leq B_i \leq10^{18})$，代表集合$B$中的数。第四行输入$n$整数$C_i\ (1\leq C_i \leq10^{18})$，代表集合$C$中的数。第五行输入$n$整数$D_i\ (1\leq D_i \leq10^{18})$，代表集合$D$中的数。 保证在同一集合内没有重复的数。 Output 输出$|X−Y|$的值。 Examples intput 1234567891041 2 3 42 3 4 53 4 5 77 6 3 141 2 3 41 2 3 41 2 3 53 4 5 6 output 1267 思路 其实就是set的直接应用，求：|A∩B∩C+A∩B∩D+A∩C∩D+B∩C∩D-A∩B-A∩D-B∩C-B∩D| 也可以用容次原理转换成A∪B∪C∪D-(A+B+C+D)+A∩B∩C∩D+C∩D但是莫名其妙要比直接的慢就没用这个 x在set1中存在就是set1.find(x)!=set1.end(); 然后暴力出奇迹即可，具体看代码。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll;const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7;set &lt;ll&gt; set1,set2,set3,set4;ll a[50005],b[50005],c[50005],d[50005],ans=0;int main()&#123; int n,x; while(cin&gt;&gt;n) &#123; ans=0; set1.clear(); //清空set set2.clear(); set3.clear(); set4.clear(); for(int i=0; i&lt;n; i++) &#123; scanf("%lld",&amp;a[i]); set1.insert(a[i]); &#125; for(int i=0; i&lt;n; i++) &#123; scanf("%lld",&amp;b[i]); set2.insert(b[i]); &#125; for(int i=0; i&lt;n; i++) &#123; scanf("%lld",&amp;c[i]); set3.insert(c[i]); &#125; for(int i=0; i&lt;n; i++) &#123; scanf("%lld",&amp;d[i]); set4.insert(d[i]); if(set2.find(d[i])!=set2.end()&amp;&amp;set3.find(d[i])!=set3.end()) ans++; if(set1.find(d[i])!=set1.end()&amp;&amp;set3.find(d[i])!=set3.end()) ans++; if(set1.find(d[i])!=set1.end()&amp;&amp;set2.find(d[i])!=set2.end()) ans++; if(set1.find(d[i])!=set1.end()) ans--; if(set2.find(d[i])!=set2.end()) ans--; &#125; for(int i=0; i&lt;n; i++) &#123; if(set1.find(c[i])!=set1.end()&amp;&amp;set2.find(c[i])!=set2.end()) ans++; if(set1.find(b[i])!=set1.end()) ans--; if(set1.find(c[i])!=set1.end()) ans--; if(set2.find(c[i])!=set2.end()) ans--; &#125; cout&lt;&lt;abs(ans)&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>STL</tag>
        <tag>set容器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[邂逅明下(巴什博弈变形)]]></title>
    <url>%2F%E9%82%82%E9%80%85%E6%98%8E%E4%B8%8B%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-2897 &emsp;当日遇到月，于是有了明。当我遇到了你，便成了侣。那天，日月相会，我见到了你。而且，大地失去了光辉，你我是否成侣？这注定是个凄美的故事。&emsp;小t和所有世俗的人们一样，期待那百年难遇的日食。驻足街头看天，看日月渐渐走近，小t的脖子那个酸呀（他坚持这个姿势已经有半个多小时啦）。他低下仰起的头，环顾四周。忽然发现身边竟站着位漂亮的mm。天渐渐暗下，这mm在这街头竟然如此耀眼，她是天使吗？站在小t身边的天使。 &emsp;小t对mm惊呼：“缘分呐~~”。mm却毫不含糊：“是啊，500年一遇哦！”（此后省略5000字….）&emsp;小t赶紧向mm要联系方式，可mm说：“我和你玩个游戏吧，赢了，我就把我的手机号告诉你。”小t，心想天下哪有题目能难倒我呢，便满口答应下来。mm开始说游戏规则：“我有一堆硬币，一共7枚，从这个硬币堆里取硬币，一次最少取2枚，最多4枚，如果剩下少于2枚就要一次取完。我和你轮流取，直到堆里的硬币取完，最后一次取硬币的算输。我玩过这个游戏好多次了，就让让你，让你先取吧~”&emsp;小t掐指一算，不对呀，这是不可能的任务么。小t露出得意的笑：“还是mm优先啦，呵呵~”mm霎时愣住了，想是对小t的反应出乎意料吧。&emsp;她却也不生气：“好小子，挺聪明呢，要不这样吧，你把我的邮箱给我，我给你发个文本，每行有三个数字n，p，q，表示一堆硬币一共有n枚，从这个硬币堆里取硬币，一次最少取p枚，最多q枚，如果剩下少于p枚就要一次取完。两人轮流取，直到堆里的硬币取完，最后一次取硬币的算输。对于每一行的三个数字，给出先取的人是否有必胜策略，如果有回答WIN，否则回答LOST。你把对应的答案发给我，如果你能在今天晚上8点以前发给我正确答案，或许我们明天下午可以再见。”&emsp;小t二话没说，将自己的邮箱给了mm。当他兴冲冲得赶回家，上网看邮箱，哇！mm的邮件已经到了。他发现文本长达100000行，每行的三个数字都很大，但是都是不超过65536的整数。小t看表已经下午6点了，要想手工算出所有结果，看来是不可能了。你能帮帮他，让他再见到那个mm吗？ Input 不超过100000行，每行三个正整数n，p，q。 Output 对应每行输入，按前面介绍的游戏规则，判断先取者是否有必胜策略。输出WIN或者LOST。 Examples intput 127 2 46 2 4 output 12LOSTWIN 思路 巴什博弈变形，必败态为$n\in (0,p]$。 只有当$n\%(p+q)$在$(0,p]$的时候，设先手取$x$，后手每次都取$(p+q-x)$，才能保证最后剩给先手的在$(0,p]$。 代码1234567891011121314151617181920212223242526272829//#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll;const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7;int main()&#123; ios::sync_with_stdio(false); int n,a,b; while(cin&gt;&gt;n&gt;&gt;a&gt;&gt;b) &#123; int tem=n%(a+b); if(tem&amp;&amp;tem&lt;=a) cout&lt;&lt;"LOST"&lt;&lt;endl; else cout&lt;&lt;"WIN"&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>博弈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[One Person Game(拓展欧几里德算法)]]></title>
    <url>%2FOne-Person-Game%2F</url>
    <content type="text"><![CDATA[描述传送门：zoj-3593 &emsp;There is an interesting and simple one person game. Suppose there is a number axis under your feet. You are at point $A$ at first and your aim is point $B$. There are 6 kinds of operations you can perform in one step. That is to go left or right by $a,b$ and $c$, here $c$ always equals to $a+b$. You must arrive B as soon as possible. Please calculate the minimum number of steps. Input There are multiple test cases. The first line of input is an integer $T(0 &lt; T ≤ 1000) $indicates the number of test cases. Then T test cases follow. Each test case is represented by a line containing four integers 4 integers$ A, B, a\ $and $b$, separated by spaces. ($-2^{31} ≤ A, B &lt; 2^{31}, 0 &lt; a, b &lt; 2^{31}$) Output &emsp;For each test case, output the minimum number of steps. If it’s impossible to reach point B, output “-1” instead. Examples intput 12320 1 1 20 1 2 4 output 121-1 思路 一开始以为是道bfs，敲到一半看到数据范围就发现天真了。 题目其实就是求$|C_1a+C_2b+C_3c+C_4(-a)+C_5(-b)+C_6(-c)|=|A-B|$，化简之后就变成了$|C_1a+C_2b|=|A-B|$，还是不满足拓展欧几里德的形式。要变形一下就变成了\frac{C_1\cdot gcd(a,b)}{|A-B|}\cdot a+\frac{C_2\cdot gcd(a,b)}{|A-B|}\cdot b=gcd(a,b) 我们还知道拓展欧几里德的通解是$ x=x_0+(b/gcd)\cdot t$，$y=y_0-(a/gcd)\cdot t$，($y_0$和$x_0$为一组特解)。这时候我们带出$C_1,C_2$，画出$C_1,C_2$关于$t$的两条直线，显然当$x,y$异号的时候，$ans=|x+y|$，当$x,y$同号的时候，$ans=max(|a|,|y|)$,结合图像，显然交点为最优解。但交点对应的$t$不一定是整数点，所以我们在对$t$取整后还要比较$t$取$t+1$时的情况。 拓展欧几里德详见：数论笔记本 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffffff //MAX取足够大typedef unsigned long long LL;typedef long long ll;ll x,y;ll exgcd(int a,int b) //拓展欧几里得&#123; if(b==0) &#123; x=1; y=0; return a; &#125; int ans=exgcd(b,a%b); int t=x; x=y; y=t-a/b*y; return ans;&#125;int main()&#123; ll A,B,a,b,n,ans1,L,ans2; cin&gt;&gt;n; while(n--) &#123; ans1=MAX; //注意MAX要取足够大，要取超过 int的最大值（因为这个wa了无数发） cin&gt;&gt;A&gt;&gt;B&gt;&gt;a&gt;&gt;b; L=abs(A-B); ll gcd=exgcd(a,b); if(x&gt;y) //为下面x,y的表达式做的处理 &#123; swap(x, y); swap(a, b); &#125; x=x*L/gcd; y=y*L/gcd; ll t=(y-x)*gcd/(a+b); //t等于交点 a/=gcd; b/=gcd; for(ll i=t; i&lt;=t+1; i++) //在t和t+1中找最优解 &#123; if((x+b*i)*(y-a*i)&gt;0) ans2=max(x+b*i,y-a*i); else ans2=abs(x+b*i)+abs(y-a*i); ans1=min(ans1,ans2); &#125; if(L%gcd) //无解 cout&lt;&lt;-1&lt;&lt;endl; else cout&lt;&lt;ans1&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>拓欧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博弈笔记本]]></title>
    <url>%2F%E5%8D%9A%E5%BC%88%E7%AC%94%E8%AE%B0%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[博弈好难啊啊啊啊啊啊… 斐波那契博弈描述 1个有n个石子的石堆,两人轮流取.先取者第1次可以取任意多个，但不能全部取完.以后每次取的石子数不能超过上次取子数的2倍，先取完者胜。 结论 如果n是一个斐波那契数，则后手赢，否则先手赢。 证明 首先我们要明确：取石子的时候一定不会取超过剩下的石子的一半，否则下一个人就直接能取完。 当n是一个斐波那契数时，后手赢。(数学归纳法，为方便表示，用$f(x)$来表示第$x$个斐波那契数) 当$n=2$时,显然后手赢，成立。 当$n=3$时,显然后手赢，成立。 假设：n是斐波那契数且$n&lt;=f(k)$时,后手赢。 当$n=f(k+1)$时，将$n$拆成$n=f(k-1)+f(k)$，先手先在$f(k-1)$中拿，且拿不完（拿完后手下次直接就拿完了），由假设可知，后手能拿到$f(k-1)$堆中的最后一个石子。&emsp;这里稍微分析一下：后手在$f(k-1)$中能拿到的最多的石子是当且仅当先手先拿$\frac {f(k-1)}3$时，后手拿$\frac{2f(k-1)}3$，易证$\frac{2f(k-1)}3&lt;\frac{f(k)}2$。此时先手再在$f(k)$堆中拿，且不能一次拿完，就转化成了假设的情况，所以后手赢。 假设正确。 当n不是一个斐波那契数时，先手赢。要借助齐肯多夫定理来证明。 将$n$分解成最大的不连续斐波那契数之和，即$n=f(a_m)+f(a_{m-1})+…+f(a_2)+f(a_1)$。 先手先取最少的一堆，即先取$f(a_1)$这堆，由于是不连续的斐波那契数列，所以$f(a_2)&gt;2f(a_1)$，所以后手只能从$f(a_2)$中拿，且拿不完，这样就转化成了$n$是斐波那契数的情况，所以后手必输。]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>博弈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[还是畅通工程(最小生成树入门-Kruskal)]]></title>
    <url>%2F%E8%BF%98%E6%98%AF%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[描述传送门：poj-1875 &emsp;某省调查乡村交通状况，得到的统计表中列出了任意两村庄间的距离。省政府“畅通工程”的目标是使全省任何两个村庄间都可以实现公路交通（但不一定有直接的公路相连，只要能间接通过公路可达即可），并要求铺设的公路总长度为最小。请计算最小的公路总长度。 Input 测试输入包含若干测试用例。每个测试用例的第1行给出村庄数目N ( &lt; 100 )；随后的N(N-1)/2行对应村庄间的距离，每行给出一对正整数，分别是两个村庄的编号，以及此两村庄间的距离。为简单起见，村庄从1到N编号。 当N为0时，输入结束，该用例不被处理。 Output 对每个测试用例，在1行里输出最小的公路总长度。 Examples intput 12345678910111231 2 11 3 22 3 441 2 11 3 41 4 12 3 32 4 23 4 50 output 1235 思路 这是一道简单的最小生成树。 Kruskal算法就是在点之间加边，每次在剩下的边中选一条最小边,用这条边将端点的两个点加入生成，并满足这条边的添加不会使生成树产生回路（这条边的两个端点不都在生成树里面）。 用并查集来维护节点是否加入了生成树。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869//#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll;const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7;int Father[105];struct edge //存边&#123; int a,b,s;&#125; Edge[60000];int Find(int x) //找根节点&#123; return Father[x]==x? x:Father[x]=Find(Father[x]);&#125;void Union(int a,int b) //合并&#123; int fa=Find(a); int fb=Find(b); Father[fa]=fb;&#125;bool cmp(edge x,edge y)&#123; return x.s&lt;y.s;&#125;int main()&#123; ios::sync_with_stdio(false); //加速 int n=0,ans,add; while(cin&gt;&gt;n&amp;&amp;n) &#123; for(int i=0; i&lt;=n; i++) Father[i]=i; //初始化 ans=0; add=0; for(int i=0; i&lt;n*(n-1)/2; i++) cin&gt;&gt;Edge[i].a&gt;&gt;Edge[i].b&gt;&gt;Edge[i].s; sort(Edge,Edge+n*(n-1)/2,cmp); // 按边的权值有小到大排序 for(int i=0; i&lt;n*(n-1)/2&amp;&amp;add&lt;n-1; i++) if(Find(Edge[i].a)!=Find(Edge[i].b)) //依次添加 &#123; add++; ans+=Edge[i].s; Union(Edge[i].a,Edge[i].b); &#125; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>图论</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How Many Answers Are Wrong(带权并查集)]]></title>
    <url>%2FHow-Many-Answers-Are-Wrong%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-3038 TT and FF are … friends. Uh… very very good friends -____-b FF is a bad boy, he is always wooing TT to play the following game with him. This is a very humdrum game. To begin with, TT should write down a sequence of integers-_-!!(bored). Then, FF can choose a continuous subsequence from it(for example the subsequence from the third to the fifth integer inclusively). After that, FF will ask TT what the sum of the subsequence he chose is. The next, TT will answer FF’s question. Then, FF can redo this process. In the end, FF must work out the entire sequence of integers. BoringBoringa very very boring game!!! TT doesn’t want to play with FF at all. To punish FF, she often tells FF the wrong answers on purpose. The bad boy is not a fool man. FF detects some answers are incompatible. Of course, these contradictions make it difficult to calculate the sequence. However, TT is a nice and lovely girl. She doesn’t have the heart to be hard on FF. To save time, she guarantees that the answers are all right if there is no logical mistakes indeed. What’s more, if FF finds an answer to be wrong, he will ignore it when judging next answers. But there will be so many questions that poor FF can’t make sure whether the current answer is right or wrong in a moment. So he decides to write a program to help him with this matter. The program will receive a series of questions from FF together with the answers FF has received from TT. The aim of this program is to find how many answers are wrong. Only by ignoring the wrong answers can FF work out the entire sequence of integers. Poor FF has no time to do this job. And now he is asking for your help~(Why asking trouble for himself~~Bad boy) Input Line 1: Two integers, N and M (1 &lt;= N &lt;= 200000, 1 &lt;= M &lt;= 40000). Means TT wrote N integers and FF asked her M questions. Line 2..M+1: Line i+1 contains three integer: Ai, Bi and Si. Means TT answered FF that the sum from Ai to Bi is Si. It’s guaranteed that 0 &lt; Ai &lt;= Bi &lt;= N. You can assume that any sum of subsequence is fit in 32-bit integer. Output A single line with a integer denotes how many answers are wrong. Examples intput 12345610 51 10 1007 10 281 3 324 6 416 6 1 output 11 题意 有一个数列，给你几条语句，每条都是a,b,s形式，代表这个数列从a到b的和为s，求这些语句有几条是跟它之前的语句矛盾的。 思路 这是一道裸的带权并查集，种类并查集就是比普通并查集多维护一个权值数组valum[]。其实和种类并查集很像，种类并查集就是权值都为1的带权并查集再膜一下种类数。 这道题valum[i]表示i到fa[i]的总和。如何来维护valum数组呢，我们需要修改一下Union函数和Find函数。 Union函数稍有变化,加了一句：valum[fa]=s+valum[b]-valum[a];画个图出来就很容易理解 Find函数的valum[x]+=valum[tem];也是同理，画个图就好理解了。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667//#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll;const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7;int valum[200005],Fa[200005],n,time,ans=0;void init(int n)&#123; for(int i=0; i&lt;=n; i++) Fa[i]=i; CRL(valum); ans=0;&#125;int Find(int x)&#123; if(Fa[x]!=x) &#123; int tem=Fa[x]; Fa[x]=Find(Fa[x]); valum[x]+=valum[tem]; &#125; return Fa[x];&#125;void Union(int a,int b,int s)&#123; int fa=Find(a); int fb=Find(b); if(fa!=fb) &#123; Fa[fa]=fb; valum[fa]=s+valum[b]-valum[a]; &#125; else if(valum[a]!=s+valum[b]) ans++;&#125;int main()&#123; ios::sync_with_stdio(false); //加速cin,cout int a,b,s; while(cin&gt;&gt;n&gt;&gt;time) &#123; init(n); while(time--) &#123; cin&gt;&gt;a&gt;&gt;b&gt;&gt;s; Union(--a,b,s); //因为元素是离散的，要--a,这样valum[b]-valum[a]；才是我们想要的区间和 &#125; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125; 类似题 poj-1988]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Find them,Catch them(种类并查集)]]></title>
    <url>%2FFind-them-Catch-them%2F</url>
    <content type="text"><![CDATA[描述传送门：poj-1703 &emsp;The police office in Tadu City decides to say ends to the chaos, as launch actions to root up the TWO gangs in the city, Gang Dragon and Gang Snake. However, the police first needs to identify which gang a criminal belongs to. The present question is, given two criminals; do they belong to a same clan? You must give your judgment based on incomplete information. (Since the gangsters are always acting secretly.) &emsp;Assume N (N &lt;= 10^5) criminals are currently in Tadu City, numbered from 1 to N. And of course, at least one of them belongs to Gang Dragon, and the same for Gang Snake. You will be given M (M &lt;= 10^5) messages in sequence, which are in the following two kinds: D [a] [b]where [a] and [b] are the numbers of two criminals, and they belong to different gangs. A [a] [b]where [a] and [b] are the numbers of two criminals. This requires you to decide whether a and b belong to a same gang. Input &emsp;The first line of the input contains a single integer T (1 &lt;= T &lt;= 20), the number of test cases. Then T cases follow. Each test case begins with a line with two integers N and M, followed by M lines each containing one message as described above. Output &emsp;For each message “A [a] [b]” in each case, your program should give the judgment based on the information got before. The answers might be one of “In the same gang.”, “In different gangs.” and “Not sure yet.” Examples intput 123456715 5A 1 2D 1 2A 1 2D 2 4A 1 4 output 123Not sure yet.In different gangs.In the same gang. 思路 这是一道裸的种类并查集，种类并查集就是比普通并查集多维护一个种类数组group[]。 这道题group[i]=1表示i和Fa[i]不是一个帮派。如何来维护group数组呢，我们需要修改一下Union函数和Find函数。 Union函数稍有变化,加了一句：group[fa]=(group[b]+1-group[a])%2;画个图出来就很容易理解 Find函数的group[x]=(group[x]+group[tem])%2;也是同理，画个图就好理解了。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576//#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll;const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7;const int M =1e5+5;int Fa[M],group[M];void init(int n)&#123; CRL(group); for(int i=0; i&lt;=n; i++) Fa[i]=i;&#125;int Find(int x)&#123; if(Fa[x]==x) return x; int tem=Fa[x]; Fa[x]=Find(tem); group[x]=(group[x]+group[tem])%2; //更新group数组，因为可能之前已经进行了一次合并， return Fa[x]; // group[x]保存的就可能不是跟现在根节点的关系，而是跟tem的关系。&#125;void Union(int a,int b)&#123; int fa=Find(a); int fb=Find(b); if(fa!=fb) &#123; Fa[fa]=fb; group[fa]=(group[b]+1-group[a])%2; //更新group数组 &#125;&#125;int main()&#123; int Case,n,m,a,b; char x; cin&gt;&gt;Case; while(Case--) &#123; cin&gt;&gt;n&gt;&gt;m; init(n); while(m--) &#123; getchar(); scanf("%c %d %d",&amp;x,&amp;a,&amp;b); //cin会超时 if(x=='D') Union(a,b); else &#123; if(Find(a)!=Find(b)) printf("Not sure yet.\n"); else if(group[a]==group[b]) printf("In the same gang.\n"); else printf("In different gangs.\n"); &#125; &#125; &#125; return 0;&#125; 类似题 poj-2492poj-1182]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[高维正方体(找规律+二项式定理+逆元)]]></title>
    <url>%2F%E9%AB%98%E7%BB%B4%E6%AD%A3%E6%96%B9%E4%BD%93%2F</url>
    <content type="text"><![CDATA[描述传送门：洛谷-1999 0维空间的元素是点，这个毋庸置疑。 2个0维空间的元素可以围成一个1维空间的元素，线段。 4个1维空间的元素可以围成一个2维空间的元素，正方形。 6个2维空间的元素可以围成一个3维空间的元素，正方体。 8个3维空间的元素可以围成一个4维空间的元素，超正方体。 …… 一个正方形中，有4个（顶）点，4条线段（边），1个正方形。 一个正方体中，有8个（顶）点，12条线段（棱），6个正方形（面），1个正方体。 …… 我们的问题是：给出a与b，请求出：在a维空间的元素中，包含着多少个b维空间的元素。答案可能很大，只需要输出它除以1000000007的余数。 Input 两个整数a,b，以空格隔开。 Output 一个整数，即答案。 Examples intput 13 1 output 112 思路 仔细观察4 4 18 12 6 1可以看出他们的共同点就是一个是$(x+2)^2$的展开式系数，一个是$(x+2)^3$的展开式系数，这时候我们就大胆的猜测$n$维立方体里包含的比他低维度的立方体个数就是$(x+2)^n$的展开式的系数，a维空间的元素中包含个b维空间的元素的个数就是$(x+2)^a$的展开式中$x^b$的系数。(事实证明是对的) 根据二项式定理，我们就得到了公式solve(a,b)=C_a^b\cdot2^{a-b}=\frac{a!}{b!(a-b)!}\cdot2^{a-b} 由于$C_a^b2$和$2^{a-b}$都太大了，但是由于要取模，我们就可以分别用逆元和快速幂求得值。 数据用$long &emsp; long$来存，否则会 爆精度。 逆元和快速幂详见另一篇博客：数论笔记本 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970//#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt; #include&lt;string.h&gt; #include&lt;string&gt; #include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = 2.718281828459;const int mod =1e9+7; ll fac(ll x) //阶乘 &#123; ll ans=1; for(int i=1;i&lt;=x;i++) ans=(ans*i)%mod; return ans;&#125;ll x,y;ll exgcd(ll a,ll b) //扩展欧几里德求逆元 &#123; if(b==0) &#123; x=1;y=0; return a; &#125; ll r=exgcd(b,a%b); ll c=x; x=y; y=c-a/b*y; return r;&#125;ll qpow(ll a,ll b) //快速幂 &#123; ll ans=1; a%=mod; while(b&gt;0) &#123; if(b&amp;1) ans=(ans*a)%mod; b/=2; a=(a*a)%mod; &#125; return ans;&#125;int main()&#123; int a,b;ll ans; while(cin&gt;&gt;a&gt;&gt;b) &#123; if(a&lt;b) ans=0; //特判 else &#123; exgcd((fac(b)*fac(a-b))%mod,mod); x= x&lt;=0? x+=mod:x; //保证x&gt;0 ans=(((fac(a)*x)%mod)*qpow(2,a-b))%mod; &#125; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>排列组合</tag>
        <tag>数学</tag>
        <tag>逆元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Is It A Tree? (并查集入门)]]></title>
    <url>%2FIs-It-A-Tree-%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[描述传送门：poj-1308 &emsp;A tree is a well-known data structure that is either empty (null, void, nothing) or is a set of one or more nodes connected by directed edges between nodes satisfying the following properties.&emsp;There is exactly one node, called the root, to which no directed edges point.Every node except the root has exactly one edge pointing to it.&emsp;There is a unique sequence of directed edges from the root to each node.&emsp;For example, consider the illustrations below, in which nodes are represented by circles and edges are represented by lines with arrowheads. The first two of these are trees, but the last is not. &emsp;In this problem you will be given several descriptions of collections of nodes connected by directed edges. For each of these you are to determine if the collection satisfies the definition of a tree or not. Input &emsp;The input will consist of a sequence of descriptions (test cases) followed by a pair of negative integers. Each test case will consist of a sequence of edge descriptions followed by a pair of zeroes Each edge description will consist of a pair of integers; the first integer identifies the node from which the edge begins, and the second integer identifies the node to which the edge is directed. Node numbers will always be greater than zero. Output &emsp;For each test case display the line “Case k is a tree.” or the line “Case k is not a tree.”, where k corresponds to the test case number (they are sequentially numbered starting with 1). Examples intput 1234567896 8 5 3 5 2 6 45 6 0 08 1 7 3 6 2 8 9 7 57 4 7 8 7 6 0 03 8 6 8 6 45 3 5 6 5 2 0 0-1 -1 output 123Case 1 is a tree.Case 2 is a tree.Case 3 is not a tree. 思路 初始化每个点单独为一个集合，每次读入A,B就合并A,B所在的集合，每个集合都有一个代表元素，集合中的元素都指向代表元素并且只有代表元素指向自己，如果读入A,B的时候发现A,B的代表数组一样的话就说明有多个节点指向A或B,不是树。 由于节点不一定是从1开始的，如上图的第一个。所以我们用一个mark数组来标记一组数据中“提到”的节点，最后遍历一遍看连通分支数是否等于1。 有一组神坑数据：0 0-1 -1 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273//#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll;const double Pi = acos(-1);const double e = 2.718281828459;const int mod =1e9+7;int point[100005],mark[100005];int Find(int x) //找代表元素&#123; int tem=x; while(point[tem]!=tem) tem=point[tem]; int tem2=x; while(point[tem2]!=tem) //压缩路径 &#123; x=point[tem2]; point[tem2]=tem; tem2=x; &#125; return tem;&#125;int main()&#123; int a,b,Flag=0,sum,Case=0; while(cin&gt;&gt;a&gt;&gt;b&amp;&amp;a!=-1&amp;&amp;b!=-1) &#123; Case++; if(a==0&amp;&amp;b==0) &#123; printf("Case %d is a tree.\n",Case); //当数据只有0 0 时 continue; &#125; Flag=0; sum=0; for(int i=0; i&lt;100005; i++) point[i]=i; CRL(mark); do &#123; mark[a]=mark[b]=1; //标记提到过 if(Find(a)==Find(b)) //如果之前就连通，则不是数 Flag=1; else point[Find(a)]=point[Find(b)]; //合并 &#125; while(scanf("%d%d",&amp;a,&amp;b)&amp;&amp;a&amp;&amp;b); for(int i=1; i&lt;100005; i++) if(mark[i]&amp;&amp;point[i]==i) //找连通分支数 sum++; if(Flag||sum&gt;1) printf("Case %d is not a tree.\n",Case); else printf("Case %d is a tree.\n",Case); &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How Many Tables(并查集入门)]]></title>
    <url>%2FHow-Many-Tables-%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[描述传送门：HDU-1213 &emsp;Today is Ignatius’ birthday. He invites a lot of friends. Now it’s dinner time. Ignatius wants to know how many tables he needs at least. You have to notice that not all the friends know each other, and all the friends do not want to stay with strangers.&emsp;One important rule for this problem is that if I tell you A knows B, and B knows C, that means A, B, C know each other, so they can stay in one table.&emsp;For example: If I tell you A knows B, B knows C, and D knows E, so A, B, C can stay in one table, and D, E have to stay in the other one. So Ignatius needs 2 tables at least. Input &emsp;The input starts with an integer T(1&lt;=T&lt;=25) which indicate the number of test cases. Then T test cases follow. Each test case starts with two integers N and M(1&lt;=N,M&lt;=1000). N indicates the number of friends, the friends are marked from 1 to N. Then M lines follow. Each line consists of two integers A and B(A!=B), that means friend A and friend B know each other. There will be a blank line between two cases. Output For each test case, just output how many tables Ignatius needs at least. Do NOT print any blanks. Examples intput 1234567825 31 22 34 55 12 5 output 1224 思路 并查集入门题。初始化每人单独为一个集合，每次读入A,B就合并A,B所在的集合，每个集合都有一个代表元素，集合中的元素都指向代表元素并且只有代表元素指向自己，最后遍历一遍求出答案。 同样的方法也可以求无向图里的连通分支数。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960//#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll;const double Pi = acos(-1);const double e = 2.718281828459;const int mod =1e9+7;int Friend[1005];int Find(int x)&#123; int tem=x; while(Friend[tem]!=tem) //查找x元素所在集合的代表元素 tem=Friend[tem]; int t=x; while(Friend[t]!=tem) //压缩路径 &#123; x=Friend[t]; Friend[t]=tem; t=x; &#125; return tem;&#125;int main()&#123; int test,n,way,a,b,ans=0; cin&gt;&gt;test; while(test--) &#123; ans=0; cin&gt;&gt;n&gt;&gt;way; for(int i=0; i&lt;=n; i++) Friend[i]=i; for(int i=0; i&lt;way; i++) &#123; cin&gt;&gt;a&gt;&gt;b; a=Find(a),b=Find(b); if(a!=b) //合并两个集合 Friend[a]=Friend[b]; &#125; for(int i=1; i&lt;=n; i++) //查找有几个代表元素 if(Friend[i]==i) ans++; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[求数列的逆序数]]></title>
    <url>%2F%E6%B1%82%E6%95%B0%E5%88%97%E7%9A%84%E9%80%86%E5%BA%8F%E6%95%B0%2F</url>
    <content type="text"><![CDATA[描述 &emsp;在一个排列中，如果一对数的前后位置与大小顺序相反，即前面的数大于后面的数，那么它们就称为一个逆序。一个排列中逆序的总数就称为这个排列的逆序数。 思路暴力出奇迹 对于每一个数都遍历一遍排在他前面的数，每有一个比他大的数就ans++，时间复杂度为$O(n^2)$，很明显这个算法只能应用于数很少的情况。 归并排序求逆序数 归并排序中，在每次合并的时候判断一下。 假设数列为9 1 0 5 4，先把它分成两个子序列，9 1 | 0 5 4，使左右分别有序，则有1 9 | 0 4 5，此时进行两个子序列合并。如果a[i]&lt;=a[j],则i++，继续比较，如果a[i]&gt;a[i],则说明a[i]到a[mid]的数都大于a[j],那么ans+=mid-i+1。 代码12345678910111213141516171819202122232425262728ll a[500005],tem[500005],ans; //a为要求的序列，tem是临时存放的数组void divide(int low,int high) //子序列&#123; if(high==low) //因为上面那种思路需要子序列有序，当子序列只有一个数时，即认为这个子序列有序 return; divide(low,(low+high)/2); //使左边有序 divide((low+high)/2+1,high); //使右边有序 int mid=(low+high)/2; int i=low,j=mid+1,k=low; while(i&lt;=mid&amp;&amp;j&lt;=high) //合并 &#123; if(a[i]&gt;a[j]) &#123; ans+=mid-i+1; tem[k++]=a[j++]; &#125; else tem[k++]=a[i++]; &#125; while(i&lt;=mid) tem[k++]=a[i++]; //将剩下的存入数组 while(j&lt;=high) tem[k++]=a[j++]; for(int t=low;t&lt;=high;t++) a[t]=tem[t]; //更新a数组 return;&#125; 用树状数组求逆序数 这个算法的思想就是依次插入序列的数，每插入一个就ans+=在这个数前面比它大的数的个数。最后的ans就是答案。 用一个数组tr[x],tr[x]=1代表x在序列中存在1个。一开始tr都为0，因为此时未插入任何数。 此时的树状数组tr[x]代表在x前lowbit(x)个数有多少个数比它小。 初始化tr数组为0，代表一开始所有数都没有插入。 每次插入一个数x就是tr[x]++,再更新一次树状数组，维护区间和。 离散化处理 根据上面的思路，我们很容易发现我们要开很大的数组。如果题目说长度为$5 \times 10^5$数列a中$a_i \leq 10^9$，这时候开$10^9$的数组就太浪费了，我们就可以离散化处理。 我们离散化的目的就是为了把$10^9$的数对应到$5 \times 10^5$中，举个例子： 原序列为： 999 23 0 98765 2 7 离散化后： 5 4 1 6 2 3 说白了就是用一个$1-n$的数列来代替原序列，而逆序数不变。 没看懂的可以跟着代码模拟一遍。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define lowbit(x) (x&amp;(-x))#define INF 0xfffffffftypedef long long ll;const int N=5e5+5;int tr[N],b[N],n;typedef pair &lt;ll,int&gt; pp;pp a[N];void Update(int x) //插入x&#123; while(x&lt;=n) &#123; tr[x]++; x+=lowbit(x); &#125;&#125;int Query(int x) //查询序列中比x小的有多少个&#123; int sum=0; while(x&gt;0) &#123; sum+=tr[x]; x-=lowbit(x); &#125; return sum;&#125;int main()&#123; ios::sync_with_stdio(false); while(cin&gt;&gt;n&amp;&amp;n) &#123; CRL(tr); for(int i=1;i&lt;=n;i++) //离散化开始 &#123; cin&gt;&gt;a[i].first; a[i].second=i; &#125; sort(a+1,a+n+1); for(int i=1;i&lt;=n;i++) b[a[i].second]=i; //离散化结束，b数组即是离散化后的数组 ll ans=0; for(int i=1;i&lt;=n;i++) &#123; Update(b[i]); //依次插入更新 ans+=(i-Query(b[i])); &#125; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0; &#125; 题目 poj-2299 hdu-1394]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>排列组合</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FATE(二维费用背包问题)]]></title>
    <url>%2FFATE-%E4%BA%8C%E7%BB%B4%E8%B4%B9%E7%94%A8%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-2159 &emsp;最近xhd正在玩一款叫做FATE的游戏，为了得到极品装备，xhd在不停的杀怪做任务。久而久之xhd开始对杀怪产生的厌恶感，但又不得不通过杀怪来升完这最后一级。现在的问题是，xhd升掉最后一级还需n的经验值，xhd还留有m的忍耐度，每杀一个怪xhd会得到相应的经验，并减掉相应的忍耐度。当忍耐度降到0或者0以下时，xhd就不会玩这游戏。xhd还说了他最多只杀s只怪。请问他能升掉这最后一级吗？ Input 输入数据有多组，对于每组数据第一行输入n，m，k，s(0 &lt; n,m,k,s &lt; 100)四个正整数。分别表示还需的经验值，保留的忍耐度，怪的种数和最多的杀怪数。接下来输入k行数据。每行数据输入两个正整数a，b(0 &lt; a,b &lt; 20)；分别表示杀掉一只这种怪xhd会得到的经验值和会减掉的忍耐度。(每种怪都有无数个) Output 输出升完这级还能保留的最大忍耐度，如果无法升完这级输出-1。 Examples intput 123456710 10 1 101 110 10 1 91 19 10 2 101 12 2 output 1230-11 思路 有两个费用，一个是忍耐度，另一个是杀怪数。 注意这里对经验的理解，它不是第三个费用。 然后用完全背包，最后判断一下最优解即可。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445//#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll;const double Pi = acos(-1);const double e = 2.718281828459;const int mod =1e9+7;int dp[105][105],n,m,k,s,cost[105],valum[105]; //dp[i][j]:杀i,耐力j时的经验int main()&#123; while(cin&gt;&gt;n&gt;&gt;m&gt;&gt;k&gt;&gt;s) &#123; for(int i=0; i&lt;k; i++) cin&gt;&gt;valum[i]&gt;&gt;cost[i]; CRL(dp); for(int i=0; i&lt;k; i++) for(int p=1; p&lt;=s; p++) //杀怪 for(int j=cost[i]; j&lt;=m; j++) //忍耐 dp[p][j]=max(dp[p][j],dp[p-1][j-cost[i]]+valum[i]); if(dp[s][m]&lt;n) //如果消耗完耐力都不能升级 cout&lt;&lt;-1&lt;&lt;endl; else for(int i=0; i&lt;=m; i++) //找能升级，耐力消耗最小的 if(dp[s][i]&gt;=n) &#123; cout&lt;&lt;m-i&lt;&lt;endl; break; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>背包问题</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xiaoxin juju needs help(排列组合+逆元)]]></title>
    <url>%2Fxiaoxin-juju-needs-help-%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88-%E9%80%86%E5%85%83%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-5651 As we all known, xiaoxin is a brilliant coder. He knew palindromic strings when he was only a six grade student at elementry school. This summer he was working at Tencent as an intern. One day his leader came to ask xiaoxin for help. His leader gave him a string and he wanted xiaoxin to generate palindromic strings for him. Once xiaoxin generates a different palindromic string, his leader will give him a watermelon candy. The problem is how many candies xiaoxin’s leader needs to buy? Input This problem has multi test cases. First line contains a single integer T(T≤20) which represents the number of test cases.For each test case, there is a single line containing a string S(1≤length(S)≤1,000). Output For each test case, print an integer which is the number of watermelon candies xiaoxin’s leader needs to buy after mod 1,000,000,007. Examples intput 12343aaaabba output 123121 思路 其实这道题难点不是推出公式，而是求解公式(吐血.jpg)。 设字符串为s,字符串长度为Len,字母i出现次数的二分之一为c[i](取整); 如果有解，就要求出现次数是奇数的字母不超过1个(废话)，然后我们只需要考虑一边的所有情况，另一边跟它一样就能构成回文序列。只考虑一边时，共有Len/2个字符,根据高中学的排列组合可知，所有的排列情况是\frac{A_{Len/2}^{Len/2}}{A_{c[1]}^{c[1]}A_{c[2]}^{c[2]}...{A_{c[i]}^{c[i]}}} \Longrightarrow \frac{Len/2!}{c[1]!c[2]!...c[i]!} 关键就是如何求解这个公式了，由题目可知，Len/2最大是500，也就是要算500!，很明显要爆精度。因为答案对(1e9+7)取摸，这里引入一个转化：(a$ \times $b)%m $\rightarrow$ (a%m $ \times $ b%m )%m 显然正确,所以我们求阶乘的时候只要边乘边对(1e9+7)取模就不会爆精度。但是 (a $ \div $ b)%m $ \not= $ ((a%m) $ \div $ (b%m))%m,所以我们要用逆元变除法为乘法，就可以边乘边取模。 这道题我是用的拓展欧几里德算法求逆元，不知道的可以看我的另一篇博客数论笔记本 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xfffffff#define MAXN 6typedef unsigned long long LL;typedef long long ll;const int mod =1e9+7;ll fac(int n) //求阶乘 &#123; if(n==1||n==0) return 1; else &#123; ll ans=1; for(int i=2;i&lt;=n;i++) ans=(ans*i)%mod; //边乘边取模 return ans; &#125;&#125;int x,y;int exgcd(int a,int b) //拓展欧几里德算法，求出的x,即为a%b下a的逆元 &#123; if(b==0) &#123; x=1;y=0; return a; &#125; int r=exgcd(b,a%b); int c=x; x=y; y=c-a/b*y; return r;&#125;int main()&#123; ll ans; int book[26],n,Flag=0,Len; char s[1005]; cin&gt;&gt;n; while(n--) &#123; CRL(book); Flag=0; ans=0; scanf("%s",s); Len=strlen(s); for(int i=0; i&lt;Len; i++) book[s[i]-'a']++; for(int i=0; i&lt;26; i++) if(book[i]&amp;1) Flag++; if(Flag&gt;1) //如果出现次数为奇数的字母超过1,无解 ans=0; else &#123; ans=fac(Len/2); for(int i=0; i&lt;26; i++) if(book[i]&gt;1) &#123; exgcd(fac(book[i]/2),mod); x=x&lt;0? x+mod:x; //x小于0的话要转换成正数 ans=ans*x%mod; &#125; &#125; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>排列组合</tag>
        <tag>数学</tag>
        <tag>逆元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LCP Array(排列组合)]]></title>
    <url>%2FLCP-Array-%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-5635 Peter has a string $s=s_1s_2…s_n$, let $suff_i=s_is_{i+1}…s_n$ be the suffix start with $i^{th}$ character of $s$. Peter knows the lcp (longest common prefix) of each two adjacent suffixes which denotes as $a_i=lcp(suff_i,suff_{i+1})(1≤i&lt;n)$. Given the lcp array, Peter wants to know how many strings containing lowercase English letters only will satisfy the lcp array. The answer may be too large, just print it modulo $10^9+7$. Input There are multiple test cases. The first line of input contains an integer T indicating the number of test cases. For each test case: The first line contains an integer n ($2≤n≤10^5$) — the length of the string. The second line contains n−1 integers: $a_1,a_2,…,a_{n−1} (0≤a_i≤n)$. The sum of values of n in all test cases doesn’t exceed $10^6$. Output For each test case output one integer denoting the answer. The answer must be printed modulo $10^9+7$. Examples intput 1234567330 043 2 131 2 output 12316250260 思路 有解的条件：以样例2为例:$lcp_1=3 \Rightarrow s_1=s_2,s_2=s_3,s_3=s_4$,要有解显然$lcp_i=lcp_{i-1}-1$一定成立，而且$lcp_{n-1}$不可能大于1,也就是说如果$lcp_i$=n,那么$lcp_i$到$lcp_{i+n}$的值一定是n到1递减。 计算有解时的答案：显然当$lcp_i$=n(n&gt;0)时，$s_i$到$s_{i+n}$都为同一个字母，如果$lcp_i$=0,则$s_i$和$s_{i+1}$为不同字母，所以当前一种字母确定时，后一种字母就有25种可能。 所以如果有解，lcp数组中0的个数为n,答案就是$26 \times 25^n$。我也是在草稿本上先找到规律AC了才推出原理的 代码12345678910111213141516171819202122232425262728293031323334353637383940#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xfffffff#define M 100000typedef unsigned long long LL;typedef long long ll;const int mod =1e9+7;int main()&#123; int n,len,lcp[M],Flag=0; ll ans; cin&gt;&gt;n; while(n--) &#123; Flag=0; ans=26; cin&gt;&gt;len; for(int i=1; i&lt;len; i++) &#123; scanf("%d",&amp;lcp[i]); if(lcp[i]+1!=lcp[i-1]&amp;&amp;lcp[i-1]&gt;0) //如果不是前比后多一且前一个不为0 Flag=1; else if(lcp[i]==0) ans=(ans*25)%mod; &#125; if(Flag||lcp[len-1]&gt;1) //lcp数组末尾一定是0或1 cout&lt;&lt;0&lt;&lt;endl; else cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>排列组合</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一个人的旅行(Dijkstra算法)]]></title>
    <url>%2F%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E6%97%85%E8%A1%8C-%E6%9C%80%E7%9F%AD%E8%B7%AFDijkstra%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-2066 &emsp;虽然草儿是个路痴（就是在杭电待了一年多，居然还会在校园里迷路的人，汗~),但是草儿仍然很喜欢旅行，因为在旅途中 会遇见很多人（白马王子，^0^），很多事，还能丰富自己的阅历，还可以看美丽的风景……草儿想去很多地方，她想要去东京铁塔看夜景，去威尼斯看电影，去阳明山上看海芋，去纽约纯粹看雪景，去巴黎喝咖啡写信，去北京探望孟姜女……眼看寒假就快到了，这么一大段时间，可不能浪费啊，一定要给自己好好的放个假，可是也不能荒废了训练啊，所以草儿决定在要在最短的时间去一个自己想去的地方！因为草儿的家在一个小镇上，没有火车经过，所以她只能去邻近的城市坐火车（好可怜啊~）。 Input 输入数据有多组，每组的第一行是三个整数T，S和D，表示有T条路，和草儿家相邻的城市的有S个，草儿想去的地方有D个；接着有T行，每行有三个整数a，b，time,表示a,b城市之间的车程是time小时；(1=&lt;(a,b)&lt;=1000;a,b 之间可能有多条路)接着的第T+1行有S个数，表示和草儿家相连的城市；接着的第T+2行有D个数，表示草儿想去地方。 Output 输出草儿能去某个喜欢的城市的最短时间。 Examples intput 1234567896 2 31 3 51 4 72 8 123 8 44 9 129 10 21 28 9 10 output 19 思路 一读完题就开始敲Floyd，然后没有意外地T了。 经过大佬的一番点拨，我们把草儿家看成一个节点0，邻近的城市和草儿家的距离为0，这样就转换成了最单纯的单源最短路问题。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))typedef unsigned long long LL;typedef long long ll;const int mod =1e9+7;#define MAX 99999bool visit[1005];int Distance[1005],map[1005][1005],m,n,MaxNode;// Distance:源点到点i的距离 MaxNode:最大的节点void Dijkstar(int v0) //v0为源点&#123; CRL(visit); visit[v1]=1; for(int i=1; i&lt;=MaxNode; i++) Distance[i]=map[v1][i]; int k=1,t=1,v,w,Min; // 开始主循环，每次求得V0到某个V顶点的最短路径 for( v=1; v&lt;=MaxNode; v++ ) &#123; Min=MAX; for(w=1; w&lt;=MaxNode; w++ ) &#123; if(!visit[w]&amp;&amp;Distance[w]&lt;Min ) &#123; k=w; Min=Distance[w]; &#125; &#125; visit[k]=1; // 将目前找到的最近的顶点置1 // 修正当前最短路径及距离 for(w=0; w&lt;=MaxNode; w++) &#123; // 如果经过v顶点的路径比现在这条路径的长度短就修正 if( !visit[w] &amp;&amp; (Min+map[k][w]&lt;Distance[w]) ) Distance[w]=Min+map[k][w]; // 修改当前路径长度 &#125; &#125;&#125;void create() //建图&#123; int x,y,way; memset(map,1,sizeof(map)); //把map数组全部置为无穷大，准确来说现在map中每个元素在内存中为00000001000000010000000100000001 for(int i=1; i&lt;=m; i++) &#123; scanf("%d%d%d",&amp;x,&amp;y,&amp;way); MaxNode=MaxNode&gt;x?MaxNode:x; MaxNode=MaxNode&gt;y?MaxNode:y; if(way&lt;map[x][y]) map[x][y]=map[y][x]=way; &#125; for(int i=0; i&lt;n; i++) &#123; cin&gt;&gt;x; map[0][x]=map[x][0]=0; &#125; return;&#125;int main()&#123; int T,ans=99999,want; while(cin&gt;&gt;m&gt;&gt;n&gt;&gt;T) &#123; ans=99999; create(); Dijkstra(0); for(int i=0; i&lt;T; i++) &#123; cin&gt;&gt;want; ans=min(ans,Distance[want]); &#125; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ACboy needs your help(分组背包)]]></title>
    <url>%2FACboy-needs-your-help-%E5%88%86%E7%BB%84%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-1712 ACboy has N courses this term, and he plans to spend at most M days on study.Of course,the profit he will gain from different course depending on the days he spend on it.How to arrange the M days for the N courses to maximize the profit? Input The input consists of multiple data sets. A data set starts with a line containing two positive integers N and M, N is the number of courses, M is the days ACboy has.Next follow a matrix A[i][j], (1&lt;=i&lt;=N&lt;=100,1&lt;=j&lt;=M&lt;=100).A[i][j] indicates if ACboy spend j days on ith course he will get profit of value A[i][j].N = 0 and M = 0 ends the input. Output For each data set, your program should output a line which contains the number of the max profit ACboy will gain. Examples intput 123456789102 21 21 32 22 12 12 33 2 13 2 10 0 output 123346 思路 这是一个典型的分组背包问题，我们可以转换成01背包求解。 核心代码 12345for(int i=1;i&lt;=n;i++) for(int j=V;j&gt;=0;j--) for(int k=0;k&lt;=V;k++) //转01背包，注意三重循环顺序 if(j&gt;=k) dp[j]=max(dp[j],dp[j-k]+map[i][k]);]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>背包问题</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cow Contest(floyd))]]></title>
    <url>%2FCow-Contest-floyd%2F</url>
    <content type="text"><![CDATA[描述传送门：poj-3660 N (1 ≤ N ≤ 100) cows, conveniently numbered 1..N, are participating in a programming contest. As we all know, some cows code better than others. Each cow has a certain constant skill rating that is unique among the competitors. The contest is conducted in several head-to-head rounds, each between two cows. If cow A has a greater skill level than cow B (1 ≤ A ≤ N; 1 ≤ B ≤ N; A ≠ B), then cow A will always beat cow B. Farmer John is trying to rank the cows by skill level. Given a list the results of M (1 ≤ M ≤ 4,500) two-cow rounds, determine the number of cows whose ranks can be precisely determined from the results. It is guaranteed that the results of the rounds will not be contradictory. Input Line 1: Two space-separated integers: N and M Lines 2..M+1: Each line contains two space-separated integers that describe the competitors and results (the first integer, A, is the winner) of a single round of competition: A and B. Output Line 1: A single integer representing the number of cows whose ranks can be determined. Examples intput 1234565 54 34 23 21 22 5 output 12 思路 把比赛看成是一个有向图，问题其实就转化成求了求有多少个顶点和其他所有顶点都连通。 形象地说就是当一头牛胜负加起来为n-1时，也就是和其他的牛都比赛过(包括间接的)就能确定它的名次。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll;const int mod =1e9+7;int map[105][105],win[105],defeat[105];int main()&#123; int n,w,a,b,ans; while(cin &gt;&gt; n &gt;&gt; w) &#123; ans=0; CRL(map); CRL(win); CRL(defeat); while(w--) &#123; cin&gt;&gt;a&gt;&gt;b; if(!map[a][b]) &#123; map[a][b]=1; win[a]++; defeat[b]++; &#125; &#125; for(int k=1; k&lt;=n; k++) for(int j=1; j&lt;=n; j++) for(int i=1; i&lt;=n; i++) if(map[j][k]&amp;&amp;map[k][i]&amp;&amp;!map[j][i]) &#123; map[j][i]=1; win[j]++; defeat[i]++; &#125; for(int i=1; i&lt;=n; i++) if(win[i]+defeat[i]+1==n) ans++; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数论笔记本]]></title>
    <url>%2F%E6%95%B0%E8%AE%BA%E7%AC%94%E8%AE%B0%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[数论是个好东西。 欧几里德算法(gcd) 欧几里德算法又称辗转相除法，用于计算两个正整数a，b的最大公约数。 定理 $gcd(a,b)=gcd(b,a$ $mod$ $b)$ 特别的：$gcd(a,0)=a$ 证明充分性 设c为a,b的公约数$\because a|c$，$b|c&emsp;&emsp;&emsp;$&emsp;（|：整除）又$\because a=kb+(a$ $mod$ $b),$即$a$ $mod$ $b = a-kb$$\therefore (a$ $mod$ $b) | c$ 必要性 设$c$为$b$，$a$ $mod$ $b$的公约数$\because b|c,&emsp;(a$ $mod$ $b)|c$又$\because a=kb+(a$ $mod$ $b)$$\therefore a|c$ 代码123456int gcd(int a, int b)&#123; if(b == 0) return a; return gcd(b, a % b);&#125; 扩展欧几里德算法 扩展欧几里德算法是用来在已知a, b求解一组x，y，使它们满足等式：$ ax+by = gcd(a, b)$（解一定存在，根据数论中的相关定理）。扩展欧几里德常用在求解模线性方程及方程组中。 代码因为不好描述，所以先给出代码。1234567891011121314int x,y;int exgcd(int a,int b) //拓展欧几里德算法，求出的x,即为a%b下a的逆元 &#123; if(b==0) &#123; x=1;y=0; return a; &#125; int r=exgcd(b,a%b); int c=x; //c只是为了储存x的值 x=y; y=c-a/b*y; return r;&#125; 证明 递归之后，$ a’=b ,&emsp; b’=a \% b = a-a/b \times b $ （这里的/为计算机里的除法）$a’x+b’y=gcd(a,b)$代入化简$\Rightarrow ay+b(x-a/b \times y) = gcd(a,b) $又$\because ax+by = gcd(a,b)$$\therefore x=y ,&emsp;y=x-a/b \times y$最后的$x,y$即为答案。假设d=gcd(a,b),则x，y所有解：$ x=x+(b/d)t$，$y=y-(a/d)t$;&emsp;其中t为任意常整数 乘法逆元 若$ ax \equiv 1$ $mod$ $m$, 则称a关于1模m的乘法逆元为x。也可表示为$ax \equiv 1(mod$ $m$)。 如果$a,m$不互质，则无解。如果$m$为质数，则从1到$m-1$的任意数都与$m$互质，即在1到$m-1$之间都恰好有一个关于模$m$的乘法逆元。 求法费马小定理求逆元。 费马小定理：$a^{m-1} \equiv 1(mod$ $m$) (m为素数) 变形得: $a \cdot a^{m-2} \equiv 1(mod$ $m$) 故$a^{m-2}$为a在模m下的逆元。($a^{m-2}$用快速幂求解即可) 注意：$m$必须是质数，且$a,m$互质。(ACM的题一般都是模($10^9+7$),所以基本上都能用) 扩展欧几里德算法求逆元 扩展欧几里德算法:$ ax+by = gcd(a, b) $ 令$b=m$ ,由于$a,m$互质，所以$gcd(a,m)$=1，即$ ax+my = 1 $，两边同时模m，得$ax \equiv 1(mod$ $m$) 这样解出来的$x$就是$a$在模$m$下的逆元。 同样，也要求$m$必须是质数，且$a,m$互质。 欧拉定理求逆元 欧拉定理：$a^{ \varphi (m)} \equiv 1(mod$ $m$)&emsp;&emsp;($\varphi (m)$是小于m且与m互质的数的个数。) 变形得: $a \cdot a^{ \varphi (m)-1} \equiv 1(mod$ $m$) 故$ a^{ \varphi (m)-1} $为a在模m下的逆元。($a^{ \varphi (m)-1}$用快速幂求解即可) 欧拉定理实际上是费马小定理的推广。 应用 有时候在求$({a \over b})\%m$时,可能由于b过大而丢失精度，这时就可以求出b的逆元来变除为乘，具体如下。 设$x$为$b$模$m$的逆元。 ${({a \over b})\%m} \Rightarrow {({a \over b})\times 1 \times\%m} \Rightarrow {({a \over b})\times {b \cdot x} \times\%m} \Rightarrow a \cdot x\%m$ 快速幂 快速幂可以大大减少运算时循环的次数。 推导过程 a^n= \begin{cases} ({a^2})^{n \over 2} &\mbox{n为偶数}\\ a \cdot ({a^2})^{n \over 2} &\mbox{n为奇数} \end{cases} 上述变换显然正确。 代码123456789101112int QuickPow(int x, int n) &#123; int ans = 1; while (n &gt; 0) &#123; if(n&amp;1) ans*=x; x*=x; n/=2 ; &#125; return ans; &#125; 如果题目要求对m取模，则1234567891011121314int QuickPow(int a,int b,int m)&#123; int ans=1; a%=m; while(b&gt;0) &#123; if(b&amp;1) ans=(ans*a)%m; b/=2; a=(a*a)%m; &#125; return ans;&#125; 矩阵快速幂 加速矩阵的幂运算。 和快速幂的思想是一样的，需要重载一下 * 运算符。 代码123456789101112131415161718192021222324struct Mat&#123; //矩阵 int data[105][105],n; Mat()&#123;memset(data,0,sizeof(data));&#125; //构造函数 Mat operator*(const Mat &amp;h)&#123; //重载'*'运算符 Mat c; for(int i=0;i&lt;n;i++) for(int j=0;j&lt;n;j++) for(int k=0;k&lt;n;k++) c.data[i][j]+=data[i][k]*h.data[k][j]; return c; &#125;&#125;;Mat Mat_qpow(Mat &amp;a,int n)&#123;//矩阵快速幂 Mat ans;ans.n=a.n; for(int i=0;i&lt;n;i++) ans.data[i][i]=1; while(n)&#123; if(n&amp;1) ans=ans*a; a=a*a; n&gt;&gt;=1; &#125; return ans;&#125; 斯特林公式 斯特林公式是一条用来取n的阶乘的近似值的数学公式。一般来说，当n很大的时候，n阶乘的计算量十分大，所以斯特林公式十分好用，而且，即使在n很小的时候，斯特林公式的取值已经十分准确。 公式 $$n!\approx\sqrt{2\pi n}(\frac{n}{e})^n$$ 应用 求$n!$在十进制下的位数，暴力肯定不行，我们直接用斯特林公式求出$n!$的近似值，再求以10为底近似值的对数 +1(求其他进制下的位数类似，修改底数即可)。 容斥原理 在计数时，必须注意没有重复，没有遗漏。为了使重叠部分不被重复计算，人们研究出一种新的计数方法，这种方法的基本思想是：先不考虑重叠的情况，把包含于某内容中的所有对象的数目先计算出来，然后再把计数时重复计算的数目排斥出去，使得计算的结果既无遗漏又无重复，这种计数的方法称为容斥原理。 举例 如果被计数的事物有A、B、C三类，那么：A∪B∪C = A+B+C - A∩B - B∩C - C∩A + A∩B∩C 例如求给出一个数n，求1到$n$中，有多少个数不是2，5，11，13的倍数。$A,B,C,D$分别是$n/2,n/5,n/11,n/13$。 Lucas定理 Lucas定理是用来求 $C(n,m) mod $ $p$，$p$为素数的值。适用领域范围：大组合数求模,n,m&gt;p 公式 C_n^m\%p=(C_\frac{n}{p}^\frac{m}{p}C_{n\%p}^{m\%p})\%p 然后继续对$C_\frac{n}{p}^\frac{m}{p}$使用Lucas定理，用逆元求出$C_{n\%p}^{m\%p}$。 证明 详见百度百科：虚空传送门 判断一个组合数是奇数还是偶数 $C_n^k$是奇数时n&amp;k==k 中国剩余定理 中国剩余定理又名孙子定理，是中国古代求解一次同余式组的方法。 S: \begin{cases} x \equiv a_1 (mod\ m_1)\\ x \equiv a_2 (mod\ m_2) \\ x \equiv a_3 (mod\ m_3) \\ ...\\ x \equiv a_n (mod\ m_n) \end{cases}前提条件$m_1,m_2,m_3…m_n$必须两两互质。 公式 x = (\sum_{i=1}^n a_i t_i M_i)modM$M_i$为除$m_i$外其他所有$m$的乘积。$t_i=M_i^{-1}$为$M_i$模$m_i$的数论倒数($t_i$为$M_i$模$m_i$意义下的乘法逆元)。 未完待续。。。]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[多重背包问题]]></title>
    <url>%2F%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[描述 有n种物品和一个容积为V的背包，第i种物品有amount[i]个，体积cost[i]和价值valum[i]，问如何选取物品使得放入背包的物品价值之和最大。 思路 跟完全背包问题类似，这里就直接给出基本算法的状态转移方程dp[i][j]=Max\{dp[i-1][j-k \times cost[i] + k \times valum[i]\}(0\leq k \leq amount[i] 且 0\leq k \times cost[i] \leq V) 时间复杂度:O($V \times {\sum_{i=1}^N{amount[i]}}$)，空间复杂度:O(NV)。 优化 amount[i]==1时，当01背包处理。 amount[i]$ \times $cost&gt;=V时，当完全背包处理。 amount[i]$ \geq $1时，采用二进制拆分，从而转换成01背包求解，具体如下：&emsp;在上面的状态转移方程中，我们让k从1$ \to $amount[i]来实现拿不同的个数，从而转换成01背包问题，但我们可以发现，我们只要将amount[i]拆分成几个数，就可以用他们组合成小于amount[i]的任何数。例如:amount[i]=11,11的二进制为1011，把11拆成100(4)、0010(2)、0001(1)、4(11-4-2-1),这样就可以用4、2、1、4来组合成11以内所有的整数，这样放第这种物品时本来放11次，现在只要放4次，虽然仍然有重复，但也实现了优化。 初始化 如果题目没有要求必须装满，那么我们只要将dp数组全部置为0即可。 如果必须装满，我们就将dp[0]初始化为0，其他初始化为$-\infty$。 完整代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include&lt;iostream&gt;#include&lt;algorithm&gt; #include&lt;string.h&gt; #include&lt;string&gt; #include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define M 100000000typedef unsigned long long LL;typedef long long ll;const int mod =1e9+7;int V,dp[120002];void ZeroOnePack(int cost,int valum) //01背包问题&#123; for(int i=V;i&gt;=cost;i--) dp[i]=max(dp[i],dp[i-cost]+valum); return; &#125;void CompletePack(int cost,int valum) //完全背包问题&#123; for(int i=cost;i&lt;=V;i++) dp[i]=max(dp[i],dp[i-cost]+valum); return;&#125;void MultiplePack(int cost,int valum,int amount) //多重背包问题&#123; if(cost*amount&gt;=V) CompletePack(cost,valum); else &#123; int k=1; while(k&lt;amount) &#123; ZeroOnePack(cost*k,valum*k); amount-=k; k=k&lt;&lt;1; //k*=2 &#125; ZeroOnePack(cost*amount,valum*amount); &#125; return; &#125;int main()&#123; int n,cost[1000],valum[1000],amount[1000]; while(cin&gt;&gt;n&gt;&gt;V) &#123; CRL(dp); for(int i=1;i&lt;=n;i++) cin&gt;&gt;cost[i]&gt;&gt;valum[i]&gt;&gt;amount[i]; for(int i=1;i&lt;=n;i++) MultiplePack(cost[i],valum[i],amount[i]); cout&lt;&lt;dp[V]&lt;&lt;endl; &#125; return 0;&#125; 例题 换一种问法而已：poj 1014 参考资料《背包九讲》]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>背包问题</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[完全背包问题]]></title>
    <url>%2F%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[描述 有n种物品和一个容积为V的背包，每种物品i都有无限个，都有体积cost[i]和价值valum[i]，问如何选取物品使得放入背包的物品价值之和最大。 思路 完全背包和01背包很像，我们首先想到的应该是每种物品在拿0~n个中选max价值的，我们依旧用dp[i][j]来储存将前i种物品放入体积为j的背包中物品价值之和最大值，那么状态转移方程便是在放得下的情况下dp[i][j]=Max\{dp[i-1][j-k \times cost[i] + k \times valum[i]\}(0\leq k \times cost[i] \leq V) 这样最后求出来的dp[n][V]就是最后答案。 时间复杂度:O($V \times {\sum_{i=1}^N{V \over {c[i]}}}$)，空间复杂度:O(NV)。 优化 在01背包问题里面，我们逆序遍历V$(j:V \to 0)$是为了保证dp[j-cost[i]]始终是i-1物品推出的，从而保证每种物品只用一次。而完全背包问题里面我们就可以正序遍历，这样就可以在一次遍历dp[V]中考虑第i种物品的所有拿法。 核心代码如下: 123for(int i=1;i&lt;=n;i++) for(int j=cost[i];j&lt;=V;j++) dp[j]=max(dp[j],dp[j-cost[i]]+valum[i]); 优化后时间复杂度为O(NV)，空间复杂度为O(N)。 初始化 如果题目没有要求必须装满，那么我们只要将dp数组全部置为0即可。 如果必须装满，我们就将dp[0]初始化为0，其他初始化为$-\infty$。 例题 板子题：洛谷1616]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>背包问题</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[01背包问题]]></title>
    <url>%2F01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[描述 有n个物品和一个容积为V的背包，每个物品i都有体积cost[i]和价值valum[i]，问如何选取物品使得放入背包的物品价值之和最大。 思路 01背包的特点就是每种物品都只有一个，所以每个物品只有拿和不拿两种状态。 我们用dp[i][j]来储存将前i件物品放入体积为j的背包中物品价值之和最大值，那么状态转移方程便是在放得下的情况下 dp[i][j]=Max \begin{cases} dp[i-1][j] &\mbox{不拿第i个，状态跟i-1一样}\\ dp[i-1][j-cost[i]]+valum[i] &\mbox{拿第i个，那么就把前cost[i]体积的物品拿走再放} \end{cases} (j:0 \to V,i:0 \to n) 这样最后求出来的dp[n][V]就是最后答案。 优化 上面的时间复杂度是O(NV)已经无法再优化了,而空间复杂度可以优化到O(N)：我们用二维数组无非是为了保证状态转移方程里的dp[i-1][j-cost[i]]是上一个物品推出来的，如果我们直接改成dp[j]=max(dp[j],dp[j-cost[i]]+valum[i])的话，在$(j:0 \to V)$过程进行到后面的时候,dp[j-cost]有可能是已经在前面就放了i物品的状态，此时再+valumi就不符合每种物品都只有一个的题意了。 实际上。如果我们在遍历j的时候，采用逆序，即$(j:V \to 0)$，就可以保证dp[j-cost[i]]始终是i-1物品推出的。 核心代码如下123for(int i=1;i&lt;=n;i++) for(int j=V;j&gt;=cost[i];j--) dp[j]=max(dp[j],dp[j-cost[i]]+valum[i]); 初始化 如果题目没有要求必须装满，那么我们只要将dp数组全部置为0即可。 如果必须装满，我们就将dp[0]初始化为0，其他初始化为$-\infty$，$(j:V \to 0)$时每次判断dp[j-cost]是否&gt;=0，是的话就进行状态转移。(自行体会，逃.jpg) 例题 板子题：洛谷1048 变式：洛谷1164 变式：2018年全国多校算法寒假训练营练习比赛(第二场) problem B（需要一个微妙的预处理）]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>背包问题</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小牛vs小客(巴什博弈变形)]]></title>
    <url>%2F%E5%B0%8F%E7%89%9Bvs%E5%B0%8F%E5%AE%A2-%E5%B7%B4%E4%BB%80%E5%8D%9A%E5%BC%88%E5%8F%98%E5%BD%A2%2F</url>
    <content type="text"><![CDATA[描述题目链接 小牛和小客玩石子游戏，他们用n个石子围成一圈，小牛和小客分别从其中取石子，谁先取完谁胜，每次可以从一圈中取一个或者相邻两个，每次都是小牛先取，请输出胜利者的名字。（1 2 3 4 取走 2 13 不算相邻） Intput 输入包括多组测试数据每组测试数据一个n（1≤n≤10^9） Output 每组用一行输出胜利者的名字（小牛获胜输出XiaoNiu，小客获胜输出XiaoKe） Examples intput 1223 output 12XiaoNiuXiaoKe 思路 当n&lt;=2时，毫无疑问是先手获胜。 当n&gt;2时，先手拿了之后，石子形状就可以看成一条线，后手可以选择拿1个或2个，使得剩下的石子是对称的，然后无论先手怎样拿，后手总能在对称位置拿到石子，最后一定是后手赢。 代码1234567891011121314#include&lt;iostream&gt;using namespace std;int main()&#123; int x; while(cin&gt;&gt;x) &#123; if(x&lt;=2) cout&lt;&lt;"XiaoNiu\n"; else cout&lt;&lt;"XiaoKe\n"; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>博弈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[不凡的夫夫(斯特灵公式)]]></title>
    <url>%2F%E4%B8%8D%E5%87%A1%E7%9A%84%E5%A4%AB%E5%A4%AB-%E6%96%AF%E7%89%B9%E7%81%B5%E5%85%AC%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[描述题目链接 夫夫有一天对一个数有多少位数感兴趣，但是他又不想跟凡夫俗子一样，所以他想知道给一个整数n，求n！的在8进制下的位数是多少位。 Input 第一行是一个整数t(0&lt;t&lt;=1000000)(表示t组数据)接下来t行，每一行有一个整数n(0&lt;=n&lt;=10000000) Output 输出n！在8进制下的位数。 Examples intput 12343425 output 123213 思路 看到n的值最大是1e7就知道不能暴力出奇迹，而求n!的位数，就很自然想到要用斯特林公式:$n!\approx\sqrt{2\pi n}(\frac{n}{e})^n$ 虽然斯特林公式只是求阶乘的近似值，但即使在n很小的时候，斯特林公式的取值已经十分准确。 再求以8为底近似值的对数 +1(求其他进制下的位数类似，修改底数即可)。 注意:C语言中不支持任意底数的求对数运算，我们小小的转换一下$\log_x y=\frac{lgy}{lgx}$ 代码12345678910111213141516171819202122232425#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt; #include&lt;string.h&gt; #include&lt;string&gt; #include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;const double Pi = acos(-1);const double e = 2.718281828459;int main()&#123; int t,n; scanf("%d",&amp;t); while(t--) &#123; scanf("%d",&amp;n); if(n==0||n==1) //注意特判 printf("1\n"); else printf("%d\n",(int)((log(2.0*Pi*n)/(log(8))/2.0 + n*log(n/e)/log(8))+1)); &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2 5 11 13的倍数(容斥原理)]]></title>
    <url>%2F2-5-11-13%E7%9A%84%E5%80%8D%E6%95%B0-%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[描述题目链接 给出一个数n，求1到n中，有多少个数不是2 5 11 13的倍数。 Intput 本题有多组输入每行一个数n，1&lt;=n&lt;=10^18. Output 每行输出输出不是2 5 11 13的倍数的数共有多少。 Examples intput 115 output 14 思路 遍历一遍感觉是很快了，时间复杂度O(n)，但还是会超时，其实这道题可以达到O(1)。 我们反过来思考，用总数减去倍数的个数，先不考虑公倍数的问题，再减去公倍数的个数。 假设有三个集合，那么 A∪B∪C = A+B+C - A∩B - B∩C - C∩A + A∩B∩C 代码12345678910111213141516#include&lt;stdio.h&gt;#include&lt;iostream&gt;using namespace std;#define LL long longint main()&#123; LL n,sum; while(scanf("%lld",&amp;n)!=EOF) &#123; sum=n/2+n/5+n/11+n/13; LL cnt=sum-n/10-n/22-n/26-n/55-n/65-n/143+n/110+n/130+n/286+n/715-n/1430; LL ans=n-cnt; printf("%lld\n",ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>容次原理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[欢迎来到Armin的博客]]></title>
    <url>%2FWelcome%2F</url>
    <content type="text"><![CDATA[欢迎来到Armin的博客，其他内容还在持续搭建（xjb摸索）中。 测试测试flash插件 测试插入代码1234567#include&lt;iostream&gt;using namespace std;int main()&#123; cout&lt;&lt;"Hello world!"&lt;&lt;endl;//测试注释 return 0;&#125; 测试链接分享代码 测试公式质能守恒方程可以用一$r=a-k*b r\div d-k*b\div d$个很简洁的方程式 $E=mc^2$ 来表达。 \ sum_{i=1}^n a_i=0f (x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2\ sum^{j-1}_{k=0}{\widehat{\gamma}_{kj} z_k}测试表格 姓名 分数 蒟蒻 59 神犇 100 测试矩阵 \begin{matrix} 1 & x & x^2 \\ 1 & y & y^2 \\ 1 & z & z^2 \\ \end{matrix} \begin{pmatrix} 1 & x & x^2 \\ 1 & y & y^2 \\ 1 & z & z^2 \\ \end{pmatrix} \begin{bmatrix} 1 & x & x^2 \\ 1 & y & y^2 \\ 1 & z & z^2 \\ \end{bmatrix} \begin{vmatrix} 1 & x & x^2 \\\ 1 & y & y^2 \\\ 1 & z & z^2 \end{vmatrix} \mu (d)= \begin{cases} 1 &\mbox{d=1} \\ (-1)^k &\mbox{$d= p_1*p_2*p_3*...*p_k,p_i$是互异素数}\\ 0 &\mbox{其余情况}\\ \end{cases} dp[i][j]=Max \begin{cases} dp[i-1][j] &\mbox{不拿第i个，状态跟i-1一样}\\ dp[i-1][j-cost[i]]+valum[i] &\mbox{i^2拿第i个，那么就把前cost[i]体积的物品拿走再放} \end{cases}]]></content>
  </entry>
</search>
