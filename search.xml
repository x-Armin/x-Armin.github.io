<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[还是畅通工程(最小生成树入门-Kruskal)]]></title>
    <url>%2F%E8%BF%98%E6%98%AF%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[描述传送门：poj-1875 &emsp;某省调查乡村交通状况，得到的统计表中列出了任意两村庄间的距离。省政府“畅通工程”的目标是使全省任何两个村庄间都可以实现公路交通（但不一定有直接的公路相连，只要能间接通过公路可达即可），并要求铺设的公路总长度为最小。请计算最小的公路总长度。 Input 测试输入包含若干测试用例。每个测试用例的第1行给出村庄数目N ( &lt; 100 )；随后的N(N-1)/2行对应村庄间的距离，每行给出一对正整数，分别是两个村庄的编号，以及此两村庄间的距离。为简单起见，村庄从1到N编号。 当N为0时，输入结束，该用例不被处理。 Output 对每个测试用例，在1行里输出最小的公路总长度。 Examples intput 12345678910111231 2 11 3 22 3 441 2 11 3 41 4 12 3 32 4 23 4 50 output 1235 思路 这是一道简单的最小生成树。 Kruskal算法就是在点之间加边，每次在剩下的边中选一条最小边,用这条边将端点的两个点加入生成，并满足这条边的添加不会使生成树产生回路（这条边的两个端点不都在生成树里面）。 用并查集来维护节点是否加入了生成树。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869//#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll;const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7;int Father[105];struct edge //存边&#123; int a,b,s;&#125; Edge[60000];int Find(int x) //找根节点&#123; return Father[x]==x? x:Father[x]=Find(Father[x]);&#125;void Union(int a,int b) //合并&#123; int fa=Find(a); int fb=Find(b); Father[fa]=fb;&#125;bool cmp(edge x,edge y)&#123; return x.s&lt;y.s;&#125;int main()&#123; ios::sync_with_stdio(false); //加速 int n=0,ans,add; while(cin&gt;&gt;n&amp;&amp;n) &#123; for(int i=0; i&lt;=n; i++) Father[i]=i; //初始化 ans=0; add=0; for(int i=0; i&lt;n*(n-1)/2; i++) cin&gt;&gt;Edge[i].a&gt;&gt;Edge[i].b&gt;&gt;Edge[i].s; sort(Edge,Edge+n*(n-1)/2,cmp); // 按边的权值有小到大排序 for(int i=0; i&lt;n*(n-1)/2&amp;&amp;add&lt;n-1; i++) if(Find(Edge[i].a)!=Find(Edge[i].b)) //依次添加 &#123; add++; ans+=Edge[i].s; Union(Edge[i].a,Edge[i].b); &#125; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>图论</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How Many Answers Are Wrong(带权并查集)]]></title>
    <url>%2FHow-Many-Answers-Are-Wrong%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-3038 TT and FF are … friends. Uh… very very good friends -____-b FF is a bad boy, he is always wooing TT to play the following game with him. This is a very humdrum game. To begin with, TT should write down a sequence of integers-_-!!(bored). Then, FF can choose a continuous subsequence from it(for example the subsequence from the third to the fifth integer inclusively). After that, FF will ask TT what the sum of the subsequence he chose is. The next, TT will answer FF’s question. Then, FF can redo this process. In the end, FF must work out the entire sequence of integers. BoringBoringa very very boring game!!! TT doesn’t want to play with FF at all. To punish FF, she often tells FF the wrong answers on purpose. The bad boy is not a fool man. FF detects some answers are incompatible. Of course, these contradictions make it difficult to calculate the sequence. However, TT is a nice and lovely girl. She doesn’t have the heart to be hard on FF. To save time, she guarantees that the answers are all right if there is no logical mistakes indeed. What’s more, if FF finds an answer to be wrong, he will ignore it when judging next answers. But there will be so many questions that poor FF can’t make sure whether the current answer is right or wrong in a moment. So he decides to write a program to help him with this matter. The program will receive a series of questions from FF together with the answers FF has received from TT. The aim of this program is to find how many answers are wrong. Only by ignoring the wrong answers can FF work out the entire sequence of integers. Poor FF has no time to do this job. And now he is asking for your help~(Why asking trouble for himself~~Bad boy) Input Line 1: Two integers, N and M (1 &lt;= N &lt;= 200000, 1 &lt;= M &lt;= 40000). Means TT wrote N integers and FF asked her M questions. Line 2..M+1: Line i+1 contains three integer: Ai, Bi and Si. Means TT answered FF that the sum from Ai to Bi is Si. It’s guaranteed that 0 &lt; Ai &lt;= Bi &lt;= N. You can assume that any sum of subsequence is fit in 32-bit integer. Output A single line with a integer denotes how many answers are wrong. Examples intput 12345610 51 10 1007 10 281 3 324 6 416 6 1 output 11 题意 有一个数列，给你几条语句，每条都是a,b,s形式，代表这个数列从a到b的和为s，求这些语句有几条是跟它之前的语句矛盾的。 思路 这是一道裸的带权并查集，种类并查集就是比普通并查集多维护一个权值数组valum[]。其实和种类并查集很像，种类并查集就是权值都为1的带权并查集再膜一下种类数。 这道题valum[i]表示i到fa[i]的总和。如何来维护valum数组呢，我们需要修改一下Union函数和Find函数。 Union函数稍有变化,加了一句：valum[fa]=s+valum[b]-valum[a];画个图出来就很容易理解 Find函数的valum[x]+=valum[tem];也是同理，画个图就好理解了。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667//#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll;const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7;int valum[200005],Fa[200005],n,time,ans=0;void init(int n)&#123; for(int i=0; i&lt;=n; i++) Fa[i]=i; CRL(valum); ans=0;&#125;int Find(int x)&#123; if(Fa[x]!=x) &#123; int tem=Fa[x]; Fa[x]=Find(Fa[x]); valum[x]+=valum[tem]; &#125; return Fa[x];&#125;void Union(int a,int b,int s)&#123; int fa=Find(a); int fb=Find(b); if(fa!=fb) &#123; Fa[fa]=fb; valum[fa]=s+valum[b]-valum[a]; &#125; else if(valum[a]!=s+valum[b]) ans++;&#125;int main()&#123; ios::sync_with_stdio(false); //加速cin,cout int a,b,s; while(cin&gt;&gt;n&gt;&gt;time) &#123; init(n); while(time--) &#123; cin&gt;&gt;a&gt;&gt;b&gt;&gt;s; Union(--a,b,s); //因为元素是离散的，要--a,这样valum[b]-valum[a]；才是我们想要的区间和 &#125; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125; 类似题 poj-1988]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Find them,Catch them(种类并查集)]]></title>
    <url>%2FFind-them-Catch-them%2F</url>
    <content type="text"><![CDATA[描述传送门：poj-1703 &emsp;The police office in Tadu City decides to say ends to the chaos, as launch actions to root up the TWO gangs in the city, Gang Dragon and Gang Snake. However, the police first needs to identify which gang a criminal belongs to. The present question is, given two criminals; do they belong to a same clan? You must give your judgment based on incomplete information. (Since the gangsters are always acting secretly.) &emsp;Assume N (N &lt;= 10^5) criminals are currently in Tadu City, numbered from 1 to N. And of course, at least one of them belongs to Gang Dragon, and the same for Gang Snake. You will be given M (M &lt;= 10^5) messages in sequence, which are in the following two kinds: D [a] [b]where [a] and [b] are the numbers of two criminals, and they belong to different gangs. A [a] [b]where [a] and [b] are the numbers of two criminals. This requires you to decide whether a and b belong to a same gang. Input &emsp;The first line of the input contains a single integer T (1 &lt;= T &lt;= 20), the number of test cases. Then T cases follow. Each test case begins with a line with two integers N and M, followed by M lines each containing one message as described above. Output &emsp;For each message “A [a] [b]” in each case, your program should give the judgment based on the information got before. The answers might be one of “In the same gang.”, “In different gangs.” and “Not sure yet.” Examples intput 123456715 5A 1 2D 1 2A 1 2D 2 4A 1 4 output 123Not sure yet.In different gangs.In the same gang. 思路 这是一道裸的种类并查集，种类并查集就是比普通并查集多维护一个种类数组group[]。 这道题group[i]=1表示i和Fa[i]不是一个帮派。如何来维护group数组呢，我们需要修改一下Union函数和Find函数。 Union函数稍有变化,加了一句：group[fa]=(group[b]+1-group[a])%2;画个图出来就很容易理解 Find函数的group[x]=(group[x]+group[tem])%2;也是同理，画个图就好理解了。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576//#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll;const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7;const int M =1e5+5;int Fa[M],group[M];void init(int n)&#123; CRL(group); for(int i=0; i&lt;=n; i++) Fa[i]=i;&#125;int Find(int x)&#123; if(Fa[x]==x) return x; int tem=Fa[x]; Fa[x]=Find(tem); group[x]=(group[x]+group[tem])%2; //更新group数组，因为可能之前已经进行了一次合并， return Fa[x]; // group[x]保存的就可能不是跟现在根节点的关系，而是跟tem的关系。&#125;void Union(int a,int b)&#123; int fa=Find(a); int fb=Find(b); if(fa!=fb) &#123; Fa[fa]=fb; group[fa]=(group[b]+1-group[a])%2; //更新group数组 &#125;&#125;int main()&#123; int Case,n,m,a,b; char x; cin&gt;&gt;Case; while(Case--) &#123; cin&gt;&gt;n&gt;&gt;m; init(n); while(m--) &#123; getchar(); scanf("%c %d %d",&amp;x,&amp;a,&amp;b); //cin会超时 if(x=='D') Union(a,b); else &#123; if(Find(a)!=Find(b)) printf("Not sure yet.\n"); else if(group[a]==group[b]) printf("In the same gang.\n"); else printf("In different gangs.\n"); &#125; &#125; &#125; return 0;&#125; 类似题 poj-2492poj-1182]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[高维正方体(找规律+二项式定理+逆元)]]></title>
    <url>%2F%E9%AB%98%E7%BB%B4%E6%AD%A3%E6%96%B9%E4%BD%93%2F</url>
    <content type="text"><![CDATA[描述传送门：洛谷-1999 0维空间的元素是点，这个毋庸置疑。 2个0维空间的元素可以围成一个1维空间的元素，线段。 4个1维空间的元素可以围成一个2维空间的元素，正方形。 6个2维空间的元素可以围成一个3维空间的元素，正方体。 8个3维空间的元素可以围成一个4维空间的元素，超正方体。 …… 一个正方形中，有4个（顶）点，4条线段（边），1个正方形。 一个正方体中，有8个（顶）点，12条线段（棱），6个正方形（面），1个正方体。 …… 我们的问题是：给出a与b，请求出：在a维空间的元素中，包含着多少个b维空间的元素。答案可能很大，只需要输出它除以1000000007的余数。 Input 两个整数a,b，以空格隔开。 Output 一个整数，即答案。 Examples intput 13 1 output 112 思路 仔细观察4 4 18 12 6 1可以看出他们的共同点就是一个是$(x+2)^2$的展开式系数，一个是$(x+2)^3$的展开式系数，这时候我们就大胆的猜测$n$维立方体里包含的比他低维度的立方体个数就是$(x+2)^n$的展开式的系数，a维空间的元素中包含个b维空间的元素的个数就是$(x+2)^a$的展开式中$x^b$的系数。(事实证明是对的) 根据二项式定理，我们就得到了公式solve(a,b)=C_a^b\cdot2^{a-b}=\frac{a!}{b!(a-b)!}\cdot2^{a-b} 由于$C_a^b2$和$2^{a-b}$都太大了，但是由于要取模，我们就可以分别用逆元和快速幂求得值。 数据用$long &emsp; long$来存，否则会 爆精度。 逆元和快速幂详见另一篇博客：数论笔记本 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970//#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt; #include&lt;string.h&gt; #include&lt;string&gt; #include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = 2.718281828459;const int mod =1e9+7; ll fac(ll x) //阶乘 &#123; ll ans=1; for(int i=1;i&lt;=x;i++) ans=(ans*i)%mod; return ans;&#125;ll x,y;ll exgcd(ll a,ll b) //扩展欧几里德求逆元 &#123; if(b==0) &#123; x=1;y=0; return a; &#125; ll r=exgcd(b,a%b); ll c=x; x=y; y=c-a/b*y; return r;&#125;ll qpow(ll a,ll b) //快速幂 &#123; ll ans=1; a%=mod; while(b&gt;0) &#123; if(b&amp;1) ans=(ans*a)%mod; b/=2; a=(a*a)%mod; &#125; return ans;&#125;int main()&#123; int a,b;ll ans; while(cin&gt;&gt;a&gt;&gt;b) &#123; if(a&lt;b) ans=0; //特判 else &#123; exgcd((fac(b)*fac(a-b))%mod,mod); x= x&lt;=0? x+=mod:x; //保证x&gt;0 ans=(((fac(a)*x)%mod)*qpow(2,a-b))%mod; &#125; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>排列组合</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Is It A Tree? (并查集入门)]]></title>
    <url>%2FIs-It-A-Tree-%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[描述传送门：poj-1308 &emsp;A tree is a well-known data structure that is either empty (null, void, nothing) or is a set of one or more nodes connected by directed edges between nodes satisfying the following properties.&emsp;There is exactly one node, called the root, to which no directed edges point.Every node except the root has exactly one edge pointing to it.&emsp;There is a unique sequence of directed edges from the root to each node.&emsp;For example, consider the illustrations below, in which nodes are represented by circles and edges are represented by lines with arrowheads. The first two of these are trees, but the last is not. &emsp;In this problem you will be given several descriptions of collections of nodes connected by directed edges. For each of these you are to determine if the collection satisfies the definition of a tree or not. Input &emsp;The input will consist of a sequence of descriptions (test cases) followed by a pair of negative integers. Each test case will consist of a sequence of edge descriptions followed by a pair of zeroes Each edge description will consist of a pair of integers; the first integer identifies the node from which the edge begins, and the second integer identifies the node to which the edge is directed. Node numbers will always be greater than zero. Output &emsp;For each test case display the line “Case k is a tree.” or the line “Case k is not a tree.”, where k corresponds to the test case number (they are sequentially numbered starting with 1). Examples intput 1234567896 8 5 3 5 2 6 45 6 0 08 1 7 3 6 2 8 9 7 57 4 7 8 7 6 0 03 8 6 8 6 45 3 5 6 5 2 0 0-1 -1 output 123Case 1 is a tree.Case 2 is a tree.Case 3 is not a tree. 思路 初始化每个点单独为一个集合，每次读入A,B就合并A,B所在的集合，每个集合都有一个代表元素，集合中的元素都指向代表元素并且只有代表元素指向自己，如果读入A,B的时候发现A,B的代表数组一样的话就说明有多个节点指向A或B,不是树。 由于节点不一定是从1开始的，如上图的第一个。所以我们用一个mark数组来标记一组数据中“提到”的节点，最后遍历一遍看连通分支数是否等于1。 有一组神坑数据：0 0-1 -1 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273//#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll;const double Pi = acos(-1);const double e = 2.718281828459;const int mod =1e9+7;int point[100005],mark[100005];int Find(int x) //找代表元素&#123; int tem=x; while(point[tem]!=tem) tem=point[tem]; int tem2=x; while(point[tem2]!=tem) //压缩路径 &#123; x=point[tem2]; point[tem2]=tem; tem2=x; &#125; return tem;&#125;int main()&#123; int a,b,Flag=0,sum,Case=0; while(cin&gt;&gt;a&gt;&gt;b&amp;&amp;a!=-1&amp;&amp;b!=-1) &#123; Case++; if(a==0&amp;&amp;b==0) &#123; printf("Case %d is a tree.\n",Case); //当数据只有0 0 时 continue; &#125; Flag=0; sum=0; for(int i=0; i&lt;100005; i++) point[i]=i; CRL(mark); do &#123; mark[a]=mark[b]=1; //标记提到过 if(Find(a)==Find(b)) //如果之前就连通，则不是数 Flag=1; else point[Find(a)]=point[Find(b)]; //合并 &#125; while(scanf("%d%d",&amp;a,&amp;b)&amp;&amp;a&amp;&amp;b); for(int i=1; i&lt;100005; i++) if(mark[i]&amp;&amp;point[i]==i) //找连通分支数 sum++; if(Flag||sum&gt;1) printf("Case %d is not a tree.\n",Case); else printf("Case %d is a tree.\n",Case); &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How Many Tables(并查集入门)]]></title>
    <url>%2FHow-Many-Tables-%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[描述传送门：HDU-1213 &emsp;Today is Ignatius’ birthday. He invites a lot of friends. Now it’s dinner time. Ignatius wants to know how many tables he needs at least. You have to notice that not all the friends know each other, and all the friends do not want to stay with strangers.&emsp;One important rule for this problem is that if I tell you A knows B, and B knows C, that means A, B, C know each other, so they can stay in one table.&emsp;For example: If I tell you A knows B, B knows C, and D knows E, so A, B, C can stay in one table, and D, E have to stay in the other one. So Ignatius needs 2 tables at least. Input &emsp;The input starts with an integer T(1&lt;=T&lt;=25) which indicate the number of test cases. Then T test cases follow. Each test case starts with two integers N and M(1&lt;=N,M&lt;=1000). N indicates the number of friends, the friends are marked from 1 to N. Then M lines follow. Each line consists of two integers A and B(A!=B), that means friend A and friend B know each other. There will be a blank line between two cases. Output For each test case, just output how many tables Ignatius needs at least. Do NOT print any blanks. Examples intput 1234567825 31 22 34 55 12 5 output 1224 思路 并查集入门题。初始化每人单独为一个集合，每次读入A,B就合并A,B所在的集合，每个集合都有一个代表元素，集合中的元素都指向代表元素并且只有代表元素指向自己，最后遍历一遍求出答案。 同样的方法也可以求无向图里的连通分支数。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960//#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll;const double Pi = acos(-1);const double e = 2.718281828459;const int mod =1e9+7;int Friend[1005];int Find(int x)&#123; int tem=x; while(Friend[tem]!=tem) //查找x元素所在集合的代表元素 tem=Friend[tem]; int t=x; while(Friend[t]!=tem) //压缩路径 &#123; x=Friend[t]; Friend[t]=tem; t=x; &#125; return tem;&#125;int main()&#123; int test,n,way,a,b,ans=0; cin&gt;&gt;test; while(test--) &#123; ans=0; cin&gt;&gt;n&gt;&gt;way; for(int i=0; i&lt;=n; i++) Friend[i]=i; for(int i=0; i&lt;way; i++) &#123; cin&gt;&gt;a&gt;&gt;b; a=Find(a),b=Find(b); if(a!=b) //合并两个集合 Friend[a]=Friend[b]; &#125; for(int i=1; i&lt;=n; i++) //查找有几个代表元素 if(Friend[i]==i) ans++; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[求数列的逆序数]]></title>
    <url>%2F%E6%B1%82%E6%95%B0%E5%88%97%E7%9A%84%E9%80%86%E5%BA%8F%E6%95%B0%2F</url>
    <content type="text"><![CDATA[描述 &emsp;在一个排列中，如果一对数的前后位置与大小顺序相反，即前面的数大于后面的数，那么它们就称为一个逆序。一个排列中逆序的总数就称为这个排列的逆序数。 思路暴力出奇迹 对于每一个数都遍历一遍排在他前面的数，每有一个比他大的数就ans++，时间复杂度为$O(n^2)$，很明显这个算法只能应用于数很少的情况。 归并排序求逆序数 归并排序中，在每次合并的时候判断一下。 假设数列为9 1 0 5 4，先把它分成两个子序列，9 1 | 0 5 4，使左右分别有序，则有1 9 | 0 4 5，此时进行两个子序列合并。如果a[i]&lt;=a[j],则i++，继续比较，如果a[i]&gt;a[i],则说明a[i]到a[mid]的数都大于a[j],那么ans+=mid-i+1。 代码12345678910111213141516171819202122232425262728ll a[500005],tem[500005],ans; //a为要求的序列，tem是临时存放的数组void divide(int low,int high) //子序列&#123; if(high==low) //因为上面那种思路需要子序列有序，当子序列只有一个数时，即认为这个子序列有序 return; divide(low,(low+high)/2); //使左边有序 divide((low+high)/2+1,high); //使右边有序 int mid=(low+high)/2; int i=low,j=mid+1,k=low; while(i&lt;=mid&amp;&amp;j&lt;=high) //合并 &#123; if(a[i]&gt;a[j]) &#123; ans+=mid-i+1; tem[k++]=a[j++]; &#125; else tem[k++]=a[i++]; &#125; while(i&lt;=mid) tem[k++]=a[i++]; //将剩下的存入数组 while(j&lt;=high) tem[k++]=a[j++]; for(int t=low;t&lt;=high;t++) a[t]=tem[t]; //更新a数组 return;&#125; 用树状数组求逆序数 未完待续…]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>排列组合</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FATE(二维费用背包问题)]]></title>
    <url>%2FFATE-%E4%BA%8C%E7%BB%B4%E8%B4%B9%E7%94%A8%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-2159 &emsp;最近xhd正在玩一款叫做FATE的游戏，为了得到极品装备，xhd在不停的杀怪做任务。久而久之xhd开始对杀怪产生的厌恶感，但又不得不通过杀怪来升完这最后一级。现在的问题是，xhd升掉最后一级还需n的经验值，xhd还留有m的忍耐度，每杀一个怪xhd会得到相应的经验，并减掉相应的忍耐度。当忍耐度降到0或者0以下时，xhd就不会玩这游戏。xhd还说了他最多只杀s只怪。请问他能升掉这最后一级吗？ Input 输入数据有多组，对于每组数据第一行输入n，m，k，s(0 &lt; n,m,k,s &lt; 100)四个正整数。分别表示还需的经验值，保留的忍耐度，怪的种数和最多的杀怪数。接下来输入k行数据。每行数据输入两个正整数a，b(0 &lt; a,b &lt; 20)；分别表示杀掉一只这种怪xhd会得到的经验值和会减掉的忍耐度。(每种怪都有无数个) Output 输出升完这级还能保留的最大忍耐度，如果无法升完这级输出-1。 Examples intput 123456710 10 1 101 110 10 1 91 19 10 2 101 12 2 output 1230-11 思路 有两个费用，一个是忍耐度，另一个是杀怪数。 注意这里对经验的理解，它不是第三个费用。 然后用完全背包，最后判断一下最优解即可。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445//#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll;const double Pi = acos(-1);const double e = 2.718281828459;const int mod =1e9+7;int dp[105][105],n,m,k,s,cost[105],valum[105]; //dp[i][j]:杀i,耐力j时的经验int main()&#123; while(cin&gt;&gt;n&gt;&gt;m&gt;&gt;k&gt;&gt;s) &#123; for(int i=0; i&lt;k; i++) cin&gt;&gt;valum[i]&gt;&gt;cost[i]; CRL(dp); for(int i=0; i&lt;k; i++) for(int p=1; p&lt;=s; p++) //杀怪 for(int j=cost[i]; j&lt;=m; j++) //忍耐 dp[p][j]=max(dp[p][j],dp[p-1][j-cost[i]]+valum[i]); if(dp[s][m]&lt;n) //如果消耗完耐力都不能升级 cout&lt;&lt;-1&lt;&lt;endl; else for(int i=0; i&lt;=m; i++) //找能升级，耐力消耗最小的 if(dp[s][i]&gt;=n) &#123; cout&lt;&lt;m-i&lt;&lt;endl; break; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>背包问题</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xiaoxin juju needs help(排列组合+逆元)]]></title>
    <url>%2Fxiaoxin-juju-needs-help-%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88-%E9%80%86%E5%85%83%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-5651 As we all known, xiaoxin is a brilliant coder. He knew palindromic strings when he was only a six grade student at elementry school. This summer he was working at Tencent as an intern. One day his leader came to ask xiaoxin for help. His leader gave him a string and he wanted xiaoxin to generate palindromic strings for him. Once xiaoxin generates a different palindromic string, his leader will give him a watermelon candy. The problem is how many candies xiaoxin’s leader needs to buy? Input This problem has multi test cases. First line contains a single integer T(T≤20) which represents the number of test cases.For each test case, there is a single line containing a string S(1≤length(S)≤1,000). Output For each test case, print an integer which is the number of watermelon candies xiaoxin’s leader needs to buy after mod 1,000,000,007. Examples intput 12343aaaabba output 123121 思路 其实这道题难点不是推出公式，而是求解公式(吐血.jpg)。 设字符串为s,字符串长度为Len,字母i出现次数的二分之一为c[i](取整); 如果有解，就要求出现次数是奇数的字母不超过1个(废话)，然后我们只需要考虑一边的所有情况，另一边跟它一样就能构成回文序列。只考虑一边时，共有Len/2个字符,根据高中学的排列组合可知，所有的排列情况是\frac{A_{Len/2}^{Len/2}}{A_{c[1]}^{c[1]}A_{c[2]}^{c[2]}...{A_{c[i]}^{c[i]}}} \Longrightarrow \frac{Len/2!}{c[1]!c[2]!...c[i]!} 关键就是如何求解这个公式了，由题目可知，Len/2最大是500，也就是要算500!，很明显要爆精度。因为答案对(1e9+7)取摸，这里引入一个转化：(a$ \times $b)%m $\rightarrow$ (a%m $ \times $ b%m )%m 显然正确,所以我们求阶乘的时候只要边乘边对(1e9+7)取模就不会爆精度。但是 (a $ \div $ b)%m $ \not= $ ((a%m) $ \div $ (b%m))%m,所以我们要用逆元变除法为乘法，就可以边乘边取模。 这道题我是用的拓展欧几里德算法求逆元，不知道的可以看我的另一篇博客数论笔记本 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xfffffff#define MAXN 6typedef unsigned long long LL;typedef long long ll;const int mod =1e9+7;ll fac(int n) //求阶乘 &#123; if(n==1||n==0) return 1; else &#123; ll ans=1; for(int i=2;i&lt;=n;i++) ans=(ans*i)%mod; //边乘边取模 return ans; &#125;&#125;int x,y;int exgcd(int a,int b) //拓展欧几里德算法，求出的x,即为a%b下a的逆元 &#123; if(b==0) &#123; x=1;y=0; return a; &#125; int r=exgcd(b,a%b); int c=x; x=y; y=c-a/b*y; return r;&#125;int main()&#123; ll ans; int book[26],n,Flag=0,Len; char s[1005]; cin&gt;&gt;n; while(n--) &#123; CRL(book); Flag=0; ans=0; scanf("%s",s); Len=strlen(s); for(int i=0; i&lt;Len; i++) book[s[i]-'a']++; for(int i=0; i&lt;26; i++) if(book[i]&amp;1) Flag++; if(Flag&gt;1) //如果出现次数为奇数的字母超过1,无解 ans=0; else &#123; ans=fac(Len/2); for(int i=0; i&lt;26; i++) if(book[i]&gt;1) &#123; exgcd(fac(book[i]/2),mod); x=x&lt;0? x+mod:x; //x小于0的话要转换成正数 ans=ans*x%mod; &#125; &#125; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>排列组合</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LCP Array(排列组合)]]></title>
    <url>%2FLCP-Array-%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-5635 Peter has a string $s=s_1s_2…s_n$, let $suff_i=s_is_{i+1}…s_n$ be the suffix start with $i^{th}$ character of $s$. Peter knows the lcp (longest common prefix) of each two adjacent suffixes which denotes as $a_i=lcp(suff_i,suff_{i+1})(1≤i&lt;n)$. Given the lcp array, Peter wants to know how many strings containing lowercase English letters only will satisfy the lcp array. The answer may be too large, just print it modulo $10^9+7$. Input There are multiple test cases. The first line of input contains an integer T indicating the number of test cases. For each test case: The first line contains an integer n ($2≤n≤10^5$) — the length of the string. The second line contains n−1 integers: $a_1,a_2,…,a_{n−1} (0≤a_i≤n)$. The sum of values of n in all test cases doesn’t exceed $10^6$. Output For each test case output one integer denoting the answer. The answer must be printed modulo $10^9+7$. Examples intput 1234567330 043 2 131 2 output 12316250260 思路 有解的条件：以样例2为例:$lcp_1=3 \Rightarrow s_1=s_2,s_2=s_3,s_3=s_4$,要有解显然$lcp_i=lcp_{i-1}-1$一定成立，而且$lcp_{n-1}$不可能大于1,也就是说如果$lcp_i$=n,那么$lcp_i$到$lcp_{i+n}$的值一定是n到1递减。 计算有解时的答案：显然当$lcp_i$=n(n&gt;0)时，$s_i$到$s_{i+n}$都为同一个字母，如果$lcp_i$=0,则$s_i$和$s_{i+1}$为不同字母，所以当前一种字母确定时，后一种字母就有25种可能。 所以如果有解，lcp数组中0的个数为n,答案就是$26 \times 25^n$。我也是在草稿本上先找到规律AC了才推出原理的 代码12345678910111213141516171819202122232425262728293031323334353637383940#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xfffffff#define M 100000typedef unsigned long long LL;typedef long long ll;const int mod =1e9+7;int main()&#123; int n,len,lcp[M],Flag=0; ll ans; cin&gt;&gt;n; while(n--) &#123; Flag=0; ans=26; cin&gt;&gt;len; for(int i=1; i&lt;len; i++) &#123; scanf("%d",&amp;lcp[i]); if(lcp[i]+1!=lcp[i-1]&amp;&amp;lcp[i-1]&gt;0) //如果不是前比后多一且前一个不为0 Flag=1; else if(lcp[i]==0) ans=(ans*25)%mod; &#125; if(Flag||lcp[len-1]&gt;1) //lcp数组末尾一定是0或1 cout&lt;&lt;0&lt;&lt;endl; else cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>排列组合</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一个人的旅行(Dijkstra算法)]]></title>
    <url>%2F%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E6%97%85%E8%A1%8C-%E6%9C%80%E7%9F%AD%E8%B7%AFDijkstra%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-2066 &emsp;虽然草儿是个路痴（就是在杭电待了一年多，居然还会在校园里迷路的人，汗~),但是草儿仍然很喜欢旅行，因为在旅途中 会遇见很多人（白马王子，^0^），很多事，还能丰富自己的阅历，还可以看美丽的风景……草儿想去很多地方，她想要去东京铁塔看夜景，去威尼斯看电影，去阳明山上看海芋，去纽约纯粹看雪景，去巴黎喝咖啡写信，去北京探望孟姜女……眼看寒假就快到了，这么一大段时间，可不能浪费啊，一定要给自己好好的放个假，可是也不能荒废了训练啊，所以草儿决定在要在最短的时间去一个自己想去的地方！因为草儿的家在一个小镇上，没有火车经过，所以她只能去邻近的城市坐火车（好可怜啊~）。 Input 输入数据有多组，每组的第一行是三个整数T，S和D，表示有T条路，和草儿家相邻的城市的有S个，草儿想去的地方有D个；接着有T行，每行有三个整数a，b，time,表示a,b城市之间的车程是time小时；(1=&lt;(a,b)&lt;=1000;a,b 之间可能有多条路)接着的第T+1行有S个数，表示和草儿家相连的城市；接着的第T+2行有D个数，表示草儿想去地方。 Output 输出草儿能去某个喜欢的城市的最短时间。 Examples intput 1234567896 2 31 3 51 4 72 8 123 8 44 9 129 10 21 28 9 10 output 19 思路 一读完题就开始敲Floyd，然后没有意外地T了。 经过大佬的一番点拨，我们把草儿家看成一个节点0，邻近的城市和草儿家的距离为0，这样就转换成了最单纯的单源最短路问题。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))typedef unsigned long long LL;typedef long long ll;const int mod =1e9+7;#define MAX 99999bool visit[1005];int Distance[1005],map[1005][1005],m,n,MaxNode;// Distance:源点到点i的距离 MaxNode:最大的节点void Dijkstar(int v0) //v0为源点&#123; CRL(visit); visit[v1]=1; for(int i=1; i&lt;=MaxNode; i++) Distance[i]=map[v1][i]; int k=1,t=1,v,w,Min; // 开始主循环，每次求得V0到某个V顶点的最短路径 for( v=1; v&lt;=MaxNode; v++ ) &#123; Min=MAX; for(w=1; w&lt;=MaxNode; w++ ) &#123; if(!visit[w]&amp;&amp;Distance[w]&lt;Min ) &#123; k=w; Min=Distance[w]; &#125; &#125; visit[k]=1; // 将目前找到的最近的顶点置1 // 修正当前最短路径及距离 for(w=0; w&lt;=MaxNode; w++) &#123; // 如果经过v顶点的路径比现在这条路径的长度短就修正 if( !visit[w] &amp;&amp; (Min+map[k][w]&lt;Distance[w]) ) Distance[w]=Min+map[k][w]; // 修改当前路径长度 &#125; &#125;&#125;void create() //建图&#123; int x,y,way; memset(map,1,sizeof(map)); //把map数组全部置为无穷大，准确来说现在map中每个元素在内存中为00000001000000010000000100000001 for(int i=1; i&lt;=m; i++) &#123; scanf("%d%d%d",&amp;x,&amp;y,&amp;way); MaxNode=MaxNode&gt;x?MaxNode:x; MaxNode=MaxNode&gt;y?MaxNode:y; if(way&lt;map[x][y]) map[x][y]=map[y][x]=way; &#125; for(int i=0; i&lt;n; i++) &#123; cin&gt;&gt;x; map[0][x]=map[x][0]=0; &#125; return;&#125;int main()&#123; int T,ans=99999,want; while(cin&gt;&gt;m&gt;&gt;n&gt;&gt;T) &#123; ans=99999; create(); Dijkstra(0); for(int i=0; i&lt;T; i++) &#123; cin&gt;&gt;want; ans=min(ans,Distance[want]); &#125; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ACboy needs your help(分组背包)]]></title>
    <url>%2FACboy-needs-your-help-%E5%88%86%E7%BB%84%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-1712 ACboy has N courses this term, and he plans to spend at most M days on study.Of course,the profit he will gain from different course depending on the days he spend on it.How to arrange the M days for the N courses to maximize the profit? Input The input consists of multiple data sets. A data set starts with a line containing two positive integers N and M, N is the number of courses, M is the days ACboy has.Next follow a matrix A[i][j], (1&lt;=i&lt;=N&lt;=100,1&lt;=j&lt;=M&lt;=100).A[i][j] indicates if ACboy spend j days on ith course he will get profit of value A[i][j].N = 0 and M = 0 ends the input. Output For each data set, your program should output a line which contains the number of the max profit ACboy will gain. Examples intput 123456789102 21 21 32 22 12 12 33 2 13 2 10 0 output 123346 思路 这是一个典型的分组背包问题，我们可以转换成01背包求解。 核心代码 12345for(int i=1;i&lt;=n;i++) for(int j=V;j&gt;=0;j--) for(int k=0;k&lt;=V;k++) //转01背包，注意三重循环顺序 if(j&gt;=k) dp[j]=max(dp[j],dp[j-k]+map[i][k]);]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>背包问题</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cow Contest(floyd))]]></title>
    <url>%2FCow-Contest-floyd%2F</url>
    <content type="text"><![CDATA[描述传送门：poj-3660 N (1 ≤ N ≤ 100) cows, conveniently numbered 1..N, are participating in a programming contest. As we all know, some cows code better than others. Each cow has a certain constant skill rating that is unique among the competitors. The contest is conducted in several head-to-head rounds, each between two cows. If cow A has a greater skill level than cow B (1 ≤ A ≤ N; 1 ≤ B ≤ N; A ≠ B), then cow A will always beat cow B. Farmer John is trying to rank the cows by skill level. Given a list the results of M (1 ≤ M ≤ 4,500) two-cow rounds, determine the number of cows whose ranks can be precisely determined from the results. It is guaranteed that the results of the rounds will not be contradictory. Input Line 1: Two space-separated integers: N and M Lines 2..M+1: Each line contains two space-separated integers that describe the competitors and results (the first integer, A, is the winner) of a single round of competition: A and B. Output Line 1: A single integer representing the number of cows whose ranks can be determined. Examples intput 1234565 54 34 23 21 22 5 output 12 思路 把比赛看成是一个有向图，问题其实就转化成求了求有多少个顶点和其他所有顶点都连通。 形象地说就是当一头牛胜负加起来为n-1时，也就是和其他的牛都比赛过(包括间接的)就能确定它的名次。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll;const int mod =1e9+7;int map[105][105],win[105],defeat[105];int main()&#123; int n,w,a,b,ans; while(cin &gt;&gt; n &gt;&gt; w) &#123; ans=0; CRL(map); CRL(win); CRL(defeat); while(w--) &#123; cin&gt;&gt;a&gt;&gt;b; if(!map[a][b]) &#123; map[a][b]=1; win[a]++; defeat[b]++; &#125; &#125; for(int k=1; k&lt;=n; k++) for(int j=1; j&lt;=n; j++) for(int i=1; i&lt;=n; i++) if(map[j][k]&amp;&amp;map[k][i]&amp;&amp;!map[j][i]) &#123; map[j][i]=1; win[j]++; defeat[i]++; &#125; for(int i=1; i&lt;=n; i++) if(win[i]+defeat[i]+1==n) ans++; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数论笔记本]]></title>
    <url>%2F%E6%95%B0%E8%AE%BA%E7%AC%94%E8%AE%B0%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[数论是个好东西。 欧几里德算法(gcd) 欧几里德算法又称辗转相除法，用于计算两个正整数a，b的最大公约数。 定理 $gcd(a,b)=gcd(b,a$ $mod$ $b)$ 特别的：$gcd(a,0)=a$ 证明充分性 设c为a,b的公约数$\because a|c$，$b|c&emsp;&emsp;&emsp;$&emsp;（|：整除）又$\because a=kb+(a$ $mod$ $b),$即$a$ $mod$ $b = a-kb$$\therefore (a$ $mod$ $b) | c$ 必要性 设$c$为$b$，$a$ $mod$ $b$的公约数$\because b|c,&emsp;(a$ $mod$ $b)|c$又$\because a=kb+(a$ $mod$ $b)$$\therefore a|c$ 代码123456int gcd(int a, int b)&#123; if(b == 0) return a; return gcd(b, a % b);&#125; 扩展欧几里德算法 扩展欧几里德算法是用来在已知a, b求解一组x，y，使它们满足等式：$ ax+by = gcd(a, b)$（解一定存在，根据数论中的相关定理）。扩展欧几里德常用在求解模线性方程及方程组中。 代码因为不好描述，所以先给出代码。1234567891011121314int x,y;int exgcd(int a,int b) //拓展欧几里德算法，求出的x,即为a%b下a的逆元 &#123; if(b==0) &#123; x=1;y=0; return a; &#125; int r=exgcd(b,a%b); int c=x; //c只是为了储存x的值 x=y; y=c-a/b*y; return r;&#125; 证明 递归之后，$ a’=b ,&emsp; b’=a \% b = a-a/b \times b $ （这里的/为计算机里的除法）$a’x+b’y=gcd(a,b)$代入化简$\Rightarrow ay+b(x-a/b \times y) = gcd(a,b) $又$\because ax+by = gcd(a,b)$$\therefore x=y ,&emsp;y=x-a/b \times y$最后的$x,y$即为答案。假设d=gcd(a,b),则x，y所有解：$ x=x+(b/d)t$，$y=y-(a/d)t$;&emsp;其中t为任意常整数 乘法逆元 若$ ax \equiv 1$ $mod$ $m$, 则称a关于1模m的乘法逆元为x。也可表示为$ax \equiv 1(mod$ $m$)。 如果$a,m$不互质，则无解。如果$m$为质数，则从1到$m-1$的任意数都与$m$互质，即在1到$m-1$之间都恰好有一个关于模$m$的乘法逆元。 求法费马小定理求逆元。 费马小定理：$a^{m-1} \equiv 1(mod$ $m$) (m为素数) 变形得: $a \cdot a^{m-2} \equiv 1(mod$ $m$) 故$a^{m-2}$为a在模m下的逆元。($a^{m-2}$用快速幂求解即可) 注意：$m$必须是质数，且$a,m$互质。(ACM的题一般都是模($10^9+7$),所以基本上都能用) 扩展欧几里德算法求逆元 扩展欧几里德算法:$ ax+by = gcd(a, b) $ 令$b=m$ ,由于$a,m$互质，所以$gcd(a,m)$=1，即$ ax+my = 1 $，两边同时模m，得$ax \equiv 1(mod$ $m$) 这样解出来的$x$就是$a$在模$m$下的逆元。 同样，也要求$m$必须是质数，且$a,m$互质。 欧拉定理求逆元 欧拉定理：$a^{ \varphi (m)} \equiv 1(mod$ $m$)&emsp;&emsp;($\varphi (m)$是小于m且与m互质的数的个数。) 变形得: $a \cdot a^{ \varphi (m)-1} \equiv 1(mod$ $m$) 故$ a^{ \varphi (m)-1} $为a在模m下的逆元。($a^{ \varphi (m)-1}$用快速幂求解即可) 欧拉定理实际上是费马小定理的推广。 应用 有时候在求$({a \over b})\%m$时,可能由于b过大而丢失精度，这时就可以求出b的逆元来变除为乘，具体如下。 设$x$为$b$模$m$的逆元。 ${({a \over b})\%m} \Rightarrow {({a \over b})\times 1 \times\%m} \Rightarrow {({a \over b})\times {b \cdot x} \times\%m} \Rightarrow a \cdot x\%m$ 快速幂 快速幂可以大大减少运算时循环的次数。 推导过程 a^n= \begin{cases} ({a^2})^{n \over 2} &\mbox{n为偶数}\\ a \cdot ({a^2})^{n \over 2} &\mbox{n为奇数} \end{cases} 上述变换显然正确。 代码123456789101112int QuickPow(int x, int n) &#123; int ans = 1; while (n &gt; 0) &#123; if(n&amp;1) ans*=x; x*=x; n/=2 ; &#125; return ans; &#125; 如果题目要求对m取模，则1234567891011121314int QuickPow(int a,int b,int m)&#123; int ans=1; a%=m; while(b&gt;0) &#123; if(b&amp;1) ans=(ans*a)%m; b/=2; a=(a*a)%m; &#125; return ans;&#125; 斯特林公式 斯特林公式是一条用来取n的阶乘的近似值的数学公式。一般来说，当n很大的时候，n阶乘的计算量十分大，所以斯特林公式十分好用，而且，即使在n很小的时候，斯特林公式的取值已经十分准确。 公式 $$n!\approx\sqrt{2\pi n}(\frac{n}{e})^n$$ 应用 求$n!$在十进制下的位数，暴力肯定不行，我们直接用斯特林公式求出$n!$的近似值，再求以10为底近似值的对数 +1(求其他进制下的位数类似，修改底数即可)。 容斥原理 在计数时，必须注意没有重复，没有遗漏。为了使重叠部分不被重复计算，人们研究出一种新的计数方法，这种方法的基本思想是：先不考虑重叠的情况，把包含于某内容中的所有对象的数目先计算出来，然后再把计数时重复计算的数目排斥出去，使得计算的结果既无遗漏又无重复，这种计数的方法称为容斥原理。 举例 如果被计数的事物有A、B、C三类，那么：A∪B∪C = A+B+C - A∩B - B∩C - C∩A + A∩B∩C 例如求给出一个数n，求1到$n$中，有多少个数不是2，5，11，13的倍数。$A,B,C,D$分别是$n/2,n/5,n/11,n/13$。 Lucas定理 Lucas定理是用来求 $C(n,m) mod $ $p$，$p$为素数的值。适用领域范围：大组合数求模,n,m&gt;p 公式 C_n^m\%p=(C_\frac{n}{p}^\frac{m}{p}C_{n\%p}^{m\%p})\%p 然后继续对$C_\frac{n}{p}^\frac{m}{p}$使用Lucas定理，用逆元求出$C_{n\%p}^{m\%p}$。 证明 详见百度百科：虚空传送门 未完待续…]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[多重背包问题]]></title>
    <url>%2F%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[描述 有n种物品和一个容积为V的背包，第i种物品有amount[i]个，体积cost[i]和价值valum[i]，问如何选取物品使得放入背包的物品价值之和最大。 思路 跟完全背包问题类似，这里就直接给出基本算法的状态转移方程dp[i][j]=Max\{dp[i-1][j-k \times cost[i] + k \times valum[i]\}(0\leq k \leq amount[i] 且 0\leq k \times cost[i] \leq V) 时间复杂度:O($V \times {\sum_{i=1}^N{amount[i]}}$)，空间复杂度:O(NV)。 优化 amount[i]==1时，当01背包处理。 amount[i]$ \times $cost&gt;=V时，当完全背包处理。 amount[i]$ \geq $1时，采用二进制拆分，从而转换成01背包求解，具体如下：&emsp;在上面的状态转移方程中，我们让k从1$ \to $amount[i]来实现拿不同的个数，从而转换成01背包问题，但我们可以发现，我们只要将amount[i]拆分成几个数，就可以用他们组合成小于amount[i]的任何数。例如:amount[i]=11,11的二进制为1011，把11拆成100(4)、0010(2)、0001(1)、4(11-4-2-1),这样就可以用4、2、1、4来组合成11以内所有的整数，这样放第这种物品时本来放11次，现在只要放4次，虽然仍然有重复，但也实现了优化。 初始化 如果题目没有要求必须装满，那么我们只要将dp数组全部置为0即可。 如果必须装满，我们就将dp[0]初始化为0，其他初始化为$-\infty$。 完整代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include&lt;iostream&gt;#include&lt;algorithm&gt; #include&lt;string.h&gt; #include&lt;string&gt; #include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define M 100000000typedef unsigned long long LL;typedef long long ll;const int mod =1e9+7;int V,dp[120002];void ZeroOnePack(int cost,int valum) //01背包问题&#123; for(int i=V;i&gt;=cost;i--) dp[i]=max(dp[i],dp[i-cost]+valum); return; &#125;void CompletePack(int cost,int valum) //完全背包问题&#123; for(int i=cost;i&lt;=V;i++) dp[i]=max(dp[i],dp[i-cost]+valum); return;&#125;void MultiplePack(int cost,int valum,int amount) //多重背包问题&#123; if(cost*amount&gt;=V) CompletePack(cost,valum); else &#123; int k=1; while(k&lt;amount) &#123; ZeroOnePack(cost*k,valum*k); amount-=k; k=k&lt;&lt;1; //k*=2 &#125; ZeroOnePack(cost*amount,valum*amount); &#125; return; &#125;int main()&#123; int n,cost[1000],valum[1000],amount[1000]; while(cin&gt;&gt;n&gt;&gt;V) &#123; CRL(dp); for(int i=1;i&lt;=n;i++) cin&gt;&gt;cost[i]&gt;&gt;valum[i]&gt;&gt;amount[i]; for(int i=1;i&lt;=n;i++) MultiplePack(cost[i],valum[i],amount[i]); cout&lt;&lt;dp[V]&lt;&lt;endl; &#125; return 0;&#125; 例题 换一种问法而已：poj 1014 参考资料《背包九讲》]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>背包问题</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[完全背包问题]]></title>
    <url>%2F%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[描述 有n种物品和一个容积为V的背包，每种物品i都有无限个，都有体积cost[i]和价值valum[i]，问如何选取物品使得放入背包的物品价值之和最大。 思路 完全背包和01背包很像，我们首先想到的应该是每种物品在拿0~n个中选max价值的，我们依旧用dp[i][j]来储存将前i种物品放入体积为j的背包中物品价值之和最大值，那么状态转移方程便是在放得下的情况下dp[i][j]=Max\{dp[i-1][j-k \times cost[i] + k \times valum[i]\}(0\leq k \times cost[i] \leq V) 这样最后求出来的dp[n][V]就是最后答案。 时间复杂度:O($V \times {\sum_{i=1}^N{V \over {c[i]}}}$)，空间复杂度:O(NV)。 优化 在01背包问题里面，我们逆序遍历V$(j:V \to 0)$是为了保证dp[j-cost[i]]始终是i-1物品推出的，从而保证每种物品只用一次。而完全背包问题里面我们就可以正序遍历，这样就可以在一次遍历dp[V]中考虑第i种物品的所有拿法。 核心代码如下: 123for(int i=1;i&lt;=n;i++) for(int j=cost[i];j&lt;=V;j++) dp[j]=max(dp[j],dp[j-cost[i]]+valum[i]); 优化后时间复杂度为O(NV)，空间复杂度为O(N)。 初始化 如果题目没有要求必须装满，那么我们只要将dp数组全部置为0即可。 如果必须装满，我们就将dp[0]初始化为0，其他初始化为$-\infty$。 例题 板子题：洛谷1616 换一种问法：poj 1014]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>背包问题</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[01背包问题]]></title>
    <url>%2F01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[描述 有n个物品和一个容积为V的背包，每个物品i都有体积cost[i]和价值valum[i]，问如何选取物品使得放入背包的物品价值之和最大。 思路 01背包的特点就是每种物品都只有一个，所以每个物品只有拿和不拿两种状态。 我们用dp[i][j]来储存将前i件物品放入体积为j的背包中物品价值之和最大值，那么状态转移方程便是在放得下的情况下 dp[i][j]=Max \begin{cases} dp[i-1][j] &\mbox{不拿第i个，状态跟i-1一样}\\ dp[i-1][j-cost[i]]+valum[i] &\mbox{拿第i个，那么就把前cost[i]体积的物品拿走再放} \end{cases} (j:0 \to V,i:0 \to n) 这样最后求出来的dp[n][V]就是最后答案。 优化 上面的时间复杂度是O(NV)已经无法再优化了,而空间复杂度可以优化到O(N)：我们用二维数组无非是为了保证状态转移方程里的dp[i-1][j-cost[i]]是上一个物品推出来的，如果我们直接改成dp[j]=max(dp[j],dp[j-cost[i]]+valum[i])的话，在$(j:0 \to V)$过程进行到后面的时候,dp[j-cost]有可能是已经在前面就放了i物品的状态，此时再+valumi就不符合每种物品都只有一个的题意了。 实际上。如果我们在遍历j的时候，采用逆序，即$(j:V \to 0)$，就可以保证dp[j-cost[i]]始终是i-1物品推出的。 核心代码如下123for(int i=1;i&lt;=n;i++) for(int j=V;j&gt;=cost[i];j--) dp[j]=max(dp[j],dp[j-cost[i]]+valum[i]); 初始化 如果题目没有要求必须装满，那么我们只要将dp数组全部置为0即可。 如果必须装满，我们就将dp[0]初始化为0，其他初始化为$-\infty$，$(j:V \to 0)$时每次判断dp[j-cost]是否&gt;=0，是的话就进行状态转移。(自行体会，逃.jpg) 例题 板子题：洛谷1048 变式：洛谷1164 变式：2018年全国多校算法寒假训练营练习比赛(第二场) problem B（需要一个微妙的预处理）]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>背包问题</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小牛vs小客(巴什博弈变形)]]></title>
    <url>%2F%E5%B0%8F%E7%89%9Bvs%E5%B0%8F%E5%AE%A2-%E5%B7%B4%E4%BB%80%E5%8D%9A%E5%BC%88%E5%8F%98%E5%BD%A2%2F</url>
    <content type="text"><![CDATA[描述题目链接 小牛和小客玩石子游戏，他们用n个石子围成一圈，小牛和小客分别从其中取石子，谁先取完谁胜，每次可以从一圈中取一个或者相邻两个，每次都是小牛先取，请输出胜利者的名字。（1 2 3 4 取走 2 13 不算相邻） Intput 输入包括多组测试数据每组测试数据一个n（1≤n≤10^9） Output 每组用一行输出胜利者的名字（小牛获胜输出XiaoNiu，小客获胜输出XiaoKe） Examples intput 1223 output 12XiaoNiuXiaoKe 思路 当n&lt;=2时，毫无疑问是先手获胜。 当n&gt;2时，先手拿了之后，石子形状就可以看成一条线，后手可以选择拿1个或2个，使得剩下的石子是对称的，然后无论先手怎样拿，后手总能在对称位置拿到石子，最后一定是后手赢。 代码1234567891011121314#include&lt;iostream&gt;using namespace std;int main()&#123; int x; while(cin&gt;&gt;x) &#123; if(x&lt;=2) cout&lt;&lt;"XiaoNiu\n"; else cout&lt;&lt;"XiaoKe\n"; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>博弈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[不凡的夫夫(斯特灵公式)]]></title>
    <url>%2F%E4%B8%8D%E5%87%A1%E7%9A%84%E5%A4%AB%E5%A4%AB-%E6%96%AF%E7%89%B9%E7%81%B5%E5%85%AC%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[描述题目链接 夫夫有一天对一个数有多少位数感兴趣，但是他又不想跟凡夫俗子一样，所以他想知道给一个整数n，求n！的在8进制下的位数是多少位。 Input 第一行是一个整数t(0&lt;t&lt;=1000000)(表示t组数据)接下来t行，每一行有一个整数n(0&lt;=n&lt;=10000000) Output 输出n！在8进制下的位数。 Examples intput 12343425 output 123213 思路 看到n的值最大是1e7就知道不能暴力出奇迹，而求n!的位数，就很自然想到要用斯特林公式:$n!\approx\sqrt{2\pi n}(\frac{n}{e})^n$ 虽然斯特林公式只是求阶乘的近似值，但即使在n很小的时候，斯特林公式的取值已经十分准确。 再求以8为底近似值的对数 +1(求其他进制下的位数类似，修改底数即可)。 注意:C语言中不支持任意底数的求对数运算，我们小小的转换一下$\log_x y=\frac{lgy}{lgx}$ 代码12345678910111213141516171819202122232425#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt; #include&lt;string.h&gt; #include&lt;string&gt; #include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;const double Pi = acos(-1);const double e = 2.718281828459;int main()&#123; int t,n; scanf("%d",&amp;t); while(t--) &#123; scanf("%d",&amp;n); if(n==0||n==1) //注意特判 printf("1\n"); else printf("%d\n",(int)((log(2.0*Pi*n)/(log(8))/2.0 + n*log(n/e)/log(8))+1)); &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2 5 11 13的倍数(容斥原理)]]></title>
    <url>%2F2-5-11-13%E7%9A%84%E5%80%8D%E6%95%B0-%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[描述题目链接 给出一个数n，求1到n中，有多少个数不是2 5 11 13的倍数。 Intput 本题有多组输入每行一个数n，1&lt;=n&lt;=10^18. Output 每行输出输出不是2 5 11 13的倍数的数共有多少。 Examples intput 115 output 14 思路 遍历一遍感觉是很快了，时间复杂度O(n)，但还是会超时，其实这道题可以达到O(1)。 我们反过来思考，用总数减去倍数的个数，先不考虑公倍数的问题，再减去公倍数的个数。 假设有三个集合，那么 A∪B∪C = A+B+C - A∩B - B∩C - C∩A + A∩B∩C 代码12345678910111213141516#include&lt;stdio.h&gt;#include&lt;iostream&gt;using namespace std;#define LL long longint main()&#123; LL n,sum; while(scanf("%lld",&amp;n)!=EOF) &#123; sum=n/2+n/5+n/11+n/13; LL cnt=sum-n/10-n/22-n/26-n/55-n/65-n/143+n/110+n/130+n/286+n/715-n/1430; LL ans=n-cnt; printf("%lld\n",ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[欢迎来到Armin的博客]]></title>
    <url>%2FWelcome%2F</url>
    <content type="text"><![CDATA[欢迎来到Armin的博客，其他内容还在持续搭建（xjb摸索）中。 测试测试flash插件 测试插入代码1234567#include&lt;iostream&gt;using namespace std;int main()&#123; cout&lt;&lt;"Hello world!"&lt;&lt;endl;//测试注释 return 0;&#125; 测试链接分享代码 测试公式质能守恒方程可以用一$r=a-k*b r\div d-k*b\div d$个很简洁的方程式 $E=mc^2$ 来表达。 \ sum_{i=1}^n a_i=0f (x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2\ sum^{j-1}_{k=0}{\widehat{\gamma}_{kj} z_k}测试表格 姓名 分数 蒟蒻 59 神犇 100]]></content>
  </entry>
</search>
