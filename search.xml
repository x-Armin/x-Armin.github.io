<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hard challenge(模拟)]]></title>
    <url>%2FHard-challenge%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-6127 &emsp;There are n points on the plane, and the ith points has a value $val_i$, and its coordinate is $(x_i,y_i)$. It is guaranteed that no two points have the same coordinate, and no two points makes the line which passes them also passes the origin point. For every two points, there is a segment connecting them, and the segment has a value which equals the product of the values of the two points. Now HazelFan want to draw a line throgh the origin point but not through any given points, and he define the score is the sum of the values of all segments that the line crosses. Please tell him the maximum score. Input The first line contains a positive integer $T(1≤T≤5)$, denoting the number of test cases.For each test case:The first line contains a positive integer $n(1≤n≤5×10^4)$.The next n lines, the ith line contains three integers $x_i,yi,val_i(|x_i|,|y_i|≤10^9,1≤val_i≤10^4)$. Output For each test case:A single line contains a nonnegative integer, denoting the answer. Examples intput 12345678221 1 11 -1 131 1 11 -1 10-1 0 100 output 1211100 大致题意 有$n$个点，每个点都有一个值，两个点确定的线段的值为两个点的乘积。求一条过原点的直线，使它穿过的所有线段的值之和最大，输出这个最大值。 思路 第一次做这种题完全没有什么思路，想到的算法还没敲都被自己YY TLE了，最后还是靠大佬点拨了一下按斜率排序。（果然还是太菜了） 易得直线穿过的值之和就是两块区域中点的和的乘积。 对于每个点，我们求这个点和原点连线的斜率，然后对所有的点按斜率排序。 先选一条直线，将所有的点分为两部分，然后慢慢旋转180°。由于我们对斜率排序，所以我们选择x=0为初始直线。 我们将x=0这条直线逆时针旋转，可以想象一下它在旋转的时候，会依次碰到排序后的点，（由于题目说了不会存在两点连线过原点的情况，所以不会同时碰到两个点。一开始没看到，想了好久）。每碰到一个点，就将它的值从原集合减去加到另一个集合中。找到所有分法的最大值。 ans要用long long。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define INF 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; const int N=5e4+5;struct node&#123; int x,y,valum; double Angle;&#125;point[N];bool cmp(node x,node y)&#123;return x.Angle&lt;y.Angle;&#125;int main()&#123; int Case,n;ll sum1,sum2,ans; cin&gt;&gt;Case; while(Case--) &#123; sum1=0;sum2=0; cin&gt;&gt;n; for(int i=0;i&lt;n;i++)&#123; scanf("%d%d%d",&amp;point[i].x,&amp;point[i].y,&amp;point[i].valum); point[i].Angle=point[i].y*1.0/point[i].x; //算斜率 &#125; sort(point,point+n,cmp); for(int i=0;i&lt;n;i++) //初始时直线是x=0,所以x&gt;0是一个集合，x&lt;=0是个集合。 if(point[i].x&gt;0) sum1+=point[i].valum; else sum2+=point[i].valum; ans=sum1*sum2; for(int i=0;i&lt;n;i++)&#123; //旋转 if(point[i].x&gt;0) sum1-=point[i].valum,sum2+=point[i].valum; else sum1+=point[i].valum,sum2-=point[i].valum; ans=max(ans,sum1*sum2); //取最大 &#125; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Biorhythms(拓展欧几里德+中国剩余定理)]]></title>
    <url>%2FBiorhythms%2F</url>
    <content type="text"><![CDATA[描述传送门：poj-1006 &emsp;Some people believe that there are three cycles in a person’s life that start the day he or she is born. These three cycles are the physical, emotional, and intellectual cycles, and they have periods of lengths 23, 28, and 33 days, respectively. There is one peak in each period of a cycle. At the peak of a cycle, a person performs at his or her best in the corresponding field (physical, emotional or mental). For example, if it is the mental curve, thought processes will be sharper and concentration will be easier. &emsp;Since the three cycles have different periods, the peaks of the three cycles generally occur at different times. We would like to determine when a triple peak occurs (the peaks of all three cycles occur in the same day) for any person. For each cycle, you will be given the number of days from the beginning of the current year at which one of its peaks (not necessarily the first) occurs. You will also be given a date expressed as the number of days from the beginning of the current year. You task is to determine the number of days from the given date to the next triple peak. The given date is not counted. For example, if the given date is 10 and the next triple peak occurs on day 12, the answer is 2, not 3. If a triple peak occurs on the given date, you should give the number of days to the next occurrence of a triple peak. Input You will be given a number of cases. The input for each case consists of one line of four integers p, e, i, and d. The values p, e, and i are the number of days from the beginning of the current year at which the physical, emotional, and intellectual cycles peak, respectively. The value d is the given date and may be smaller than any of p, e, or i. All values are non-negative and at most 365, and you may assume that a triple peak will occur within 21252 days of the given date. The end of input is indicated by a line in which $p = e = i = d = -1$. Output For each test case, print the case number followed by a message indicating the number of days to the next triple peak, in the form:Case 1: the next triple peak occurs in 1234 days.Use the plural form days even if the answer is 1. Examples intput 12345670 0 0 00 0 0 1005 20 34 3254 5 6 7283 102 23 320203 301 203 40-1 -1 -1 -1 output 123456Case 1: the next triple peak occurs in 21252 days.Case 2: the next triple peak occurs in 21152 days.Case 3: the next triple peak occurs in 19575 days.Case 4: the next triple peak occurs in 16994 days.Case 5: the next triple peak occurs in 8910 days.Case 6: the next triple peak occurs in 10789 days. 思路 转化一下即求解最小的$x$并满足： S: \begin{cases} x \equiv a\ \ (mod\ 23)\\ x \equiv b\ \ (mod\ 38) \\ x \equiv c\ \ (mod\ 33) \\ \end{cases} 裸的中国剩余定理，处理一下x&lt;=0和x&lt;d的情况就行了。在这里wa了几发 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344#include&lt;iostream&gt;#include&lt;algorithm&gt; #include&lt;string.h&gt; #include&lt;string&gt; #include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define INF 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; int exgcd(int a,int b,int &amp;x,int &amp;y)&#123; if(b==0) return x=1,y=0,a; int tem=exgcd(b,a%b,y,x); y-=a/b*x; return tem;&#125;int China(int w[],int b[],int k,int d)&#123; int x,y,ns=0,m,n=1; for(int i=0;i&lt;k;i++) n*=w[i]; for(int i=0;i&lt;k;i++)&#123; m=n/w[i]; exgcd(w[i],m,x,y); ans=(ans+y*m*b[i])%n; &#125; if(ans&lt;=0||ans&lt;d) ans+=n; return ans;&#125;int main()&#123; ios::sync_with_stdio(false); int a[3],w[3]=&#123;23,28,33&#125;,d,Case=0; while(cin&gt;&gt;a[0]&gt;&gt;a[1]&gt;&gt;a[2]&gt;&gt;d&amp;&amp;a[0]&gt;=0&amp;&amp;a[1]&gt;=0&amp;&amp;a[2]&gt;=0&amp;&amp;d&gt;=0) printf("Case %d: the next triple peak occurs in %d days.\n",++Case,China(w,a,3,d)-d); return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>拓欧</tag>
        <tag>中国剩余定理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C Looooops(拓展欧几里德)]]></title>
    <url>%2FC-Looooops%2F</url>
    <content type="text"><![CDATA[描述传送门：poj-2115 A Compiler Mystery: We are given a C-language style for loop of typefor(variable = A; variable != B; variable += C) statement; Ie, a loop which starts by setting variable to value A and while variable is not equal to B, repeats statement followed by increasing the variable by C. We want to know how many times does the statement get executed for particular values of A, B and C, assuming that all arithmetics is calculated in a k-bit unsigned integer type (with values 0 &lt;= x &lt; $2^k$) modulo $2^k$. Input The input consists of several instances. Each instance is described by a single line with four integers A, B, C, k separated by a single space. The integer k (1 &lt;= k &lt;= 32) is the number of bits of the control variable of the loop and A, B, C (0 &lt;= A, B, C &lt; 2 k) are the parameters of the loop. The input is finished by a line containing four zeros. Output The output consists of several lines corresponding to the instances on the input. The i^(th) line contains either the number of executions of the statement in the i^(th) instance (a single integer number) or the word “FOREVER” if the loop does not terminate. Examples intput 123453 3 2 163 7 2 167 3 2 163 4 2 160 0 0 0 output 12340232766FOREVER 思路 $k=2^k$,即求$a+t \cdot c-k \cdot m=b$，求最小正数$t$，拓欧基本操作。 代码123456789101112131415161718192021222324252627282930313233343536373839404142#include&lt;iostream&gt;#include&lt;algorithm&gt; #include&lt;string.h&gt; #include&lt;string&gt; #include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define INF 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; ll exgcd(ll a,ll b,ll &amp;x,ll &amp;y)&#123; if(b==0) return x=1,y=0,a; ll tmp=exgcd(b,a%b,y,x); y-=a/b*x; return tmp;&#125;int main()&#123; ll a,b,c,k,x,y,d,t; while(~scanf("%lld%lld%lld%lld",&amp;a,&amp;b,&amp;c,&amp;k)&amp;&amp;(a||b||c||k)) &#123; k=(1LL)&lt;&lt;k; //注意1要转成long long的1,否则k=32时要爆精度。 t=b-a; ll gcd=exgcd(c,k,x,y); if((b-a)%gcd) printf("FOREVER\n"); else&#123; x*=(b-a)/gcd; k /= gcd; x = (x%k + k) % k; printf("%lld\n",x); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>拓欧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[青蛙的约会(拓展欧几里德)]]></title>
    <url>%2F%E9%9D%92%E8%9B%99%E7%9A%84%E7%BA%A6%E4%BC%9A%2F</url>
    <content type="text"><![CDATA[描述传送门：poj-1061 &emsp;两只青蛙在网上相识了，它们聊得很开心，于是觉得很有必要见一面。它们很高兴地发现它们住在同一条纬度线上，于是它们约定各自朝西跳，直到碰面为止。可是它们出发之前忘记了一件很重要的事情，既没有问清楚对方的特征，也没有约定见面的具体位置。不过青蛙们都是很乐观的，它们觉得只要一直朝着某个方向跳下去，总能碰到对方的。但是除非这两只青蛙在同一时间跳到同一点上，不然是永远都不可能碰面的。为了帮助这两只乐观的青蛙，你被要求写一个程序来判断这两只青蛙是否能够碰面，会在什么时候碰面。我们把这两只青蛙分别叫做青蛙A和青蛙B，并且规定纬度线上东经0度处为原点，由东往西为正方向，单位长度1米，这样我们就得到了一条首尾相接的数轴。设青蛙A的出发点坐标是x，青蛙B的出发点坐标是y。青蛙A一次能跳m米，青蛙B一次能跳n米，两只青蛙跳一次所花费的时间相同。纬度线总长L米。现在要你求出它们跳了几次以后才会碰面。 Input 输入只包括一行5个整数x，y，m，n，L，其中x≠y &lt; 2000000000，0 &lt; m、n &lt; 2000000000，0 &lt; L &lt; 2100000000。 Output 输出碰面所需要的跳跃次数，如果永远不可能碰面则输出一行”Impossible”。 Examples intput 11 2 3 4 5 output 14 思路 显然我们要求满足$(x+t \cdot m)\%L=(y+t \cdot n)\% L$的最小正数$t$。 变换一下得$t\cdot (m-n)+k \cdot L= y-x$,再变一下得到最后的式子\frac {t \cdot gcd}{y-x} \cdot (m-n)+\frac {k \cdot gcd}{y-x} \cdot L=gcd其中$gcd=gcd(m-n,L)$。然后直接套拓欧模板。 拓展欧几里德详解 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include&lt;iostream&gt;#include&lt;algorithm&gt; #include&lt;string.h&gt; #include&lt;string&gt; #include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define INF 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; ll exgcd(ll a,ll b,ll &amp;x,ll &amp;y) //拓展欧几里德算法 &#123; if(b==0)&#123;x=1;y=0;return a;&#125; ll r=exgcd(b,a%b,x,y); ll c=x; x=y; y=c-a/b*y; return r;&#125;int main()&#123; ll x,y,m,n,L,ans,a,b; cin&gt;&gt;x&gt;&gt;y&gt;&gt;m&gt;&gt;n&gt;&gt;L; a=m-n;ll c=y-x;b=L; //处理一下 if(a&lt;0)&#123; a=-a;c=-c; &#125; ll gcd=exgcd(a,b,x,y); if(c%gcd) cout&lt;&lt;"Impossible"&lt;&lt;endl; else&#123; x=x*c/gcd; if(x&gt;0) x=x%(b/gcd); else x=x%(b/gcd)+b/gcd; cout&lt;&lt;x&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>拓欧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Who Gets the Most Candies?(线段树+约瑟夫环)]]></title>
    <url>%2FWho-Gets-the-Most-Candies%2F</url>
    <content type="text"><![CDATA[描述传送门：poj-2886 &emsp;N children are sitting in a circle to play a game. The children are numbered from 1 to N in clockwise order. Each of them has a card with a non-zero integer on it in his/her hand. The game starts from the K-th child, who tells all the others the integer on his card and jumps out of the circle. The integer on his card tells the next child to jump out. Let A denote the integer. If A is positive, the next child will be the A-th child to the left. If A is negative, the next child will be the (−A)-th child to the right. The game lasts until all children have jumped out of the circle. During the game, the p-th child jumping out will get F(p) candies where F(p) is the number of positive integers that perfectly divide p. Who gets the most candies? Input There are several test cases in the input. Each test case starts with two integers N $(0 &lt; N \leq 500,000)$ and K $(1 \leq K \leq N) on the first line. The next N lines contains the names of the children (consisting of at most 10 letters) and the integers (non-zero with magnitudes within $10^8$) on their cards in increasing order of the children’s numbers, a name and an integer separated by a single space in a line with no leading or trailing spaces. Output Output one line for each test case containing the name of the luckiest child and the number of candies he/she gets. If ties occur, always choose the child who jumps out of the circle first. Examples intput 123454 2Tom 2Jack 4Mary -1Sam 1 output 1Sam 3 题目大意 有N个人，每个人有一个数$a_i$。从第K个人开始出列，如果他的数$a_i$&gt;0，则他顺时针方向第$(a_i)$个人出列，循环，直到最后一个人出列。 $x$表示在第$x$轮出列,$f(x)$表示$x$的因数个数。求最大的$f(x)$。 思路 线段树维护区间值和，表示这个区间还剩多少人，每次更新就在对应区间-1。 设当前这轮$k$出列，用$k=(k+a_i$)%当前剩余人数，求得下一个$k$的值。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) mamset(a,0,sizeof(a))typedef long long ll;const int N=5e5+5;typedef pair&lt;char[12],int &gt; pp;int tr[N&lt;&lt;2],book[N];pp people[N];int Init() //打表book[i]表示i的因数个数 &#123; for(int i=1;i&lt;=500000;i++) for(int j=i;j&lt;=500000;j+=i) book[j]++;&#125;void Built(int root,int l,int r)&#123; if(l==r) &#123; tr[root]=1; return;&#125; else&#123; int mid=l+r&gt;&gt;1; Built(root&lt;&lt;1,l,mid); Built(root&lt;&lt;1|1,mid+1,r); tr[root]=tr[root&lt;&lt;1]+tr[root&lt;&lt;1|1]; &#125;&#125;int Update(int root,int l,int r,int x) &#123; if(l==r) &#123; tr[root]--; return l; &#125; else&#123; tr[root]--; int mid=l+r&gt;&gt;1; if(x&lt;=tr[root&lt;&lt;1]) return Update(root&lt;&lt;1,l,mid,x); //判断出列的在左边还是右边 else return Update(root&lt;&lt;1|1,mid+1,r,x-tr[root&lt;&lt;1]); &#125;&#125;int main()&#123; ios::sync_with_stdio(false); Init(); int n,k,ans=0,tem; while(cin&gt;&gt;n&gt;&gt;k) &#123; ans=0;tem=k; Built(1,1,n); for(int i=1;i&lt;=n;i++) cin&gt;&gt;people[i].first&gt;&gt;people[i].second; for(int i=1;i&lt;=n;i++) if(ans&lt;book[i]) ans=book[i]; //找到最大的f(x) for(int i=1;i&lt;=n;i++) //依次出列 &#123; tem=Update(1,1,n,k); //第k个人出列 if(book[i]==ans) &#123; cout&lt;&lt;people[tem].first&lt;&lt;" "&lt;&lt;ans&lt;&lt;endl; break; &#125; if(people[tem].second&gt;0) //判断下一个出列的人的位置 k=(k-1+people[tem].second-1)%(n-i)+1; else k=((k-1+people[tem].second)%(n-i)+(n-i))%(n-i)+1; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Minimum Inversion Number(树状数组+离散化处理)]]></title>
    <url>%2FMinimum-Inversion-Number%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-1394 &emsp;The inversion number of a given number sequence $a_1, a_2, …, a_n$ is the number of pairs $(a_i, a_j)$ that satisfy i &lt; j and $a_i &gt; a_j$. For a given sequence of numbers a1, a2, …, an, if we move the first m &gt;= 0 numbers to the end of the seqence, we will obtain another sequence. There are totally n such sequences as the following: $a_1, a_2, …, a_(n-1), a_n$ (where m = 0 - the initial seqence)$a_2, a_3, …, a_n, a_1$ (where m = 1)$a_3, a_4, …, a_n, a_1, a_2$ (where m = 2)…$a_n, a_1, a_2, …, a_(n-1) (where m = n-1) You are asked to write a program to find the minimum inversion number out of the above sequences. Input The input consists of a number of test cases. Each case consists of two lines: the first line contains a positive integer n (n &lt;= 5000); the next line contains a permutation of the n integers from 0 to n-1. Output For each case, output the minimum inversion number on a single line. Examples intput 12101 3 6 9 0 8 5 7 4 2 output 116 大致题意 给你一个长$n$的数列，每次把第一个数放到末尾，求这$n$种排列方式中的最小逆序数。 思路 求出原始数列的逆序数。 O(n)遍历，每次求出新的数列的逆序数，每次变化得到的新的逆序数为$tem+(n-2*b[i]+1)$，b[i]为数列第i个值。 求逆序数的方法有：暴力，归并排序，树状数组+离散化,这次我用的是树状数组。详见求数列的逆序数 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define lowbit(x) (x&amp;(-x))#define INF 0xfffffffftypedef long long ll;const int N=5e5+5;int tr[N],b[N],n;typedef pair &lt;int,int&gt; pp;pp a[N];void Update(int x)&#123;while(x&lt;=n)&#123;tr[x]++;x+=lowbit(x);&#125;&#125;int Query(int x)&#123;int sum=0;while(x&gt;0)&#123;sum+=tr[x];x-=lowbit(x);&#125;return sum;&#125;int main()&#123; while(cin&gt;&gt;n) &#123; CRL(tr); for(int i=1;i&lt;=n;i++) //离散化开始 &#123; cin&gt;&gt;a[i].first; a[i].second=i; &#125; sort(a+1,a+n+1); for(int i=1;i&lt;=n;i++) b[a[i].second]=i; //离散化结束 int ans=0; for(int i=1;i&lt;=n;i++) &#123; Update(b[i]); ans+=(i-Query(b[i])); &#125; int tem=ans; for(int i=1;i&lt;n;i++) &#123; tem=tem+(n-2*b[i]+1); ans=min(ans,tem); &#125; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0; &#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Billboard（线段树）]]></title>
    <url>%2FBillboard%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-2795 &emsp;At the entrance to the university, there is a huge rectangular billboard of size h*w (h is its height and w is its width). The board is the place where all possible announcements are posted: nearest programming competitions, changes in the dining room menu, and other important information. On September 1, the billboard was empty. One by one, the announcements started being put on the billboard. Each announcement is a stripe of paper of unit height. More specifically, the i-th announcement is a rectangle of size 1 * wi. When someone puts a new announcement on the billboard, she would always choose the topmost possible position for the announcement. Among all possible topmost positions she would always choose the leftmost one. If there is no valid location for a new announcement, it is not put on the billboard (that’s why some programming contests have no participants from this university). Given the sizes of the billboard and the announcements, your task is to find the numbers of rows in which the announcements are placed. Input There are multiple cases (no more than 40 cases). The first line of the input file contains three integer numbers, h, w, and n (1 &lt;= h,w &lt;= $10^9$; 1 &lt;= n &lt;= 200,000) - the dimensions of the billboard and the number of announcements. Each of the next n lines contains an integer number wi (1 &lt;= wi &lt;=$ 10^9 $) - the width of i-th announcement. Output For each announcement (in the order they are given in the input file) output one number - the number of the row in which this announcement is placed. Rows are numbered from 1 to h, starting with the top row. If an announcement can’t be put on the billboard, output “-1” for this announcement. Examples intput 1234563 5 524333 output 123451213-1 思路 线段树，对每行建树，叶子节点为此行剩余的宽度，维护区间最大值。 单点修改，单点查询。 每次贴广告就更新一次，如果根节点左右都放不下就返回-1。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define INF 0xffffffftypedef unsigned long long LL;typedef long long ll;const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7;const int N=2*1e6+5;int tr[N&lt;&lt;2];void Built(int root,int l,int r,int c)&#123; if(l==r) tr[root]=c; else &#123; int mid=l+r&gt;&gt;1; Built(root&lt;&lt;1,l,mid,c); Built(root&lt;&lt;1|1,mid+1,r,c); tr[root]=max(tr[root&lt;&lt;1],tr[root&lt;&lt;1|1]); &#125;&#125;int Update(int root,int l,int r,int c)&#123; int tem; if(l==r) &#123; if(tr[root]&lt;c) return -1; tr[root]-=c; return l; &#125; else &#123; int mid=l+r&gt;&gt;1; if(tr[root&lt;&lt;1]&gt;=c) tem=Update(root&lt;&lt;1,l,mid,c); else if(tr[root&lt;&lt;1|1]&gt;=c) tem=Update(root&lt;&lt;1|1,mid+1,r,c); else return -1; tr[root]=max(tr[root&lt;&lt;1],tr[root&lt;&lt;1|1]); &#125; return tem;&#125;int main()&#123; int h,w,n,x; ios::sync_with_stdio(false); while(cin&gt;&gt;h&gt;&gt;w&gt;&gt;n) &#123; h= h&gt;n? n:h; Built(1,1,h,w); while(n--) &#123; cin&gt;&gt;x; cout&lt;&lt;Update(1,1,h,x)&lt;&lt;endl; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[swust oj(数据结构前40)]]></title>
    <url>%2Fswust-oj-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%89%8D40%2F</url>
    <content type="text"><![CDATA[博主码风太丑，勿喷。由于据说数据结构考试必须强行用学的这些数据结构，所以都老老实实写的。用数组模拟的代码有时间再写了 [941] 有序顺序表的合并操作的实现思路题目描述顺序表实现数组模拟实现每次比较两个序列的前两个，选小的放入c，详见代码。 传送门 描述 已知两非递减的顺序线性表，要求合并成一个新的非递减顺序线性表。(测试数据为整型) 输入 输入包含四行，第一行为自然数n，表示第一个非递减顺序线性表的长度;第二行为n个自然数构成的非递减顺序线性表;第三行为自然数m，表示第二个非递减顺序线性表的长度;第四行为m个自然数构成的非递减顺序线性表。 输出 输出：用一行输出合并后的非递减顺序线性表，各数之间用一个空格隔开。 样例输入123421 332 3 6 样例输出11 2 3 3 6 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct &#123; int date[100]; int len;&#125; SqList;void Create (SqList *&amp;L)&#123; int n; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) cin&gt;&gt;L-&gt;date[i]; L-&gt;len=n;&#125;void Merge(SqList *&amp;La,SqList *&amp;Lb,SqList *&amp;Lc)&#123; int ia=0,ib=0,ic=0; while(ia&lt;La-&gt;len&amp;&amp;ib&lt;Lb-&gt;len) Lc-&gt;date[ic++]= La-&gt;date[ia] &lt;= Lb-&gt;date[ib]? La-&gt;date[ia++]:Lb-&gt;date[ib++]; while(ia&lt;La-&gt;len) Lc-&gt;date[ic++]=La-&gt;date[ia++]; while(ib&lt;Lb-&gt;len) Lc-&gt;date[ic++]=Lb-&gt;date[ib++]; Lc-&gt;len=La-&gt;len+Lb-&gt;len;&#125;void Put(SqList *&amp;La)&#123; for(int i=0;i&lt;La-&gt;len;i++) cout&lt;&lt;La-&gt;date[i]&lt;&lt;" "; &#125;int main()&#123; SqList *La,*Lb,*Lc; La=(SqList *) malloc(sizeof(SqList)); Lb=(SqList *) malloc(sizeof(SqList)); Lc=(SqList *) malloc(sizeof(SqList)); Create(La); Create(Lb); Merge(La,Lb,Lc); Put(Lc); return 0;&#125; 敬请期待… [942] 逆置顺序表思路题目描述顺序表实现数组模拟实现… 传送门 描述 建立长度为n的顺序表，然后将表中的数据元素逆置，即若表中原来的数据元素序列为（a0，a1，a2，…，an），则逆置后的数据元素序列为（an，an-1，an-2，…，a1，a0）。（数据类型为字符型） 输入 第一行为顺序表的长度n；第二行为顺序表中的数据元素. 输出 输出为逆置后的顺序表. 样例输入127ABCDEFG 样例输出1G F E D C B A 1234567891011121314151617181920212223242526272829303132333435363738394041#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct &#123; char date[100]; int len;&#125; SqList;void Create (SqList *&amp;L)&#123; int n; cin&gt;&gt;n; getchar(); for(int i=0;i&lt;n;i++) scanf("%c",&amp;L-&gt;date[i]); L-&gt;len=n;&#125;void Put(SqList *&amp;La)&#123; for(int i=La-&gt;len-1;i&gt;=0;i--) cout&lt;&lt;La-&gt;date[i]&lt;&lt;" "; &#125;int main()&#123; SqList *La; La=(SqList *) malloc(sizeof(SqList)); Create(La); Put(La); return 0;&#125; 敬请期待… [943] 顺序表插入操作的实现思路题目描述顺序表实现数组模拟实现插入到位置i就要把i及以后的元素都后移一个，再插入。 传送门 描述 建立长度为n的顺序表，在指定的数据元素item之前插入数据元素data。如果指定的数据元素item不存在，则将data插入到顺序表的尾端。（数据类型为整型） 输入 第一行为顺序表的长度n；第二行为顺序表中的数据元素；第三行为指定的数据元素item；第四行为要插入的数据元素data； 输出 顺序表中的数据元素。 样例输入12341010 20 30 40 50 60 70 80 90 1005055 样例输出110 20 30 40 55 50 60 70 80 90 100 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct &#123; int date[100]; int len;&#125; SqList;void Create (SqList *&amp;L)&#123; int n; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) cin&gt;&gt;L-&gt;date[i]; L-&gt;len=n;&#125;void Put(SqList *&amp;La)&#123; for(int i=0;i&lt;La-&gt;len;i++) cout&lt;&lt;La-&gt;date[i]&lt;&lt;" "; &#125;void Insert(SqList *&amp;La,int add,int x)&#123; int Flag=0; while(La-&gt;date[Flag]!=add&amp;&amp;Flag&lt;La-&gt;len) Flag++; if(Flag==La-&gt;len) &#123; La-&gt;date[Flag]=x; &#125; else &#123; int i=La-&gt;len-1; while(Flag&lt;=i&amp;&amp;i&gt;=0) &#123; La-&gt;date[i+1]=La-&gt;date[i]; i--; &#125; La-&gt;date[i+1]=x; &#125; La-&gt;len++; &#125; int main()&#123; SqList *La; La=(SqList *) malloc(sizeof(SqList)); Create(La); int a,b; cin&gt;&gt;a&gt;&gt;b; Insert(La,a,b); Put(La); return 0;&#125; 敬请期待… [952] 单链表的插入操作的实现思路题目描述单链表实现数组模拟实现基操 传送门 描述 建立长度为n的单链表，在第i个结点之前插入数据元素data。 输入 第一行为自然数n，表示链式线性表的长度；第二行为n个自然数表示链式线性表各元素值；第三行为指定插入的位置i；第四行为待插入数据元素data。 输出 指定插入位置合法时候，输出插入元素后的链式线性表的所有元素，元素之间用一个空格隔开。输入不合法，输出”error!”。 样例输入123451 2 3 4 536 样例输出11 2 6 3 4 5 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct node &#123; int data; node *next;&#125; LinkNode;void Create (LinkNode *&amp;Head,int n)&#123; Head=(LinkNode *)malloc(sizeof(LinkNode)); LinkNode *p1,*p2; p1=p2=Head; for(int i=0;i&lt;n;i++) &#123; p1=(LinkNode *)malloc(sizeof(LinkNode)); cin&gt;&gt;p1-&gt;data; if(i==0) Head-&gt;next=p1; p2-&gt;next=p1; p2=p1; &#125; p2-&gt;next=NULL;&#125;void Put(LinkNode *Head)&#123; LinkNode *p1=Head-&gt;next; while(p1!=NULL) &#123; cout&lt;&lt;p1-&gt;data&lt;&lt;" "; p1=p1-&gt;next; &#125;&#125;void Insert(LinkNode *&amp;Head,int add,int x)&#123; LinkNode *p1=Head,*tem; for(int i=1;i&lt;add;i++) p1=p1-&gt;next; tem=(LinkNode *)malloc(sizeof(LinkNode)); tem-&gt;data=x; tem-&gt;next=p1-&gt;next; p1-&gt;next=tem;&#125;int main()&#123; LinkNode *Head; int len; cin&gt;&gt;len; Create(Head,len); int a,b; cin&gt;&gt;a&gt;&gt;b; if(a&lt;=0||a&gt;len) cout&lt;&lt;"error!"; else &#123; Insert(Head,a,b); Put(Head); &#125; return 0;&#125; 敬请期待… [953] 单链表的删除操作的实现思路题目描述单链表实现数组模拟实现基操 传送门 描述 建立长度为n的单链表，删除第i个结点之前的结点。 输入 第一行为自然数n，表示链式线性表的长度；第二行为n个自然数表示链式线性表各元素值；第三行为指定的删除参数i。 输出 指定删除位置合法时候，输出删除元素后的链式线性表的所有元素，元素之间用一个空格隔开。输入不合法，输出”error!”。 样例输入123451 2 3 4 536 样例输出11 3 4 5 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct node &#123; int date; node *next;&#125; LinkNode;void Create (LinkNode *&amp;Head,int n)&#123; Head=(LinkNode *)malloc(sizeof(LinkNode)); LinkNode *p1,*p2; p1=p2=Head; for(int i=0;i&lt;n;i++) &#123; p1=(LinkNode *)malloc(sizeof(LinkNode)); cin&gt;&gt;p1-&gt;date; if(i==0) Head-&gt;next=p1; p2-&gt;next=p1; p2=p1; &#125; p2-&gt;next=NULL;&#125;void Put(LinkNode *Head)&#123; LinkNode *p1=Head-&gt;next; while(p1!=NULL) &#123; cout&lt;&lt;p1-&gt;date&lt;&lt;" "; p1=p1-&gt;next; &#125;&#125;void Delete(LinkNode *&amp;Head,int x)&#123; LinkNode *p1=Head,*tem; for(int i=0;i&lt;x-2;i++) p1=p1-&gt;next; p1-&gt;next=p1-&gt;next-&gt;next;&#125;int main()&#123; LinkNode *Head; int len; cin&gt;&gt;len; Create(Head,len); int x; cin&gt;&gt;x; if(x&lt;=1||x&gt;len) cout&lt;&lt;"error!"; else &#123; Delete(Head,x); Put(Head); &#125; return 0;&#125; 敬请期待… [954] 单链表的链接题目链接题目描述单链表实现数组模拟实现 传送门 描述 建立长度为n的单链表A和长度为m的单链表B。编程实现将B表链接在A表的尾端，形成一个单链表A。数据类型指定为字符型。 输入 第一行为A表的长度n；第二行为A表中的数据元素;第三行为B表的长度m；第四行为B表中的数据元素。 输出 输出为链接好后的A表中的所有数据元素。 样例输入12344A B C D 61 2 3 4 5 6 样例输出1A B C D 1 2 3 4 5 6 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct node &#123; char date; node *next;&#125; LinkNode;void Create (LinkNode *&amp;Head)&#123; int n; cin&gt;&gt;n; Head=(LinkNode *)malloc(sizeof(LinkNode)); LinkNode *p1,*p2; p1=p2=Head; for(int i=0;i&lt;n;i++) &#123; p1=(LinkNode *)malloc(sizeof(LinkNode)); getchar(); scanf("%c",&amp;p1-&gt;date); if(i==0) Head-&gt;next=p1; p2-&gt;next=p1; p2=p1; &#125; p2-&gt;next=NULL;&#125;void Put(LinkNode *Head)&#123; LinkNode *p1=Head-&gt;next; while(p1!=NULL) &#123; cout&lt;&lt;p1-&gt;date&lt;&lt;" "; p1=p1-&gt;next; &#125;&#125;void Merge(LinkNode *&amp;Head1,LinkNode *&amp;Head2)&#123; LinkNode *p1=Head1; while(p1-&gt;next!=NULL) p1=p1-&gt;next; p1-&gt;next=Head2-&gt;next;&#125;int main()&#123; LinkNode *Head1,*Head2; Create(Head1); Create(Head2); Merge(Head1,Head2); Put(Head1); return 0;&#125; 敬请期待… [955] 单链表上查找算法的实现思路题目描述单链表实现数组模拟实现遍历大法好 传送门 描述 建立一个长度为n的带头结点的单链表，在该表中寻找第i个结点，若找到，则输出ok，否则输出error。处理数据类型为整型。 输入 第一行为链表的长度n；第二行为链表中的数据元素；第三行为要找的结点i。 输出 找到就输出ok，没找到就输出error。 样例输入123101 2 3 4 5 6 7 8 9 105 样例输出1ok 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct node &#123; int date; node *next;&#125; LinkNode;void Create (LinkNode *&amp;Head,int n)&#123; Head=(LinkNode *)malloc(sizeof(LinkNode)); LinkNode *p1,*p2; p1=p2=Head; for(int i=0;i&lt;n;i++) &#123; p1=(LinkNode *)malloc(sizeof(LinkNode)); cin&gt;&gt;p1-&gt;date; if(i==0) Head-&gt;next=p1; p2-&gt;next=p1; p2=p1; &#125; p2-&gt;next=NULL;&#125;int main()&#123; LinkNode *Head; int len; cin&gt;&gt;len; Create(Head,len); int n; cin&gt;&gt;n; n&lt;1||n&gt;len? cout&lt;&lt;"error":cout&lt;&lt;"ok"; return 0;&#125; 敬请期待… [956] 约瑟夫问题的实现思路题目描述循环链表实现数组模拟实现用循环链表，每次数到k就删除这个节点 传送门 描述 n个人围成一个圈，每个人分别标注为1、2、…、n，要求从1号从1开始报数，报到k的人出圈，接着下一个人又从1开始报数，如此循环，直到只剩最后一个人时，该人即为胜利者。例如当n=10,k=4时，依次出列的人分别为4、8、2、7、3、10，9、1、6、5，则5号位置的人为胜利者。给定n个人，请你编程计算出最后胜利者标号数。（要求用单循环链表完成。） 输入 第一行为人数n;第二行为报数k。 输出 输出最后胜利者的标号数。 样例输入12104 样例输出15 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct node &#123; int data; node *next;&#125; LinkNode;void Create (LinkNode *&amp;Head,int n)&#123; LinkNode *p1,*p2; p1=(LinkNode *)malloc(sizeof(LinkNode)); Head=p1;p2=p1; p1-&gt;data=n; for(int i=1;i&lt;n;i++) &#123; p1=(LinkNode *)malloc(sizeof(LinkNode)); p1-&gt;data=i; p2-&gt;next=p1; p2=p1; &#125; p2-&gt;next=Head;&#125;void Work(LinkNode *Head,int n,int k)&#123; LinkNode *p1=Head; while(n!=1) &#123; for(int i=1;i&lt;k;i++) p1=p1-&gt;next; //cout&lt;&lt;p1-&gt;next-&gt;data&lt;&lt;","; p1-&gt;next=p1-&gt;next-&gt;next; n--; &#125; cout&lt;&lt;p1-&gt;data;&#125;int main()&#123; LinkNode *Head; int n,k; cin&gt;&gt;n&gt;&gt;k; Create(Head,n); Work(Head,n,k); return 0;&#125; 敬请期待… [957] 逆置单链表思路题目描述单链表实现数组模拟实现头插法重新建立单链表 描述传送门 建立长度为n的单链表，然后将其数据元素逆置，即第1个元素变为最后一个元素，第2个元素变为倒数第2个元素，以此类推，最后一个元素变为第1个元素。（处理的数据类型为字符型。必须使用链表完成。） 输入 第一行为链表长度n；第二行为链表中的n个数据元素的值。 输出 逆置后的原始的值。 样例输入1210ABCDEFGHIJ 样例输出1J I H G F E D C B A 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct node &#123; char data; node *next;&#125; LinkNode;void Create (LinkNode *&amp;Head,int n)&#123; LinkNode *p1,*p2; p1=(LinkNode *)malloc(sizeof(LinkNode)); getchar(); scanf("%c",&amp;p1-&gt;data); Head=p2=p1; for(int i=0;i&lt;n;i++) &#123; p1=(LinkNode *)malloc(sizeof(LinkNode)); scanf("%c",&amp;p1-&gt;data); p2-&gt;next=p1; p2=p1; &#125; p2-&gt;next=NULL;&#125;void Put(LinkNode *Head)&#123; LinkNode *p1=Head; while(p1!=NULL) &#123; cout&lt;&lt;p1-&gt;data&lt;&lt;" "; p1=p1-&gt;next; &#125;&#125;void Reverse(LinkNode *&amp;Head,int n)&#123; LinkNode *p1=Head-&gt;next,*p2=p1-&gt;next; Head-&gt;next=NULL; for(int i=1;i&lt;n;i++) &#123; p1-&gt;next=Head; Head=p1; p1=p2; p2=p2-&gt;next; &#125;&#125;int main()&#123; LinkNode *Head; int len; cin&gt;&gt;len; Create(Head,len); Reverse(Head,len); Put(Head); return 0;&#125; 敬请期待… [960] 双向链表的操作问题思路题目描述双向链表实现数组模拟实现每次读入新节点就遍历一遍，然后找到合适的位置插进去。 传送门 描述 建立一个长度为n的带头结点的双向链表，使得该链表中的数据元素递增有序排列。（必须使用双向链表完成，数据类型为整型。） 输入 第一行：双向表的长度；第二行：链表中的数据元素。 输出 输出双向链表中的数据元素的值。 样例输入12102 4 6 3 5 8 10 21 12 9 样例输出12 3 4 5 6 8 9 10 12 21 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct node &#123; int data; node *pre; node *next;&#125; DLinkNode;void Create (DLinkNode *&amp;Head,int n)&#123; int x; DLinkNode *p1,*p2; p1=(DLinkNode *)malloc(sizeof(DLinkNode)); Head=p2=p1; Head-&gt;pre=NULL; Head-&gt;next=NULL; while(n--) &#123; cin&gt;&gt;x;p1=Head; while(p1-&gt;next!=NULL&amp;&amp;p1-&gt;next-&gt;data&lt;=x) p1=p1-&gt;next; p2=(DLinkNode *)malloc(sizeof(DLinkNode)); p2-&gt;data=x; p2-&gt;pre=p1; p2-&gt;next=p1-&gt;next; if(p1-&gt;next!=NULL) p1-&gt;next-&gt;pre=p2; p1-&gt;next=p2; &#125;&#125;void Put(DLinkNode *Head)&#123; DLinkNode *p1=Head-&gt;next; while(p1!=NULL) &#123; cout&lt;&lt;p1-&gt;data&lt;&lt;" "; p1=p1-&gt;next; &#125;&#125;int main()&#123; DLinkNode *Head; int len; cin&gt;&gt;len; Create(Head,len); Put(Head); return 0;&#125; 敬请期待… [961]进制转换问题思路题目描述链栈实现数组模拟实现每次把x%2入栈，再x/=2;最后全部出栈。 传送门 描述 建立顺序栈或链栈，编写程序实现十进制数到二进制数的转换。 输入 输入只有一行，就是十进制整数。 输出 转换后的二进制数。 样例输入110 样例输出11010 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct linknode&#123; int data; linknode *next; &#125; LinkStNode; void Init(LinkStNode *&amp;Top)&#123; Top=(LinkStNode *) malloc (sizeof(LinkStNode)); Top-&gt;next=NULL;&#125;void Push(LinkStNode *&amp;Top,int x) //入栈&#123; LinkStNode *tem; tem=(LinkStNode *) malloc (sizeof(LinkStNode)); tem-&gt;data=x; tem-&gt;next=Top-&gt;next; Top-&gt;next=tem; &#125; void Pop(LinkStNode *&amp;Top) //这道题直接写全部出栈 &#123; LinkStNode *tem; while(Top-&gt;next!=NULL) &#123; tem=Top-&gt;next; cout&lt;&lt;tem-&gt;data; Top=Top-&gt;next; &#125;&#125;int main()&#123; int x; cin&gt;&gt;x; if(!x) cout&lt;&lt;0; else &#123; LinkStNode *Top; Init(Top); while(x) &#123; Push(Top,x%2); x/=2; &#125; Pop(Top); &#125; return 0;&#125; 敬请期待… [962]括号匹配问题思路题目描述链栈实现数组模拟实现每次读入一个括号就比较是否可以和栈顶的匹配，可以就弹出栈顶元素，否则就把读入的压入栈。 传送门 描述 假设表达式中允许包含两种括号:圆括号和方括号。编写一个算法判断表达式中的括号是否正确配对。 输入 由括号构成的字符串，包含‘(’、‘)’、‘[’和‘]’。 输出 如果匹配输出YES，否则输出NO。 样例输入1[([][]())] 样例输出1YES 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct linknode&#123; char data; linknode *next; &#125; LinkStNode; void Init(LinkStNode *&amp;Top)&#123; Top=(LinkStNode *) malloc (sizeof(LinkStNode)); Top-&gt;next=NULL;&#125;void Push(LinkStNode *&amp;Top,char x) //入栈&#123; LinkStNode *tem; tem=(LinkStNode *) malloc (sizeof(LinkStNode)); tem-&gt;data=x; tem-&gt;next=Top-&gt;next; Top-&gt;next=tem; &#125; void Pop(LinkStNode *&amp;Top) &#123; LinkStNode *tem; tem=Top-&gt;next; Top-&gt;next=Top-&gt;next-&gt;next; free(tem);&#125;bool Empty(LinkStNode *&amp;Top)&#123; return (Top-&gt;next==NULL);&#125;char GetTop(LinkStNode *&amp;Top)&#123; if(Top-&gt;next!=NULL) return Top-&gt;next-&gt;data; return '0';&#125;int main()&#123; LinkStNode *Top; Init(Top); char x; while(scanf("%c",&amp;x)&amp;&amp;x!='\n') &#123; if(GetTop(Top)=='['&amp;&amp;x==']'||GetTop(Top)=='('&amp;&amp;x==')') Pop(Top); else Push(Top,x); &#125; Empty(Top) ? cout&lt;&lt;"YES":cout&lt;&lt;"NO"; return 0;&#125; 敬请期待… [963] 小偷的背包思路题目描述链栈dfs实现动态规划实现每个物品只有拿和不拿两种情况，用dfs（深度优先搜索）解决，时间复杂度如果用动态规划就只要 O(NV);01背包详解及优化 传送门 描述 设有一个背包可以放入的物品重量为S，现有n件物品，重量分别是w1，w2，w3，…，wn。问能否从这n件物品中选择若干件放入背包中，使得放入的重量之和正好为S。如果有满足条件的选择，则此背包有解，否则此背包问题无解。 输入 第一行为物品重量S（整数）；第二行为物品数量n，第三行为n件物品的重量的序列。 输出 有解就输出”yes!“，没有解就输出”no!“。 样例输入1232051 3 5 7 9 样例输出1yes! 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; int Weight[200],Mark[200],Max,Flag=0,n;typedef struct linknode&#123; int sum; linknode *next; &#125; LinkStNode; void Init(LinkStNode *&amp;Top)&#123; Top=(LinkStNode *) malloc (sizeof(LinkStNode)); Top-&gt;next=NULL; Top-&gt;sum=0;&#125;int GetTop(LinkStNode *&amp;Top)&#123; if(Top-&gt;next!=NULL) return Top-&gt;next-&gt;sum; return 0;&#125;void Push(LinkStNode *&amp;Top,int x) //入栈&#123; LinkStNode *tem; tem=(LinkStNode *) malloc (sizeof(LinkStNode)); tem-&gt;sum=x+GetTop(Top); tem-&gt;next=Top-&gt;next; Top-&gt;next=tem; &#125; void Pop(LinkStNode *&amp;Top) &#123; LinkStNode *tem; tem=Top-&gt;next; Top-&gt;next=Top-&gt;next-&gt;next; free(tem);&#125;bool Empty(LinkStNode *&amp;Top)&#123; return (Top-&gt;next==NULL);&#125;void dfs(LinkStNode *&amp;Top)&#123; if(GetTop(Top)&gt;Max||Flag) return; if(GetTop(Top)==Max) &#123;Flag=1;return;&#125; for(int i=0;i&lt;n;i++) &#123; if(!Mark[i]) &#123; Push(Top,Weight[i]); Mark[i]=1; dfs(Top); Mark[i]=0; Pop(Top); &#125; &#125;&#125;int main()&#123; LinkStNode *Top; CRL(Mark); Init(Top); cin&gt;&gt;Max&gt;&gt;n; for(int i=0;i&lt;n;i++) cin&gt;&gt;Weight[i]; dfs(Top); Flag? cout&lt;&lt;"yes!":cout&lt;&lt;"no!"; return 0;&#125; 12345678910111213141516171819202122232425#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;stdio.h&gt;using namespace std;int dp[30005]=&#123;0&#125;,Time[105]=&#123;0&#125;,V,n;int main()&#123; cin&gt;&gt;V&gt;&gt;n; for(int i=1;i&lt;=n;i++) &#123; cin&gt;&gt;Time[i]; &#125; for(int i=1;i&lt;=n;i++) for(int j=V;j&gt;0;j--) if(j&gt;=Time[i]) dp[j]=max(dp[j],dp[j-Time[i]]+Time[i]); if(dp[V]==V) cout&lt;&lt;"yes!"; else cout&lt;&lt;"no!"; return 0;&#125; [964] 数细胞思路题目描述队列实现自己实现DFS,经典四联通问题。 传送门 描述 一矩形阵列由数字0到9组成，数字1到9代表细胞,细胞的定义为沿细胞数字上下左右还是细胞数字则为同一细胞,求给定矩形阵列的细胞个数。编程需要用到的队列及其相关函数已经实现，你只需要完成count函数以及主函数即可。 1 输入 第一行输入两个整数，分别代表矩阵的行和列 输入m * n的矩阵，由数字0到9组成。 输出 细胞个数。 样例输入123454 101 2 3 4 5 1 1 1 6 7 1 0 3 4 5 6 1 5 1 02 0 4 5 6 6 1 6 7 10 0 6 0 6 6 1 0 8 9 样例输出11 1没看懂题目的代码 敬请期待… [965]循环队列思路题目描述链栈实现数组模拟实现基操 传送门 描述 描述根据给定的空间构造顺序循环队列，规定队满处理方法为少用一个元素空间。例如，给定5个元素空间构造循环队列，则只能存放4个元素。试根据入队及出队操作判断队列最后的元素存放情况，并输出最后队列中的元素值，即完成给定入队及出列操作后一次性全部出队的元素值。要求采用顺序队列完成，少用一个存储空间的方法区分队列的空和满。根据给定的空间构造顺序循环队列，规定队满处理方法为少用一个元素空间。例如，给定5个元素空间构造循环队列，则只能存放4个元素。试根据入队及出队操作判断队列最后的元素存放情况，并输出最后队列中的元素值，即完成给定入队及出列操作后一次性全部出队的元素值。要求采用顺序队列完成，少用一个存储空间的方法区分队列的空和满。 输入 输入的第一行为一个自然数n，表示要求构造的顺序循环队列空间数。 第二行为操作次k，接下来k行为出队入队操作，每行各代表一次操作。入队用in表示，出队用out表示，如果是入队，则in隔一空格后为一整数，表示入队元素值。 输出 输出完成所有入队出队操作后，一次性出队元素。用一个空格隔开。可以假定队在完成所有操作后不为空。 样例输入12345678947in 1in 2in 5in 6outoutin 8 样例输出15 8 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xfffffff#define NewNode (SqQueue *)malloc (sizeof(SqQueue))typedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7;struct SqQueue&#123; int data[500]; int front,rear,MaxSize;&#125;;void Init(SqQueue *&amp;q)&#123; q=NewNode; cin&gt;&gt;q-&gt;MaxSize; q-&gt;front=q-&gt;rear=0;&#125;bool Empty(SqQueue *&amp;q)&#123; return (q-&gt;front==q-&gt;rear);&#125;bool Into(SqQueue *&amp;q,int x)&#123; if((q-&gt;rear+1)%q-&gt;MaxSize==q-&gt;front) return false; q-&gt;rear=(q-&gt;rear+1)%q-&gt;MaxSize; q-&gt;data[q-&gt;rear]=x; return true;&#125;bool deQueue(SqQueue *&amp;q,int &amp;tem)&#123; if(q-&gt;front==q-&gt;rear) return false; q-&gt;front=(q-&gt;front+1)%q-&gt;MaxSize; tem=q-&gt;data[q-&gt;front]; return true;&#125;int main()&#123; SqQueue * q; Init(q); int n,tem,x;char a[10]; cin&gt;&gt;n; Output(n); return 0;&#125; 敬请期待… [966] 打印杨辉三角形思路题目描述循环队列实现数组模拟实现每次都从队首去两个，然后把和入队，然后输出，详见代码。 传送门 描述 杨辉三角形具有如下特征：1、每行数字左右对称，由1开始逐渐变大，然后变小，回到1。2、第n行的数字个数为n个。3、第n行数字和为2^(n－1)。4、每个数字等于上一行的左右两个数字之和。可用此性质写出整个帕斯卡三角形。5、将第2n+1行第1个数，跟第2n+2行第3个数、第2n+3行第5个数……连成一线，这些数的和是第2n个斐波那契数。将第2n行第2个数，跟第2n+1行第4个数、第2n+2行第6个数……这些数之和是第2n-1个斐波那契数。6、第n行的第1个数为1，第二个数为1×(n-1)，第三个数为1×(n-1)×（n-2）/2，第四个数为1×(n-1)×（n-2）/2×（n-3）/3…依此类推。例如7阶杨辉三角形如下： 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 1 5 10 10 5 1 1 6 15 20 15 6 1 要求：利用循环队列，编程实现打印杨辉三角形。（n在0-12之间取值） 输入 输入要打印的杨辉三角形的阶n。 输出 打印出n阶杨辉三角形。 样例输入17 样例输出123456711 11 2 11 3 3 11 4 6 4 11 5 10 10 5 11 6 15 20 15 6 1 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xfffffff#define NewNode (SqQueue *)malloc (sizeof(SqQueue))typedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7;struct SqQueue&#123; int data[500]; int front,rear,MaxSize;&#125;;void Init(SqQueue *&amp;q)&#123; q=NewNode; q-&gt;front=q-&gt;rear=0; q-&gt;MaxSize=500;&#125;bool Empty(SqQueue *&amp;q)&#123; return (q-&gt;front==q-&gt;rear);&#125;int GetSum(SqQueue *&amp;q)&#123; return (q-&gt;data[q-&gt;front+1]+q-&gt;data[q-&gt;front+2]); &#125; bool Into(SqQueue *&amp;q,int x)&#123; if((q-&gt;rear+1)%q-&gt;MaxSize==q-&gt;front) return false; q-&gt;rear=(q-&gt;rear+1)%q-&gt;MaxSize; q-&gt;data[q-&gt;rear]=x; return true;&#125;bool deQueue(SqQueue *&amp;q,int &amp;tem)&#123; if(q-&gt;front==q-&gt;rear) return false; q-&gt;front=(q-&gt;front+1)%q-&gt;MaxSize; tem=q-&gt;data[q-&gt;front]; return true;&#125;int main()&#123; SqQueue * q; Init(q); int n; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) &#123; for(int j=1;j&lt;=i-2;j++) &#123; int sum=GetSum(q); if(!Into(q,sum)) break; int e; if(!deQueue(q,e)) break; &#125; if(Into(q,1)) &#123; for(int j=1;j&lt;=i;j++) cout&lt;&lt;q-&gt;data[q-&gt;front+j]&lt;&lt;" "; cout&lt;&lt;endl; &#125; &#125; return 0;&#125; 敬请期待… [971] 统计利用先序遍历创建的二叉树的深度思路题目描述二叉树实现只用一个变量实现递归查找，从一个节点开始向下最深的深度就是deep(i)=1+max(deep(左儿子),deep(右儿子))。 描述传送门 利用先序递归遍历算法创建二叉树并计算该二叉树的深度。先序递归遍历建立二叉树的方法为：按照先序递归遍历的思想将对二叉树结点的抽象访问具体化为根据接收的数据决定是否产生该结点从而实现创建该二叉树的二叉链表存储结构。约定二叉树结点数据为单个大写英文字符。当接收的数据是字符”#”时表示该结点不需要创建，否则创建该结点。最后再统计创建完成的二叉树的深度（使用二叉树的后序遍历算法）。需要注意输入数据序列中的”#”字符和非”#”字符的序列及个数关系，这会最终决定创建的二叉树的形态。 输入 输入为先序遍历二叉树结点序列。 输出 对应的二叉树的深度。 样例输入12345A##ABC####AB##C## ABCD###E#F##G## A##B## 样例输出1234513241 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define NewNode (TreeNode *) malloc (sizeof(TreeNode))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct node&#123; char data; node *Lchild,*Rchild;&#125; TreeNode;TreeNode *Built()&#123; TreeNode *T; char ch; cin&gt;&gt;ch; if(ch=='#') T=NULL; else &#123; T=NewNode; T-&gt;data=ch; T-&gt;Lchild=Built(); T-&gt;Rchild=Built(); &#125; return T;&#125;int Deep(TreeNode *&amp;Tem)&#123; if(Tem==NULL) return 0; return 1+max(Deep(Tem-&gt;Lchild),Deep(Tem-&gt;Rchild));&#125;int main()&#123; TreeNode *Root; Root=Built(); cout&lt;&lt;Deep(Root); return 0;&#125; 123456789101112131415#include&lt;bits/stdc++.h&gt;using namespace std; char x;int slove()&#123; if(scanf("%c",&amp;x)&amp;&amp;x=='#') return 0; return 1+max(slove(),slove()); &#125; int main()&#123; cout&lt;&lt;slove(); return 0;&#125; [972] 统计利用先序遍历创建的二叉树的宽度思路题目描述二叉树实现简单写法跟上题差不多 传送门 描述 利用先序递归遍历算法创建二叉树并计算该二叉树的宽度。先序递归遍历建立二叉树的方法为：按照先序递归遍历的思想将对二叉树结点的抽象访问具体化为根据接收的数据决定是否产生该结点从而实现创建该二叉树的二叉链表存储结构。约定二叉树结点数据为单个大写英文字符。当接收的数据是字符”#”时表示该结点不需要创建，否则创建该结点。最后再统计创建完成的二叉树的宽度（是指二叉树每层节点数的最大值）。需要注意输入数据序列中”#”字符和非”#”字符的序列及个数关系，这会最终决定创建的二叉树的形态。 输入 输入为接受键盘输入的由大写英文字符和”#”字符构成的一个字符串（用于创建对应的二叉树）。 输出 输出该用例对应的二叉树的宽度。 样例输入12345A##ABC####AB##C##ABCD###EF##G###A##B## 样例输出1234511231 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define NewNode (TreeNode *) malloc (sizeof(TreeNode))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; int Count[100]=&#123;0&#125;,Max=0;typedef struct node&#123; char data; node *Lchild,*Rchild;&#125; TreeNode;TreeNode *Built()&#123; TreeNode *T; char ch; cin&gt;&gt;ch; if(ch=='#') T=NULL; else &#123; T=NewNode; T-&gt;data=ch; T-&gt;Lchild=Built(); T-&gt;Rchild=Built(); &#125; return T;&#125;void Num(TreeNode *&amp;T,int i)&#123; if(T!=NULL) &#123; Count[i]++;//第i层结点数+1 Max=max(Max,Count[i]); Num(T-&gt;Lchild,i+1);//T的左孩子，层数+1 Num(T-&gt;Rchild,i+1);//T的右孩子，层数+1 &#125;&#125;int main()&#123; TreeNode *Root; Root=Built(); Num(Root,1); cout&lt;&lt;Max; return 0;&#125; 12345678910111213141516171819#include&lt;bits/stdc++.h&gt;using namespace std; char x;int Book[100]=&#123;0&#125;,Max=0;void slove(int n)&#123; if(scanf("%c",&amp;x)&amp;&amp;x=='#') return ; Book[n]++; Max=max(Book[n],Max); slove(n+1); slove(n+1); &#125; int main()&#123; slove(1); cout&lt;&lt;Max; return 0;&#125; [973] 统计利用先序遍历创建的二叉树叶结点的个数思路题目描述二叉树实现数组模拟实现这题没看懂样例，但是用[971]的代码直接过了 描述 传送门 输入 利用先序递归遍历算法创建二叉树并计算该二叉树叶结点的个数。先序递归遍历建立二叉树的方法为：按照先序递归遍历的思想将对二叉树结点的抽象访问具体化为根据接收的数据决定是否产生该结点从而实现创建该二叉树的二叉链表存储结构。约定二叉树结点数据为单个大写英文字符。当接收的数据是字符”#”时表示该结点不需要创建，否则创建该结点。最后再统计创建完成的二叉树叶结点的个数。需要注意输入数据序列中的”#”字符和非”#”字符的序列及个数关系，这会最终决定创建的二叉树的形态。 输出 接受键盘输入的由大写英文字符和”#”字符构成的一个字符串（用于创建对应的二叉树）。 样例输入1234567#A##ABC####AB##C##ABCD###EF##G###A##B###A 样例输出12345670112310 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define NewNode (TreeNode *) malloc (sizeof(TreeNode))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; int Count[100]=&#123;0&#125;,Max=0;typedef struct node&#123; char data; node *Lchild,*Rchild;&#125; TreeNode;TreeNode *Built()&#123; TreeNode *T; char ch; cin&gt;&gt;ch; if(ch=='#') T=NULL; else &#123; T=NewNode; T-&gt;data=ch; T-&gt;Lchild=Built(); T-&gt;Rchild=Built(); &#125; return T;&#125;void Num(TreeNode *&amp;T,int i)&#123; if(T!=NULL) &#123; Count[i]++;//第i层结点数+1 Max=max(Max,Count[i]); Num(T-&gt;Lchild,i+1);//T的左孩子，层数+1 Num(T-&gt;Rchild,i+1);//T的右孩子，层数+1 &#125;&#125;int main()&#123; TreeNode *Root; Root=Built(); Num(Root,1); cout&lt;&lt;Max; return 0;&#125; 敬请期待… [975] 统计利用先序遍历创建的二叉树的度为2的结点个数思路题目描述二叉树实现简单写法左右儿子都！=NULL,ans++; 传送门 描述 利用先序递归遍历算法创建二叉树并计算该二叉树度为2结点的个数。先序递归遍历建立二叉树的方法为：按照先序递归遍历的思想将对二叉树结点的抽象访问具体化为根据接收的数据决定是否产生该结点从而实现创建该二叉树的二叉链表存储结构。约定二叉树结点数据为单个大写英文字符。当接收的数据是字符”#”时表示该结点不需要创建，否则创建该结点。最后再统计创建完成的二叉树度为2的结点个数。需要注意输入数据序列中的”#”字符和非”#”字符的序列及个数关系，这会最终决定创建的二叉树的形态。 输入 接受键盘输入的由大写英文字符和”#”字符构成的一个字符串（用于创建对应的二叉树）。 输出 输出该用例对应的二叉树度为2的结点个数。 样例输入1234567#A##ABC####AB##C##ABCD###EF##G##H##A##B###A 样例输出12345670001300 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define NewNode (TreeNode *) malloc (sizeof(TreeNode))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct node&#123; char data; node *Lchild,*Rchild;&#125; TreeNode;TreeNode *Built()&#123; TreeNode *T; char ch; cin&gt;&gt;ch; if(ch=='#') T=NULL; else &#123; T=NewNode; T-&gt;data=ch; T-&gt;Lchild=Built(); T-&gt;Rchild=Built(); &#125; return T;&#125;int Count(TreeNode *&amp;Tem)&#123; if(Tem==NULL) return 0; if((Tem-&gt;Lchild==NULL)^(Tem-&gt;Rchild==NULL)) return 1+Count(Tem-&gt;Lchild)+Count(Tem-&gt;Rchild); return (Count(Tem-&gt;Lchild)+Count(Tem-&gt;Rchild)); &#125;int main()&#123; TreeNode *Root; Root=Built(); cout&lt;&lt;Count(Root); return 0;&#125; 123456789101112131415161718192021#include&lt;bits/stdc++.h&gt;using namespace std; char x;int ans=0;bool slove()&#123; if(scanf("%c",&amp;x)&amp;&amp;(x=='#'||x=='\n')) return false; int a=slove(); int b=slove(); if(a&amp;&amp;b) ans++; return true; &#125; int main()&#123; slove(); cout&lt;&lt;ans; return 0;&#125; [976] 统计利用先序遍历创建的二叉树的度为1的结点个数思路题目描述二叉树实现数组模拟实现(左儿子==NULL)^(右儿子==NULL)，ans++ 传送门 描述 利用先序递归遍历算法创建二叉树并计算该二叉树度为1结点的个数。先序递归遍历建立二叉树的方法为：按照先序递归遍历的思想将对二叉树结点的抽象访问具体化为根据接收的数据决定是否产生该结点从而实现创建该二叉树的二叉链表存储结构。约定二叉树结点数据为单个大写英文字符。当接收的数据是字符”#”时表示该结点不需要创建，否则创建该结点。最后再统计创建完成的二叉树度为1的结点个数。需要注意输入数据序列中的”#”字符和非”#”字符的序列及个数关系，这会最终决定创建的二叉树的形态。 输入 输入为接受键盘输入的由大写英文字符和”#”字符构成的一个字符串（用于创建对应的二叉树）。 输出 每个用例用一行输出该用例对应的二叉树度为1的结点个数。 样例输入1234567#A##ABC####AB##C##ABCD###EF##G###A##B###A 样例输出12345670020200 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define NewNode (TreeNode *) malloc (sizeof(TreeNode))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct node&#123; char data; node *Lchild,*Rchild;&#125; TreeNode;TreeNode *Built()&#123; TreeNode *T; char ch; cin&gt;&gt;ch; if(ch=='#') T=NULL; else &#123; T=NewNode; T-&gt;data=ch; T-&gt;Lchild=Built(); T-&gt;Rchild=Built(); &#125; return T;&#125;int Count(TreeNode *&amp;Tem)&#123; if(Tem==NULL) return 0; if((Tem-&gt;Lchild==NULL)^(Tem-&gt;Rchild==NULL)) return 1+Count(Tem-&gt;Lchild)+Count(Tem-&gt;Rchild); return (Count(Tem-&gt;Lchild)+Count(Tem-&gt;Rchild)); &#125;int main()&#123; TreeNode *Root; Root=Built(); cout&lt;&lt;Count(Root); return 0;&#125; 敬请期待… [977] 统计利用先序遍历创建的二叉树中的空链域个数思路题目描述二叉树实现数组模拟实现跟前面几道差不多 传送门 描述 利用先序递归遍历算法创建二叉树并计算该二叉树中的空链域个数。先序递归遍历建立二叉树的方法为：按照先序递归遍历的思想将对二叉树结点的抽象访问具体化为根据接收的数据决定是否产生该结点从而实现创建该二叉树的二叉链表存储结构。约定二叉树结点数据为单个大写英文字符。当接收的数据是字符”#”时表示该结点不需要创建，否则创建该结点。最后再统计创建完成的二叉树中的空链域个数。需要注意输入数据序列中的”#”字符和非”#”字符的序列及个数关系，这会最终决定创建的二叉树的形态。 输入 输入为接受键盘输入的由大写英文字符和”#”字符构成的一个字符串（用于创建对应的二叉树）。 输出 输出该用例对应的二叉树中的空链域个数。 样例输入123456A##ABC####AB##C##ABCD###EF##G###A##B###A 样例输出123456244821 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define NewNode (TreeNode *) malloc (sizeof(TreeNode))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct node&#123; char data; node *Lchild,*Rchild;&#125; TreeNode;TreeNode *Built()&#123; TreeNode *T; char ch; cin&gt;&gt;ch; if(ch=='#') T=NULL; else &#123; T=NewNode; T-&gt;data=ch; T-&gt;Lchild=Built(); T-&gt;Rchild=Built(); &#125; return T;&#125;int Count(TreeNode *&amp;Tem)&#123; if(Tem==NULL) return 1; return (Count(Tem-&gt;Lchild)+Count(Tem-&gt;Rchild)); &#125;int main()&#123; TreeNode *Root; Root=Built(); cout&lt;&lt;Count(Root); return 0;&#125; 敬请期待… [978] 输出利用先序遍历创建的二叉树的中序遍历序列思路题目描述二叉树实现数组模拟实现修改一下递归顺序。 传送门 描述 利用先序递归遍历算法创建二叉树并输出该二叉树的中序遍历序列。先序递归遍历建立二叉树的方法为：按照先序递归遍历的思想将对二叉树结点的抽象访问具体化为根据接收的数据决定是否产生该结点从而实现创建该二叉树的二叉链表存储结构。约定二叉树结点数据为单个大写英文字符。当接收的数据是字符”#”时表示该结点不需要创建，否则创建该结点。最后再输出创建完成的二叉树的中序遍历序列。需要注意输入数据序列中的”#”字符和非”#”字符的序列及个数关系，这会最终决定创建的二叉树的形态。 输入 输入为接受键盘输入的由大写英文字符和”#”字符构成的一个字符串（用于创建对应的二叉树）。 输出 对应的二叉树的中序遍历序列。 样例输入12345A##ABC####AB##C##ABCD###EF##G###A##B## 样例输出12345ACBABACDCBFEGAA 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define NewNode (TreeNode *) malloc (sizeof(TreeNode))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct node&#123; char data; node *Lchild,* Rchild;&#125; TreeNode;TreeNode *Built()&#123; TreeNode *T; char ch; cin&gt;&gt;ch; if(ch=='#') T=NULL; else &#123; T=NewNode; T-&gt;data=ch; T-&gt;Lchild=Built(); T-&gt;Rchild=Built(); &#125; return T;&#125;void Put(TreeNode *&amp;Tem)&#123; if(Tem==NULL) return; Put(Tem-&gt;Lchild); cout&lt;&lt;Tem-&gt;data; Put(Tem-&gt;Rchild); &#125; int main()&#123; TreeNode *Root; Root=Built(); Put(Root); return 0;&#125; 敬请期待… [979] 输出利用先序遍历创建的二叉树的后序遍历序列思路题目描述二叉树实现数组模拟实现修改一下递归顺序。 传送门 描述 利用先序递归遍历算法创建二叉树并输出该二叉树的后序遍历序列。先序递归遍历建立二叉树的方法为：按照先序递归遍历的思想将对二叉树结点的抽象访问具体化为根据接收的数据决定是否产生该结点从而实现创建该二叉树的二叉链表存储结构。约定二叉树结点数据为单个大写英文字符。当接收的数据是字符”#”时表示该结点不需要创建，否则创建该结点。最后再输出创建完成的二叉树的后序遍历序列。需要注意输入数据序列中的”#”字符和非”#”字符的序列及个数关系，这会最终决定创建的二叉树的形态。 输入 输入为接受键盘输入的由大写英文字符和”#”字符构成的一个字符串（用于创建对应的二叉树）。 输出 对应的二叉树的后序遍历序列。 样例输入12345A##ABC####AB##C##ABCD###EF##G###A##B## 样例输出12345ACBABCADCFGEBAA 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define NewNode (TreeNode *) malloc (sizeof(TreeNode))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct node&#123; char data; node *Lchild,*Rchild;&#125; TreeNode;TreeNode *Built()&#123; TreeNode *T; char ch; cin&gt;&gt;ch; if(ch=='#') T=NULL; else &#123; T=NewNode; T-&gt;data=ch; T-&gt;Lchild=Built(); T-&gt;Rchild=Built(); &#125; return T;&#125;void Put(TreeNode *&amp;Tem)&#123; if(Tem==NULL) return; Put(Tem-&gt;Lchild); Put(Tem-&gt;Rchild); cout&lt;&lt;Tem-&gt;data; &#125; int main()&#123; TreeNode *Root; Root=Built(); Put(Root); return 0;&#125; 敬请期待… [1027]舞伴问题思路题目描述队列实现数组模拟实现每次分别取两个队列的队首元素，然后放到队尾。 传送门 描述 假设在周末舞会上，男士们和女士们进入舞厅时，各自排成一队。跳舞开始时，依次从男队和女队的队头上各出一人配成舞伴。若两队初始人数不相同，则较长的那一队中未配对者等待下一轮舞曲。要求编写程序实现舞伴问题。 输入 输入一共5行，第一行是男生人数m；第二行依次是男生的姓名；第三行是女士的人数n；第四行依次是女士的姓名；第五行是跳舞的轮数。 输出 配对的男士和女士的姓名。 样例输入123455A B C D E3F G H2 样例输出1B G 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct qnode&#123; char data; struct qnode *next;&#125;QNode;typedef struct&#123; QNode * front; QNode * rear;&#125;Head;void Init(Head *&amp;q)&#123; q=(Head *) malloc (sizeof(Head)); q-&gt;front=q-&gt;rear=NULL;&#125;bool Empty(Head *&amp;q)&#123; return (q-&gt;rear==NULL);&#125;void In(Head *&amp;q,char &amp;x)&#123; QNode *p; p=(QNode *) malloc(sizeof(QNode)); p-&gt;data=x; p-&gt;next=NULL; if(q-&gt;rear==NULL) q-&gt;front=q-&gt;rear=p; else &#123; q-&gt;rear-&gt;next=p; q-&gt;rear=p; &#125;&#125;bool Out(Head *&amp;q,char &amp;x)&#123; QNode *T; if(q-&gt;rear==NULL) return false; t=q-&gt;front; if(q-&gt;front==q-&gt;rear) q-&gt;front=q-&gt;rear=NULL; else q-&gt;front=q-&gt;front-&gt;next; x=t-&gt;data; free(t); return true;&#125;int main()&#123; Head *q1; Head *q2; Init(q1); Init(q2); int n;char x,a,b;; cin&gt;&gt;n; while(n--) &#123; cin&gt;&gt;x; In(q1,x); &#125; cin&gt;&gt;n; while(n--) &#123; cin&gt;&gt;x; In(q2,x); &#125; cin&gt;&gt;n; while(n--) &#123; Out(q1,a); Out(q2,b); In(q1,a); In(q2,b); &#125; cout&lt;&lt;a&lt;&lt;" "&lt;&lt;b; return 0;&#125; 敬请期待… [1028]特定字符序列的判断思路题目描述链栈实现数组模拟实现去掉’@’就和括号匹配问题一样了。 传送门 描述 编写一程序，识别依次读入的一个以“#”为结束符的字符序列是否为形如“序列1@序列2”模式的字符序列。期中序列1和序列2中都不含字符“@”，且序列2是序列1的逆序列。例如“a+b@b+a”是满足条件的序列字符，而“1+3@3-1”则不是。 输入 一个以“#”结束的字符序列。 输出 是满足条件的字符序列输出“yes!”；否则输出“no!”。 样例输入1a+b@b+a# 样例输出1yes! 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct linknode&#123; char data; linknode *next; &#125; LinkStNode; void Init(LinkStNode *&amp;Top)&#123; Top=(LinkStNode *) malloc (sizeof(LinkStNode)); Top-&gt;next=NULL;&#125;void Push(LinkStNode *&amp;Top,char x) //入栈&#123; LinkStNode *tem; tem=(LinkStNode *) malloc (sizeof(LinkStNode)); tem-&gt;data=x; tem-&gt;next=Top-&gt;next; Top-&gt;next=tem; &#125; void Pop(LinkStNode *&amp;Top) &#123; LinkStNode *tem; tem=Top-&gt;next; Top-&gt;next=Top-&gt;next-&gt;next; free(tem);&#125;bool Empty(LinkStNode *&amp;Top)&#123; return (Top-&gt;next==NULL);&#125;char GetTop(LinkStNode *&amp;Top)&#123; if(Top-&gt;next!=NULL) return Top-&gt;next-&gt;data; return '0';&#125;int main()&#123; LinkStNode *Top; Init(Top); char x; while(scanf("%c",&amp;x)&amp;&amp;x!='\n') &#123; if(GetTop(Top)=='['&amp;&amp;x==']'||GetTop(Top)=='('&amp;&amp;x==')'||GetTop(Top)=='&#123;'&amp;&amp;x=='&#125;') Pop(Top); else Push(Top,x); &#125; Empty(Top) ? cout&lt;&lt;"YES":cout&lt;&lt;"NO"; return 0;&#125; 敬请期待… [1035] 定位顺序表中的最大和最小值思路题目描述顺序表实现数组模拟实现… 传送门 描述 建立长度为n的顺序表，在表中找出最大值和最小值元素所在的位置。 输入 第一行为顺序表的长度n；第二行为顺序表中的数据元素； 输出 第一行为最大值的位置；第二行为最小值的位置。 样例输入1271 2 3 4 5 6 7 样例输出12Lmax=6Lmin=0 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct &#123; int data[100]; int len;&#125; SqList;void Create (SqList *&amp;L)&#123; int n; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) cin&gt;&gt;L-&gt;data[i]; L-&gt;len=n;&#125;void Find(SqList *&amp;L,int &amp;Min,int &amp;Max)&#123; for(int i=0;i&lt;L-&gt;len;i++) &#123; if(L-&gt;data[Min]&gt;L-&gt;data[i]) Min=i; if(L-&gt;data[Max]&lt;L-&gt;data[i]) Max=i; &#125;&#125;int main()&#123; SqList *La; int Min,Max; La=(SqList *) malloc(sizeof(SqList)); Create(La); Find(La,Min,Max); cout&lt;&lt;"Lmax="&lt;&lt;Max&lt;&lt;"\r\n"; cout&lt;&lt;"Lmin="&lt;&lt;Min; return 0;&#125; 敬请期待… [1036] 寻找整数序列的主元素思路题目描述顺序表实现数组模拟实现算法的策略是从前向后扫描数组元素，标记出一个可能成为主元素的元素Num。 然后重新计数， 确认 Num 是否是主元素。算法可分为以下两步： 选取候选的主元素：依次扫描所给数组中的每个整数，将第一个遇到的整数 Num 保存到 c 中，记录 Num 的出现次数为 1；若遇到的下一个整数仍等于 Num，则计数加 1，否则计数减 1； 当计数减到 0 时，将遇到的下一个整数保存到 c 中，计数重新记为 1，开始新一轮计数，即从当前位置开始重复上述过程，直到扫描完全部数组元素。 判断 c 中元素是否是真正的主元素：再次扫描该数组，统计 c 中元素出现的次数，若大于 n/2，则为主元素；否则，序列中不存在主元素。 传送门 描述 已知一个整数序列$A=（a_0，a_1，…a_n）$，如果其中有一个元素的出现次数超过n/2，就称该元素为A的主元素，否则就称整数序列没有主元素。例如A=（0，5，5，3，5，7，5，5），则5为主元素。A=（0，5，5，3，5，1，5，7），则A中没有主元素。要求编写程序实现寻找给定整数序列的主元素，如果找到，则输出主元素。如果没有找到，则输出-1。 输入 第一行为整数序列的个数n第二行为一个整数序列。 输出 如果找到主元素，输出主元素的值，否则输出-1。 样例输入1280 5 5 3 5 7 5 5 样例输出15 把数组模拟的改成顺序表就行了。 1234567891011121314151617181920212223242526272829303132333435363738394041#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; int a[200];int main()&#123; int n,ans,Count=0; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) &#123; cin&gt;&gt;a[i]; if(!Count) &#123; ans=a[i]; Count++; &#125; else if(a[i]==ans) Count++; else Count--; &#125; Count=0; for(int i=0;i&lt;n;i++) if(a[i]==ans) Count++; Count&gt;n/2 ? cout&lt;&lt;ans:cout&lt;&lt;-1; return 0;&#125; [1037]集合的并运算的实现思路题目描述顺序表实现数组模拟实现遍历大法好 传送门 描述 假设有两个集合 A 和 B 分别用两个线性表 LA 和 LB 表示，即线性表中的数据元素即为集合中的成员。编程实现集合A和集合B的并运算。 输入 第一行为集合A的数据元素个数n 第二行输入n个集合A的数据元素 第三行为集合B的数据元素的个数； 第四行输入m个集合B的数据元素。 输出 第一行为A和B的并集. 样例输入123480 5 6 3 8 7 9 1071 3 4 7 8 9 5 样例输出10 5 6 3 8 7 9 10 1 4 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct &#123; int date[100]; int len;&#125; SqList;void Create (SqList *&amp;L)&#123; int n; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) cin&gt;&gt;L-&gt;date[i]; L-&gt;len=n;&#125;void Merge(SqList *&amp;La,SqList *&amp;Lb)&#123; for(int i=0;i&lt;Lb-&gt;len;i++) &#123; int j=0; for(;j&lt;La-&gt;len;j++) if(La-&gt;date[j]==Lb-&gt;date[i]) break; if(j==La-&gt;len) &#123; La-&gt;date[j]=Lb-&gt;date[i]; La-&gt;len++; &#125; &#125;&#125;void Put(SqList *&amp;La)&#123; for(int i=0;i&lt;La-&gt;len;i++) cout&lt;&lt;La-&gt;date[i]&lt;&lt;" "; &#125;int main()&#123; SqList *La,*Lb; La=(SqList *) malloc(sizeof(SqList)); Lb=(SqList *) malloc(sizeof(SqList)); Create(La); Create(Lb); Merge(La,Lb); Put(La); return 0;&#125; 敬请期待… [1038]顺序表中重复数据的删除思路题目描述顺序表实现数组模拟实现遍历，找到就删。注意不要每一次都从头找。 传送门 描述 将存储在顺序表中的长度为n的线性表中指定的数据全部删除。 输入 第一行为顺序表的长度n； 第二行为顺序表中的数据元素； 第三行为指定要删除的元素值。 输出 如果表不空，输出删除指定值后的线性表；如果删除后表空，则输出-1。 样例输入123811 22 33 44 44 55 44 6644 样例输出111 22 33 55 66 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct &#123; int date[100]; int len;&#125; SqList;void Create (SqList *&amp;L)&#123; int n; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) cin&gt;&gt;L-&gt;date[i]; L-&gt;len=n;&#125;void Put(SqList *&amp;La)&#123; for(int i=0;i&lt;La-&gt;len;i++) cout&lt;&lt;La-&gt;date[i]&lt;&lt;" "; &#125;bool Find(SqList *&amp;L,int x,int &amp;li)&#123; for(int i=li;i&lt;L-&gt;len;i++) if(L-&gt;date[i]==x) &#123; li=i; return true; &#125; return false;&#125;void Delete(SqList *&amp;L,int x)&#123; for(int i=x;i&lt;L-&gt;len;i++) L-&gt;date[i]=L-&gt;date[i+1]; L-&gt;len--;&#125;int main()&#123; SqList *La; La=(SqList *) malloc(sizeof(SqList)); Create(La); int x,li=0; cin&gt;&gt;x; while(Find(La,x,li)) &#123; Delete(La,li); &#125; if(La-&gt;len==0) cout&lt;&lt;-1; else Put(La); return 0;&#125; 敬请期待… [1039] 单链表中信息的分类思路题目描述顺序表实现数组模拟实现… 传送门 描述 已知L为设有头结点的单链表中第一个结点的指针，每个结点数据域存放一个字符，该字符可能是英文字母字符或数字字符或其他字符。编写程序构造三个以带头结点的单循环链表表示的线性表，使每个表中只含同一类字符，最后输出链表中的信息。 输入 链表中的数据元素 输出 第一行为数字链表中的信息； 第二行为英文字母字符链表中的信息； 第三行为其它字符链表中的信息。 样例输入1abc123@$12 样例输出12312312abc@$ 是我菜了，没看懂要求，所以直接用数组做的。 1234567891011121314151617181920212223242526272829303132333435#include&lt;stdio.h&gt;#include&lt;string.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;#include&lt;algorithm&gt;#include&lt;iostream&gt;#include&lt;stack&gt;#include&lt;map&gt;using namespace std;int main()&#123; char str[1005]; cin &gt;&gt; str; int k, l, m; k = l = m = 0; char str1[500], str2[500], str3[500]; for (int i = 0; i &lt; strlen(str); i++) &#123; if (str[i] &gt;= '0'&amp;&amp;str[i] &lt;= '9') &#123; str1[k++] = str[i]; &#125; else if ((str[i] &gt;= 'a'&amp;&amp;str[i] &lt;= 'z')|| ( str[i] &gt;= 'A'&amp;&amp;str[i]&lt;='Z') ) &#123; str2[l++] = str[i]; &#125; else &#123; str3[m++] = str[i]; &#125; &#125; str1[k] = str2[l] = str3[m] = '\0'; cout &lt;&lt; str1 &lt;&lt; endl &lt;&lt; str2 &lt;&lt; endl &lt;&lt; str3 &lt;&lt; endl; return 0;&#125; [1040] 一元多项式加法运算的实现思路题目描述链表实现数组模拟实现插入排序测试数据没有答案为0的情况，我就没考虑这种情况。 传送门 描述 编程实现一元多项式的加法运算。（要求用链表实现） 输入 第一个一元多项式A； 第二个一元多项式B。 以（0，0）作为输入结束。 输出 多项式A和多项式B的和。 样例输入125,3 7,8 9,15 0,02,0 6,3 -7,8 0,0 样例输出12x^0+11x^3+9x^15 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct node &#123; int xishu; int cifang; node *next;&#125; LinkNode;void Init(LinkNode *&amp;Head)&#123; Head=(LinkNode *)malloc(sizeof(LinkNode)); Head-&gt;next=NULL;&#125;void Create (LinkNode *&amp;Head)&#123; LinkNode *p1,*p2; p1=Head; int c,x; while(scanf("%d,%d",&amp;c,&amp;x)&amp;&amp;(c||x)) &#123; p1=Head; while(p1-&gt;next!=NULL&amp;&amp;p1-&gt;next-&gt;cifang&lt;x) p1=p1-&gt;next; if(p1-&gt;next==NULL||p1-&gt;next-&gt;cifang&gt;x) &#123; p2=(LinkNode *)malloc(sizeof(LinkNode)); p2-&gt;cifang=x; p2-&gt;xishu=c; p2-&gt;next=p1-&gt;next; p1-&gt;next=p2; &#125; else p1-&gt;next-&gt;xishu+=c; &#125;&#125;void Put(LinkNode *Head)&#123; LinkNode *p1=Head-&gt;next; while(p1!=NULL) &#123; if(p1-&gt;xishu==0) &#123; p1=p1-&gt;next; continue; &#125; if(p1!=Head-&gt;next) cout&lt;&lt;"+"; cout&lt;&lt;p1-&gt;xishu&lt;&lt;"x^"&lt;&lt;p1-&gt;cifang; p1=p1-&gt;next; &#125;&#125;int main()&#123; LinkNode *Head; Init(Head); Create(Head); Create(Head); Put(Head); return 0;&#125; 敬请期待… [1042] 中缀表达式转换为后缀表达式思路题目描述链栈实现数组模拟实现读入不是’+’,’-‘,’*’,’-‘，就入栈再出栈，否则入栈，当遇到’)’时，将栈里从栈顶到’(‘的元素全部出栈，最后全部出栈，所得到的出栈顺序就是后缀表达式。 传送门 描述 中缀表达式是一个通用的算术或逻辑公式表示方法，操作符是以中缀形式处于操作数的中间（例：3 + 4），中缀表达式是人们常用的算术表示方法。后缀表达式不包含括号，运算符放在两个运算对象的后面，所有的计算按运算符出现的顺序，严格从左向右进行（不再考虑运算符的优先规则，如：(2 + 1) 3 ， 即2 1 + 3 。利用栈结构，将中缀表达式转换为后缀表达式。(测试数据元素为单个字符) 输入 中缀表达式 输出 后缀表达式 样例输入1A+(B-C/D)*E 样例输出1ABCD/-E*+ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct linknode&#123; char data; linknode *next; &#125; LinkStNode; void Init(LinkStNode *&amp;Top)&#123; Top=(LinkStNode *) malloc (sizeof(LinkStNode)); Top-&gt;next=NULL;&#125;void Push(LinkStNode *&amp;Top,int x) //入栈&#123; LinkStNode *tem; tem=(LinkStNode *) malloc (sizeof(LinkStNode)); tem-&gt;data=x; tem-&gt;next=Top-&gt;next; Top-&gt;next=tem; &#125; bool Empty(LinkStNode *&amp;Top)&#123; return (Top-&gt;next==NULL);&#125;bool Pop(LinkStNode *&amp;Top,char &amp;x) &#123; if(Empty(Top)) return false; LinkStNode *tem; tem=Top-&gt;next; x=tem-&gt;data; Top-&gt;next=Top-&gt;next-&gt;next; free(tem); return true;&#125;int GetTop(LinkStNode *&amp;Top)&#123; if(Top-&gt;next!=NULL) return Top-&gt;next-&gt;data; return 0;&#125;int main()&#123; LinkStNode *Top; Init(Top); char x,tem; while(scanf("%c",&amp;x)&amp;&amp;x!='\n') &#123; if(x=='+'||x=='-'||x=='*'||x=='/'||x=='(') Push(Top,x); else if(x==')') while(Pop(Top,tem)&amp;&amp;tem!='(') cout&lt;&lt;tem; else &#123; Push(Top,x); Pop(Top,tem); cout&lt;&lt;tem; &#125; &#125; while(Pop(Top,tem)) cout&lt;&lt;tem; return 0;&#125; 敬请期待… [1043] 利用栈完成后缀表达式的计算思路题目描述链栈实现数组模拟实现是数字就入栈，否则弹出栈顶两个进行运算，再将运算结果压入栈。 传送门 描述 后缀表达式不包含括号，运算符放在两个运算对象的后面，所有的计算按运算符出现的顺序，严格从左向右进行（不再考虑运算符的优先规则，如：(2 + 1) * 3 ， 即2 1 + 3 *。利用栈结构，将后缀表达式的结果计算出来。 输入 后缀表达式。以#号作为表达式结束标志。为了简单，处理的数据为0-9的整数。 输出 计算结果。 样例输入13 6 6 2 / - 3 * +# 样例输出112 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct linknode&#123; int data; linknode *next; &#125; LinkStNode; void Init(LinkStNode *&amp;Top)&#123; Top=(LinkStNode *) malloc (sizeof(LinkStNode)); Top-&gt;next=NULL;&#125;void Push(LinkStNode *&amp;Top,int x) //入栈&#123; LinkStNode *tem; tem=(LinkStNode *) malloc (sizeof(LinkStNode)); tem-&gt;data=x; tem-&gt;next=Top-&gt;next; Top-&gt;next=tem; &#125; int Pop(LinkStNode *&amp;Top) &#123; int x; LinkStNode *tem; tem=Top-&gt;next; x=tem-&gt;data; Top-&gt;next=Top-&gt;next-&gt;next; free(tem); return x;&#125;bool Empty(LinkStNode *&amp;Top)&#123; return (Top-&gt;next==NULL);&#125;int GetTop(LinkStNode *&amp;Top)&#123; if(Top-&gt;next!=NULL) return Top-&gt;next-&gt;data; return 0;&#125;int main()&#123; LinkStNode *Top; Init(Top); char x,Flag=' '; while(scanf("%c",&amp;x)&amp;&amp;Flag!='#') &#123; if(x&gt;'0'&amp;&amp;x&lt;'9') Push(Top,x-'0'); else &#123; int b=Pop(Top),a=Pop(Top); switch(x) &#123; case '+' : Push(Top,a+b);break; case '-' : Push(Top,a-b);break; case '*' : Push(Top,a*b);break; case '/' : Push(Top,a/b);break; &#125; &#125; scanf("%c",&amp;Flag); &#125; cout&lt;&lt;GetTop(Top); return 0;&#125; 敬请期待… [1044] 顺序栈基本操作的实现思路题目描述链栈实现数组模拟实现…我直接写的链栈，改改就好了 传送门 描述 编程实现顺序栈的初始化、入栈、出栈、取栈顶元素和计算栈中元素个数等基本操作。 输入 第一行为入栈元素的个数； 第二行依次为入栈的元素； 出栈操作的次数n. 输出 输出n次出栈后的栈顶元素值。如果是空栈，输出-1. 样例输入12341 2 3 42 样例输出12 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xfffffff#define MaxSize 200typedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct &#123; int data[MaxSize]; int Top; &#125; SqStack; void Init(SqStack *&amp;S)&#123; S=(SqStack *) malloc (sizeof(SqStack)); S-&gt;Top=-1;&#125;bool Push(SqStack *&amp;S,int x) //入栈&#123; if(S-&gt;Top==MaxSize-1) return false; S-&gt;Top++; S-&gt;data[S-&gt;Top]=x; return true; &#125; bool Empty(SqStack *&amp;S)&#123; return (S-&gt;Top==-1);&#125;bool Pop(SqStack *&amp;S,int &amp;x) &#123; if(S-&gt;Top==-1) return false; x=S-&gt;data[S-&gt;Top]; S-&gt;Top--; return true;&#125;bool GetTop(SqStack *&amp;S,int &amp;x)&#123; if(S-&gt;Top==-1) return false; x=S-&gt;data[S-&gt;Top]; return true;&#125;int main()&#123; SqStack *S; Init(S); int tem,n; cin&gt;&gt;n; while(n--) &#123; cin&gt;&gt;tem; Push(S,tem); &#125; cin&gt;&gt;n; while(n--) Pop(S,tem); if(Empty(S)) cout&lt;&lt;-1; else &#123; GetTop(S,tem); cout&lt;&lt;tem; &#125; return 0;&#125; 敬请期待… [1045] 集合的交运算的实现思路题目描述顺序表实现数组模拟实现… 传送门 描述 假设有两个集合 A 和 B 分别用两个线性表 LA 和 LB 表示，即线性表中的数据元素即为集合中的成员。编程实现集合A和集合B的交运算。 输入 第一行为集合A的数据元素个数n;第二行输入n个集合A的数据元素 ;第三行为集合B的数据元素的个数；第四行输入m个集合B的数据元素 输出 A和B的交集 样例输入123480 5 6 3 8 7 9 1071 3 4 7 8 9 5 样例输出15 3 8 7 9 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct &#123; int date[100]; int len;&#125; SqList;void Create (SqList *&amp;L)&#123; int n; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) cin&gt;&gt;L-&gt;date[i]; L-&gt;len=n;&#125;void Merge(SqList *&amp;La,SqList *&amp;Lb)&#123; for(int i=0;i&lt;La-&gt;len;i++) &#123; int j=0; for(;j&lt;Lb-&gt;len;j++) if(La-&gt;date[i]==Lb-&gt;date[j]) &#123; cout&lt;&lt;La-&gt;date[i]&lt;&lt;" "; break; &#125; &#125;&#125;int main()&#123; SqList *La,*Lb; La=(SqList *) malloc(sizeof(SqList)); Lb=(SqList *) malloc(sizeof(SqList)); Create(La); Create(Lb); Merge(La,Lb); return 0;&#125; 敬请期待… [1046] 链栈基本操作的实现思路题目描述链栈实现数组模拟实现… 传送门 描述 编程实现链栈的初始化、入栈、出栈和计算栈中元素个数等基本操作。（测试数据为整数。） 输入 第一行为入栈元素的个数;第二行为入栈元素；出栈操作的次数n. 输出 n次出栈后的栈顶元素。如果是空栈，输出-1. 样例输入12341 2 3 42 样例输出12 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct linknode&#123; int data; linknode *next; &#125; LinkStNode; void Init(LinkStNode *&amp;Top)&#123; Top=(LinkStNode *) malloc (sizeof(LinkStNode)); Top-&gt;next=NULL;&#125;void Push(LinkStNode *&amp;Top,int x) //入栈&#123; LinkStNode *tem; tem=(LinkStNode *) malloc (sizeof(LinkStNode)); tem-&gt;data=x; tem-&gt;next=Top-&gt;next; Top-&gt;next=tem; &#125; bool Empty(LinkStNode *&amp;Top)&#123; return (Top-&gt;next==NULL);&#125; int Pop(LinkStNode *&amp;Top) &#123; if(Empty(Top)) return 0; int x; LinkStNode *tem; tem=Top-&gt;next; x=tem-&gt;data; Top-&gt;next=Top-&gt;next-&gt;next; free(tem); return x;&#125;int GetTop(LinkStNode *&amp;Top)&#123; if(Top-&gt;next!=NULL) return Top-&gt;next-&gt;data; return 0;&#125;int main()&#123; LinkStNode *Top; Init(Top); int n,x; cin&gt;&gt;n; while(n--) &#123; cin&gt;&gt;x; Push(Top,x); &#125; cin&gt;&gt;n; while(n--) &#123; Pop(Top); &#125; Empty(Top)? cout&lt;&lt;-1: cout&lt;&lt;GetTop(Top); return 0;&#125; 敬请期待… [1101] 顺序表中数据的循环移动思路题目描述顺序表实现数组模拟实现Lb-&gt;date[i]=La-&gt;date[(i+k)%La-&gt;len]; 传送门 描述 设有长度为n（n&gt;1）的顺序表R，将R中保存的序列循环左移P（0 &lt; P &lt; n）个位置，即将R中的数据由（x0,x1,…,xn-1）变换为(xp,xp+1,…,xn-1,x0,x1,…,xp-1)。如果p值不合法，输出“error！”。 输入 第一行为数据元素个数n；第二行为n个整数；第三行为要左移的位数p 输出 移动后的序列。 样例输入123101 2 3 4 5 6 7 8 9 105 样例输出16 7 8 9 10 1 2 3 4 5 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct &#123; int date[100]; int len;&#125; SqList;void Create (SqList *&amp;L)&#123; int n; cin&gt;&gt;n; L=(SqList *) malloc(sizeof(SqList)); for(int i=0;i&lt;n;i++) cin&gt;&gt;L-&gt;date[i]; L-&gt;len=n;&#125;void Put(SqList *&amp;La)&#123; for(int i=0;i&lt;La-&gt;len;i++) cout&lt;&lt;La-&gt;date[i]&lt;&lt;" "; &#125;void Move(SqList *&amp;La,SqList *&amp;Lb,int k)&#123; for(int i=0;i&lt;La-&gt;len;i++) Lb-&gt;date[i]=La-&gt;date[(i+k)%La-&gt;len]; Lb-&gt;len=La-&gt;len;&#125;int main()&#123; int k; SqList *La; SqList *Lb=(SqList *) malloc(sizeof(SqList)); Create(La); cin&gt;&gt;k; if(k&lt;=0||k&gt;=La-&gt;len) cout&lt;&lt;"error!"; else &#123; Move(La,Lb,k); Put(Lb); &#125; return 0;&#125; 敬请期待… [1102] 顺序表上数据的划分问题的实现思路题目描述顺序表实现数组模拟实现这道题要正着找大的，逆着找小的。 传送门 描述 建立一个顺序表L，然后以第一个为分界，将所有小于等于它的元素移到该元素的前面，将所有大于它的元素移到该元素的后面。 输入 顺序表长度n；顺序表中的数据元素。 输出 移动后的数据元素。 样例输入121032 5 22 43 23 56 54 57 11 25 样例输出125 11 23 22 5 32 43 56 54 57 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct &#123; int date[100]; int len;&#125; SqList;void Create (SqList *&amp;L)&#123; int n; cin&gt;&gt;n; L=(SqList *) malloc(sizeof(SqList)); for(int i=0;i&lt;n;i++) cin&gt;&gt;L-&gt;date[i]; L-&gt;len=n;&#125;void Put(SqList *&amp;La)&#123; for(int i=0;i&lt;La-&gt;len;i++) cout&lt;&lt;La-&gt;date[i]&lt;&lt;" "; &#125;void Move(SqList *&amp;La,SqList *&amp;Lb)&#123; int tem=La-&gt;date[0]; Lb-&gt;len=0; for(int i=La-&gt;len-1;i&gt;=0;i--) if(La-&gt;date[i]&lt;tem) &#123; Lb-&gt;date[Lb-&gt;len]=La-&gt;date[i]; Lb-&gt;len++; &#125; Lb-&gt;date[Lb-&gt;len]=tem; Lb-&gt;len++; for(int i=0;i&lt;La-&gt;len;i++) if(La-&gt;date[i]&gt;tem) &#123; Lb-&gt;date[Lb-&gt;len]=La-&gt;date[i]; Lb-&gt;len++; &#125;&#125;int main()&#123; int k; SqList *La; SqList *Lb=(SqList *) malloc(sizeof(SqList)); Create(La); Move(La,Lb); Put(Lb); return 0;&#125; 敬请期待… [1103] 删除顺序表中指定区间的数据思路题目描述线性表实现数组模拟实现… 传送门 描述 建立顺序表L，将指定区间的数据从顺序表中删除。假设指定区间是合法数据，无序做合法性判断。测试数据为整型。 输入 第一行是表长n；第二行是表中数据元素。 输出 删除以后的顺序表中的数据元素。 样例输入1231022 32 11 23 43 59 17 65 45 5710 20 样例输出122 32 23 43 59 65 45 57 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7; typedef struct &#123; int date[100]; int len;&#125; SqList;void Create (SqList *&amp;L)&#123; int n; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) cin&gt;&gt;L-&gt;date[i]; L-&gt;len=n;&#125;void Put(SqList *&amp;La)&#123; for(int i=0;i&lt;La-&gt;len;i++) cout&lt;&lt;La-&gt;date[i]&lt;&lt;" "; &#125;bool Find(SqList *&amp;L,int l,int r,int &amp;li)&#123; for(int i=0;i&lt;L-&gt;len;i++) if(L-&gt;date[i]&gt;=l&amp;&amp;L-&gt;date[i]&lt;=r) &#123; li=i; return true; &#125; return false;&#125;void Delete(SqList *&amp;L,int x)&#123; for(int i=x;i&lt;L-&gt;len;i++) L-&gt;date[i]=L-&gt;date[i+1]; L-&gt;len--;&#125;int main()&#123; SqList *La; La=(SqList *) malloc(sizeof(SqList)); Create(La); int l,r,li; cin&gt;&gt;l&gt;&gt;r; while(Find(La,l,r,li)) &#123; Delete(La,li); &#125; if(La-&gt;len==0) cout&lt;&lt;-1; else Put(La); return 0;&#125; 敬请期待…]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[尔尔序的神奇计数问题(set容器)]]></title>
    <url>%2F%E5%B0%94%E5%B0%94%E5%BA%8F%E7%9A%84%E7%A5%9E%E5%A5%87%E8%AE%A1%E6%95%B0%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[描述传送门：swustoj-2612 &emsp; 现在有4个集合，分别为$A,B,C,D$，且每一个集合的大小都是n。尔尔序想求解一个问题，现在他把$A,B,C$的交集的大小、$A,B,D$的交集的大小，$A,C,D$的交集的大小，$B,C,D$的交集的大小之和记为$X$，同时把$A,B$的交集的大小、$A,C$的交集的大小、$A,D$的交集的大小、$B,C$的交集的大小、$B,D$的交集的大小之和记为Y，求解$|X−Y|$的值。 Input 第一行输入一个整数$n(1\leq n \leq5 \times 10^4)$代表这4个集合的大小。第二行输入$n$整数$A_i\ (1\leq A_i \leq10^{18})$，代表集合$A$中的数。第三行输入$n$整数$B_i\ (1\leq B_i \leq10^{18})$，代表集合$B$中的数。第四行输入$n$整数$C_i\ (1\leq C_i \leq10^{18})$，代表集合$C$中的数。第五行输入$n$整数$D_i\ (1\leq D_i \leq10^{18})$，代表集合$D$中的数。 保证在同一集合内没有重复的数。 Output 输出$|X−Y|$的值。 Examples intput 1234567891041 2 3 42 3 4 53 4 5 77 6 3 141 2 3 41 2 3 41 2 3 53 4 5 6 output 1267 思路 其实就是set的直接应用，求：|A∩B∩C+A∩B∩D+A∩C∩D+B∩C∩D-A∩B-A∩D-B∩C-B∩D| 也可以用容次原理转换成A∪B∪C∪D-(A+B+C+D)+A∩B∩C∩D+C∩D但是莫名其妙要比直接的慢就没用这个 x在set1中存在就是set1.find(x)!=set1.end(); 然后暴力出奇迹即可，具体看代码。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include&lt;bits/stdc++.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll;const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7;set &lt;ll&gt; set1,set2,set3,set4;ll a[50005],b[50005],c[50005],d[50005],ans=0;int main()&#123; int n,x; while(cin&gt;&gt;n) &#123; ans=0; set1.clear(); //清空set set2.clear(); set3.clear(); set4.clear(); for(int i=0; i&lt;n; i++) &#123; scanf("%lld",&amp;a[i]); set1.insert(a[i]); &#125; for(int i=0; i&lt;n; i++) &#123; scanf("%lld",&amp;b[i]); set2.insert(b[i]); &#125; for(int i=0; i&lt;n; i++) &#123; scanf("%lld",&amp;c[i]); set3.insert(c[i]); &#125; for(int i=0; i&lt;n; i++) &#123; scanf("%lld",&amp;d[i]); set4.insert(d[i]); if(set2.find(d[i])!=set2.end()&amp;&amp;set3.find(d[i])!=set3.end()) ans++; if(set1.find(d[i])!=set1.end()&amp;&amp;set3.find(d[i])!=set3.end()) ans++; if(set1.find(d[i])!=set1.end()&amp;&amp;set2.find(d[i])!=set2.end()) ans++; if(set1.find(d[i])!=set1.end()) ans--; if(set2.find(d[i])!=set2.end()) ans--; &#125; for(int i=0; i&lt;n; i++) &#123; if(set1.find(c[i])!=set1.end()&amp;&amp;set2.find(c[i])!=set2.end()) ans++; if(set1.find(b[i])!=set1.end()) ans--; if(set1.find(c[i])!=set1.end()) ans--; if(set2.find(c[i])!=set2.end()) ans--; &#125; cout&lt;&lt;abs(ans)&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>STL</tag>
        <tag>set容器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[邂逅明下(巴什博弈变形)]]></title>
    <url>%2F%E9%82%82%E9%80%85%E6%98%8E%E4%B8%8B%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-2897 &emsp;当日遇到月，于是有了明。当我遇到了你，便成了侣。那天，日月相会，我见到了你。而且，大地失去了光辉，你我是否成侣？这注定是个凄美的故事。&emsp;小t和所有世俗的人们一样，期待那百年难遇的日食。驻足街头看天，看日月渐渐走近，小t的脖子那个酸呀（他坚持这个姿势已经有半个多小时啦）。他低下仰起的头，环顾四周。忽然发现身边竟站着位漂亮的mm。天渐渐暗下，这mm在这街头竟然如此耀眼，她是天使吗？站在小t身边的天使。 &emsp;小t对mm惊呼：“缘分呐~~”。mm却毫不含糊：“是啊，500年一遇哦！”（此后省略5000字….）&emsp;小t赶紧向mm要联系方式，可mm说：“我和你玩个游戏吧，赢了，我就把我的手机号告诉你。”小t，心想天下哪有题目能难倒我呢，便满口答应下来。mm开始说游戏规则：“我有一堆硬币，一共7枚，从这个硬币堆里取硬币，一次最少取2枚，最多4枚，如果剩下少于2枚就要一次取完。我和你轮流取，直到堆里的硬币取完，最后一次取硬币的算输。我玩过这个游戏好多次了，就让让你，让你先取吧~”&emsp;小t掐指一算，不对呀，这是不可能的任务么。小t露出得意的笑：“还是mm优先啦，呵呵~”mm霎时愣住了，想是对小t的反应出乎意料吧。&emsp;她却也不生气：“好小子，挺聪明呢，要不这样吧，你把我的邮箱给我，我给你发个文本，每行有三个数字n，p，q，表示一堆硬币一共有n枚，从这个硬币堆里取硬币，一次最少取p枚，最多q枚，如果剩下少于p枚就要一次取完。两人轮流取，直到堆里的硬币取完，最后一次取硬币的算输。对于每一行的三个数字，给出先取的人是否有必胜策略，如果有回答WIN，否则回答LOST。你把对应的答案发给我，如果你能在今天晚上8点以前发给我正确答案，或许我们明天下午可以再见。”&emsp;小t二话没说，将自己的邮箱给了mm。当他兴冲冲得赶回家，上网看邮箱，哇！mm的邮件已经到了。他发现文本长达100000行，每行的三个数字都很大，但是都是不超过65536的整数。小t看表已经下午6点了，要想手工算出所有结果，看来是不可能了。你能帮帮他，让他再见到那个mm吗？ Input 不超过100000行，每行三个正整数n，p，q。 Output 对应每行输入，按前面介绍的游戏规则，判断先取者是否有必胜策略。输出WIN或者LOST。 Examples intput 127 2 46 2 4 output 12LOSTWIN 思路 巴什博弈变形，必败态为$n\in (0,p]$。 只有当$n\%(p+q)$在$(0,p]$的时候，设先手取$x$，后手每次都取$(p+q-x)$，才能保证最后剩给先手的在$(0,p]$。 代码1234567891011121314151617181920212223242526272829//#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll;const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7;int main()&#123; ios::sync_with_stdio(false); int n,a,b; while(cin&gt;&gt;n&gt;&gt;a&gt;&gt;b) &#123; int tem=n%(a+b); if(tem&amp;&amp;tem&lt;=a) cout&lt;&lt;"LOST"&lt;&lt;endl; else cout&lt;&lt;"WIN"&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>博弈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[One Person Game(拓展欧几里德算法)]]></title>
    <url>%2FOne-Person-Game%2F</url>
    <content type="text"><![CDATA[描述传送门：zoj-3593 &emsp;There is an interesting and simple one person game. Suppose there is a number axis under your feet. You are at point $A$ at first and your aim is point $B$. There are 6 kinds of operations you can perform in one step. That is to go left or right by $a,b$ and $c$, here $c$ always equals to $a+b$. You must arrive B as soon as possible. Please calculate the minimum number of steps. Input There are multiple test cases. The first line of input is an integer $T(0 &lt; T ≤ 1000) $indicates the number of test cases. Then T test cases follow. Each test case is represented by a line containing four integers 4 integers$ A, B, a\ $and $b$, separated by spaces. ($-2^{31} ≤ A, B &lt; 2^{31}, 0 &lt; a, b &lt; 2^{31}$) Output &emsp;For each test case, output the minimum number of steps. If it’s impossible to reach point B, output “-1” instead. Examples intput 12320 1 1 20 1 2 4 output 121-1 思路 一开始以为是道bfs，敲到一半看到数据范围就发现天真了。 题目其实就是求$|C_1a+C_2b+C_3c+C_4(-a)+C_5(-b)+C_6(-c)|=|A-B|$，化简之后就变成了$|C_1a+C_2b|=|A-B|$，还是不满足拓展欧几里德的形式。要变形一下就变成了\frac{C_1\cdot gcd(a,b)}{|A-B|}\cdot a+\frac{C_2\cdot gcd(a,b)}{|A-B|}\cdot b=gcd(a,b) 我们还知道拓展欧几里德的通解是$ x=x_0+(b/gcd)\cdot t$，$y=y_0-(a/gcd)\cdot t$，($y_0$和$x_0$为一组特解)。这时候我们带出$C_1,C_2$，画出$C_1,C_2$关于$t$的两条直线，显然当$x,y$异号的时候，$ans=|x+y|$，当$x,y$同号的时候，$ans=max(|a|,|y|)$,结合图像，显然交点为最优解。但交点对应的$t$不一定是整数点，所以我们在对$t$取整后还要比较$t$取$t+1$时的情况。 拓展欧几里德详见：数论笔记本 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffffff //MAX取足够大typedef unsigned long long LL;typedef long long ll;ll x,y;ll exgcd(int a,int b) //拓展欧几里得&#123; if(b==0) &#123; x=1; y=0; return a; &#125; int ans=exgcd(b,a%b); int t=x; x=y; y=t-a/b*y; return ans;&#125;int main()&#123; ll A,B,a,b,n,ans1,L,ans2; cin&gt;&gt;n; while(n--) &#123; ans1=MAX; //注意MAX要取足够大，要取超过 int的最大值（因为这个wa了无数发） cin&gt;&gt;A&gt;&gt;B&gt;&gt;a&gt;&gt;b; L=abs(A-B); ll gcd=exgcd(a,b); if(x&gt;y) //为下面x,y的表达式做的处理 &#123; swap(x, y); swap(a, b); &#125; x=x*L/gcd; y=y*L/gcd; ll t=(y-x)*gcd/(a+b); //t等于交点 a/=gcd; b/=gcd; for(ll i=t; i&lt;=t+1; i++) //在t和t+1中找最优解 &#123; if((x+b*i)*(y-a*i)&gt;0) ans2=max(x+b*i,y-a*i); else ans2=abs(x+b*i)+abs(y-a*i); ans1=min(ans1,ans2); &#125; if(L%gcd) //无解 cout&lt;&lt;-1&lt;&lt;endl; else cout&lt;&lt;ans1&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>拓欧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博弈笔记本]]></title>
    <url>%2F%E5%8D%9A%E5%BC%88%E7%AC%94%E8%AE%B0%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[博弈好难啊啊啊啊啊啊… 斐波那契博弈描述 1个有n个石子的石堆,两人轮流取.先取者第1次可以取任意多个，但不能全部取完.以后每次取的石子数不能超过上次取子数的2倍，先取完者胜。 结论 如果n是一个斐波那契数，则后手赢，否则先手赢。 证明 首先我们要明确：取石子的时候一定不会取超过剩下的石子的一半，否则下一个人就直接能取完。 当n是一个斐波那契数时，后手赢。(数学归纳法，为方便表示，用$f(x)$来表示第$x$个斐波那契数) 当$n=2$时,显然后手赢，成立。 当$n=3$时,显然后手赢，成立。 假设：n是斐波那契数且$n&lt;=f(k)$时,后手赢。 当$n=f(k+1)$时，将$n$拆成$n=f(k-1)+f(k)$，先手先在$f(k-1)$中拿，且拿不完（拿完后手下次直接就拿完了），由假设可知，后手能拿到$f(k-1)$堆中的最后一个石子。&emsp;这里稍微分析一下：后手在$f(k-1)$中能拿到的最多的石子是当且仅当先手先拿$\frac {f(k-1)}3$时，后手拿$\frac{2f(k-1)}3$，易证$\frac{2f(k-1)}3&lt;\frac{f(k)}2$。此时先手再在$f(k)$堆中拿，且不能一次拿完，就转化成了假设的情况，所以后手赢。 假设正确。 当n不是一个斐波那契数时，先手赢。要借助齐肯多夫定理来证明。 将$n$分解成最大的不连续斐波那契数之和，即$n=f(a_m)+f(a_{m-1})+…+f(a_2)+f(a_1)$。 先手先取最少的一堆，即先取$f(a_1)$这堆，由于是不连续的斐波那契数列，所以$f(a_2)&gt;2f(a_1)$，所以后手只能从$f(a_2)$中拿，且拿不完，这样就转化成了$n$是斐波那契数的情况，所以后手必输。]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>博弈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[还是畅通工程(最小生成树入门-Kruskal)]]></title>
    <url>%2F%E8%BF%98%E6%98%AF%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[描述传送门：poj-1875 &emsp;某省调查乡村交通状况，得到的统计表中列出了任意两村庄间的距离。省政府“畅通工程”的目标是使全省任何两个村庄间都可以实现公路交通（但不一定有直接的公路相连，只要能间接通过公路可达即可），并要求铺设的公路总长度为最小。请计算最小的公路总长度。 Input 测试输入包含若干测试用例。每个测试用例的第1行给出村庄数目N ( &lt; 100 )；随后的N(N-1)/2行对应村庄间的距离，每行给出一对正整数，分别是两个村庄的编号，以及此两村庄间的距离。为简单起见，村庄从1到N编号。 当N为0时，输入结束，该用例不被处理。 Output 对每个测试用例，在1行里输出最小的公路总长度。 Examples intput 12345678910111231 2 11 3 22 3 441 2 11 3 41 4 12 3 32 4 23 4 50 output 1235 思路 这是一道简单的最小生成树。 Kruskal算法就是在点之间加边，每次在剩下的边中选一条最小边,用这条边将端点的两个点加入生成，并满足这条边的添加不会使生成树产生回路（这条边的两个端点不都在生成树里面）。 用并查集来维护节点是否加入了生成树。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869//#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll;const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7;int Father[105];struct edge //存边&#123; int a,b,s;&#125; Edge[60000];int Find(int x) //找根节点&#123; return Father[x]==x? x:Father[x]=Find(Father[x]);&#125;void Union(int a,int b) //合并&#123; int fa=Find(a); int fb=Find(b); Father[fa]=fb;&#125;bool cmp(edge x,edge y)&#123; return x.s&lt;y.s;&#125;int main()&#123; ios::sync_with_stdio(false); //加速 int n=0,ans,add; while(cin&gt;&gt;n&amp;&amp;n) &#123; for(int i=0; i&lt;=n; i++) Father[i]=i; //初始化 ans=0; add=0; for(int i=0; i&lt;n*(n-1)/2; i++) cin&gt;&gt;Edge[i].a&gt;&gt;Edge[i].b&gt;&gt;Edge[i].s; sort(Edge,Edge+n*(n-1)/2,cmp); // 按边的权值有小到大排序 for(int i=0; i&lt;n*(n-1)/2&amp;&amp;add&lt;n-1; i++) if(Find(Edge[i].a)!=Find(Edge[i].b)) //依次添加 &#123; add++; ans+=Edge[i].s; Union(Edge[i].a,Edge[i].b); &#125; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>图论</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How Many Answers Are Wrong(带权并查集)]]></title>
    <url>%2FHow-Many-Answers-Are-Wrong%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-3038 TT and FF are … friends. Uh… very very good friends -____-b FF is a bad boy, he is always wooing TT to play the following game with him. This is a very humdrum game. To begin with, TT should write down a sequence of integers-_-!!(bored). Then, FF can choose a continuous subsequence from it(for example the subsequence from the third to the fifth integer inclusively). After that, FF will ask TT what the sum of the subsequence he chose is. The next, TT will answer FF’s question. Then, FF can redo this process. In the end, FF must work out the entire sequence of integers. BoringBoringa very very boring game!!! TT doesn’t want to play with FF at all. To punish FF, she often tells FF the wrong answers on purpose. The bad boy is not a fool man. FF detects some answers are incompatible. Of course, these contradictions make it difficult to calculate the sequence. However, TT is a nice and lovely girl. She doesn’t have the heart to be hard on FF. To save time, she guarantees that the answers are all right if there is no logical mistakes indeed. What’s more, if FF finds an answer to be wrong, he will ignore it when judging next answers. But there will be so many questions that poor FF can’t make sure whether the current answer is right or wrong in a moment. So he decides to write a program to help him with this matter. The program will receive a series of questions from FF together with the answers FF has received from TT. The aim of this program is to find how many answers are wrong. Only by ignoring the wrong answers can FF work out the entire sequence of integers. Poor FF has no time to do this job. And now he is asking for your help~(Why asking trouble for himself~~Bad boy) Input Line 1: Two integers, N and M (1 &lt;= N &lt;= 200000, 1 &lt;= M &lt;= 40000). Means TT wrote N integers and FF asked her M questions. Line 2..M+1: Line i+1 contains three integer: Ai, Bi and Si. Means TT answered FF that the sum from Ai to Bi is Si. It’s guaranteed that 0 &lt; Ai &lt;= Bi &lt;= N. You can assume that any sum of subsequence is fit in 32-bit integer. Output A single line with a integer denotes how many answers are wrong. Examples intput 12345610 51 10 1007 10 281 3 324 6 416 6 1 output 11 题意 有一个数列，给你几条语句，每条都是a,b,s形式，代表这个数列从a到b的和为s，求这些语句有几条是跟它之前的语句矛盾的。 思路 这是一道裸的带权并查集，种类并查集就是比普通并查集多维护一个权值数组valum[]。其实和种类并查集很像，种类并查集就是权值都为1的带权并查集再膜一下种类数。 这道题valum[i]表示i到fa[i]的总和。如何来维护valum数组呢，我们需要修改一下Union函数和Find函数。 Union函数稍有变化,加了一句：valum[fa]=s+valum[b]-valum[a];画个图出来就很容易理解 Find函数的valum[x]+=valum[tem];也是同理，画个图就好理解了。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667//#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll;const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7;int valum[200005],Fa[200005],n,time,ans=0;void init(int n)&#123; for(int i=0; i&lt;=n; i++) Fa[i]=i; CRL(valum); ans=0;&#125;int Find(int x)&#123; if(Fa[x]!=x) &#123; int tem=Fa[x]; Fa[x]=Find(Fa[x]); valum[x]+=valum[tem]; &#125; return Fa[x];&#125;void Union(int a,int b,int s)&#123; int fa=Find(a); int fb=Find(b); if(fa!=fb) &#123; Fa[fa]=fb; valum[fa]=s+valum[b]-valum[a]; &#125; else if(valum[a]!=s+valum[b]) ans++;&#125;int main()&#123; ios::sync_with_stdio(false); //加速cin,cout int a,b,s; while(cin&gt;&gt;n&gt;&gt;time) &#123; init(n); while(time--) &#123; cin&gt;&gt;a&gt;&gt;b&gt;&gt;s; Union(--a,b,s); //因为元素是离散的，要--a,这样valum[b]-valum[a]；才是我们想要的区间和 &#125; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125; 类似题 poj-1988]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Find them,Catch them(种类并查集)]]></title>
    <url>%2FFind-them-Catch-them%2F</url>
    <content type="text"><![CDATA[描述传送门：poj-1703 &emsp;The police office in Tadu City decides to say ends to the chaos, as launch actions to root up the TWO gangs in the city, Gang Dragon and Gang Snake. However, the police first needs to identify which gang a criminal belongs to. The present question is, given two criminals; do they belong to a same clan? You must give your judgment based on incomplete information. (Since the gangsters are always acting secretly.) &emsp;Assume N (N &lt;= 10^5) criminals are currently in Tadu City, numbered from 1 to N. And of course, at least one of them belongs to Gang Dragon, and the same for Gang Snake. You will be given M (M &lt;= 10^5) messages in sequence, which are in the following two kinds: D [a] [b]where [a] and [b] are the numbers of two criminals, and they belong to different gangs. A [a] [b]where [a] and [b] are the numbers of two criminals. This requires you to decide whether a and b belong to a same gang. Input &emsp;The first line of the input contains a single integer T (1 &lt;= T &lt;= 20), the number of test cases. Then T cases follow. Each test case begins with a line with two integers N and M, followed by M lines each containing one message as described above. Output &emsp;For each message “A [a] [b]” in each case, your program should give the judgment based on the information got before. The answers might be one of “In the same gang.”, “In different gangs.” and “Not sure yet.” Examples intput 123456715 5A 1 2D 1 2A 1 2D 2 4A 1 4 output 123Not sure yet.In different gangs.In the same gang. 思路 这是一道裸的种类并查集，种类并查集就是比普通并查集多维护一个种类数组group[]。 这道题group[i]=1表示i和Fa[i]不是一个帮派。如何来维护group数组呢，我们需要修改一下Union函数和Find函数。 Union函数稍有变化,加了一句：group[fa]=(group[b]+1-group[a])%2;画个图出来就很容易理解 Find函数的group[x]=(group[x]+group[tem])%2;也是同理，画个图就好理解了。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576//#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll;const double Pi = acos(-1);const double e = exp(1.0);const int mod =1e9+7;const int M =1e5+5;int Fa[M],group[M];void init(int n)&#123; CRL(group); for(int i=0; i&lt;=n; i++) Fa[i]=i;&#125;int Find(int x)&#123; if(Fa[x]==x) return x; int tem=Fa[x]; Fa[x]=Find(tem); group[x]=(group[x]+group[tem])%2; //更新group数组，因为可能之前已经进行了一次合并， return Fa[x]; // group[x]保存的就可能不是跟现在根节点的关系，而是跟tem的关系。&#125;void Union(int a,int b)&#123; int fa=Find(a); int fb=Find(b); if(fa!=fb) &#123; Fa[fa]=fb; group[fa]=(group[b]+1-group[a])%2; //更新group数组 &#125;&#125;int main()&#123; int Case,n,m,a,b; char x; cin&gt;&gt;Case; while(Case--) &#123; cin&gt;&gt;n&gt;&gt;m; init(n); while(m--) &#123; getchar(); scanf("%c %d %d",&amp;x,&amp;a,&amp;b); //cin会超时 if(x=='D') Union(a,b); else &#123; if(Find(a)!=Find(b)) printf("Not sure yet.\n"); else if(group[a]==group[b]) printf("In the same gang.\n"); else printf("In different gangs.\n"); &#125; &#125; &#125; return 0;&#125; 类似题 poj-2492poj-1182]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[高维正方体(找规律+二项式定理+逆元)]]></title>
    <url>%2F%E9%AB%98%E7%BB%B4%E6%AD%A3%E6%96%B9%E4%BD%93%2F</url>
    <content type="text"><![CDATA[描述传送门：洛谷-1999 0维空间的元素是点，这个毋庸置疑。 2个0维空间的元素可以围成一个1维空间的元素，线段。 4个1维空间的元素可以围成一个2维空间的元素，正方形。 6个2维空间的元素可以围成一个3维空间的元素，正方体。 8个3维空间的元素可以围成一个4维空间的元素，超正方体。 …… 一个正方形中，有4个（顶）点，4条线段（边），1个正方形。 一个正方体中，有8个（顶）点，12条线段（棱），6个正方形（面），1个正方体。 …… 我们的问题是：给出a与b，请求出：在a维空间的元素中，包含着多少个b维空间的元素。答案可能很大，只需要输出它除以1000000007的余数。 Input 两个整数a,b，以空格隔开。 Output 一个整数，即答案。 Examples intput 13 1 output 112 思路 仔细观察4 4 18 12 6 1可以看出他们的共同点就是一个是$(x+2)^2$的展开式系数，一个是$(x+2)^3$的展开式系数，这时候我们就大胆的猜测$n$维立方体里包含的比他低维度的立方体个数就是$(x+2)^n$的展开式的系数，a维空间的元素中包含个b维空间的元素的个数就是$(x+2)^a$的展开式中$x^b$的系数。(事实证明是对的) 根据二项式定理，我们就得到了公式solve(a,b)=C_a^b\cdot2^{a-b}=\frac{a!}{b!(a-b)!}\cdot2^{a-b} 由于$C_a^b2$和$2^{a-b}$都太大了，但是由于要取模，我们就可以分别用逆元和快速幂求得值。 数据用$long &emsp; long$来存，否则会 爆精度。 逆元和快速幂详见另一篇博客：数论笔记本 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970//#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt; #include&lt;string.h&gt; #include&lt;string&gt; #include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll; const double Pi = acos(-1);const double e = 2.718281828459;const int mod =1e9+7; ll fac(ll x) //阶乘 &#123; ll ans=1; for(int i=1;i&lt;=x;i++) ans=(ans*i)%mod; return ans;&#125;ll x,y;ll exgcd(ll a,ll b) //扩展欧几里德求逆元 &#123; if(b==0) &#123; x=1;y=0; return a; &#125; ll r=exgcd(b,a%b); ll c=x; x=y; y=c-a/b*y; return r;&#125;ll qpow(ll a,ll b) //快速幂 &#123; ll ans=1; a%=mod; while(b&gt;0) &#123; if(b&amp;1) ans=(ans*a)%mod; b/=2; a=(a*a)%mod; &#125; return ans;&#125;int main()&#123; int a,b;ll ans; while(cin&gt;&gt;a&gt;&gt;b) &#123; if(a&lt;b) ans=0; //特判 else &#123; exgcd((fac(b)*fac(a-b))%mod,mod); x= x&lt;=0? x+=mod:x; //保证x&gt;0 ans=(((fac(a)*x)%mod)*qpow(2,a-b))%mod; &#125; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>排列组合</tag>
        <tag>逆元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Is It A Tree? (并查集入门)]]></title>
    <url>%2FIs-It-A-Tree-%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[描述传送门：poj-1308 &emsp;A tree is a well-known data structure that is either empty (null, void, nothing) or is a set of one or more nodes connected by directed edges between nodes satisfying the following properties.&emsp;There is exactly one node, called the root, to which no directed edges point.Every node except the root has exactly one edge pointing to it.&emsp;There is a unique sequence of directed edges from the root to each node.&emsp;For example, consider the illustrations below, in which nodes are represented by circles and edges are represented by lines with arrowheads. The first two of these are trees, but the last is not. &emsp;In this problem you will be given several descriptions of collections of nodes connected by directed edges. For each of these you are to determine if the collection satisfies the definition of a tree or not. Input &emsp;The input will consist of a sequence of descriptions (test cases) followed by a pair of negative integers. Each test case will consist of a sequence of edge descriptions followed by a pair of zeroes Each edge description will consist of a pair of integers; the first integer identifies the node from which the edge begins, and the second integer identifies the node to which the edge is directed. Node numbers will always be greater than zero. Output &emsp;For each test case display the line “Case k is a tree.” or the line “Case k is not a tree.”, where k corresponds to the test case number (they are sequentially numbered starting with 1). Examples intput 1234567896 8 5 3 5 2 6 45 6 0 08 1 7 3 6 2 8 9 7 57 4 7 8 7 6 0 03 8 6 8 6 45 3 5 6 5 2 0 0-1 -1 output 123Case 1 is a tree.Case 2 is a tree.Case 3 is not a tree. 思路 初始化每个点单独为一个集合，每次读入A,B就合并A,B所在的集合，每个集合都有一个代表元素，集合中的元素都指向代表元素并且只有代表元素指向自己，如果读入A,B的时候发现A,B的代表数组一样的话就说明有多个节点指向A或B,不是树。 由于节点不一定是从1开始的，如上图的第一个。所以我们用一个mark数组来标记一组数据中“提到”的节点，最后遍历一遍看连通分支数是否等于1。 有一组神坑数据：0 0-1 -1 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273//#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll;const double Pi = acos(-1);const double e = 2.718281828459;const int mod =1e9+7;int point[100005],mark[100005];int Find(int x) //找代表元素&#123; int tem=x; while(point[tem]!=tem) tem=point[tem]; int tem2=x; while(point[tem2]!=tem) //压缩路径 &#123; x=point[tem2]; point[tem2]=tem; tem2=x; &#125; return tem;&#125;int main()&#123; int a,b,Flag=0,sum,Case=0; while(cin&gt;&gt;a&gt;&gt;b&amp;&amp;a!=-1&amp;&amp;b!=-1) &#123; Case++; if(a==0&amp;&amp;b==0) &#123; printf("Case %d is a tree.\n",Case); //当数据只有0 0 时 continue; &#125; Flag=0; sum=0; for(int i=0; i&lt;100005; i++) point[i]=i; CRL(mark); do &#123; mark[a]=mark[b]=1; //标记提到过 if(Find(a)==Find(b)) //如果之前就连通，则不是数 Flag=1; else point[Find(a)]=point[Find(b)]; //合并 &#125; while(scanf("%d%d",&amp;a,&amp;b)&amp;&amp;a&amp;&amp;b); for(int i=1; i&lt;100005; i++) if(mark[i]&amp;&amp;point[i]==i) //找连通分支数 sum++; if(Flag||sum&gt;1) printf("Case %d is not a tree.\n",Case); else printf("Case %d is a tree.\n",Case); &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How Many Tables(并查集入门)]]></title>
    <url>%2FHow-Many-Tables-%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[描述传送门：HDU-1213 &emsp;Today is Ignatius’ birthday. He invites a lot of friends. Now it’s dinner time. Ignatius wants to know how many tables he needs at least. You have to notice that not all the friends know each other, and all the friends do not want to stay with strangers.&emsp;One important rule for this problem is that if I tell you A knows B, and B knows C, that means A, B, C know each other, so they can stay in one table.&emsp;For example: If I tell you A knows B, B knows C, and D knows E, so A, B, C can stay in one table, and D, E have to stay in the other one. So Ignatius needs 2 tables at least. Input &emsp;The input starts with an integer T(1&lt;=T&lt;=25) which indicate the number of test cases. Then T test cases follow. Each test case starts with two integers N and M(1&lt;=N,M&lt;=1000). N indicates the number of friends, the friends are marked from 1 to N. Then M lines follow. Each line consists of two integers A and B(A!=B), that means friend A and friend B know each other. There will be a blank line between two cases. Output For each test case, just output how many tables Ignatius needs at least. Do NOT print any blanks. Examples intput 1234567825 31 22 34 55 12 5 output 1224 思路 并查集入门题。初始化每人单独为一个集合，每次读入A,B就合并A,B所在的集合，每个集合都有一个代表元素，集合中的元素都指向代表元素并且只有代表元素指向自己，最后遍历一遍求出答案。 同样的方法也可以求无向图里的连通分支数。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960//#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll;const double Pi = acos(-1);const double e = 2.718281828459;const int mod =1e9+7;int Friend[1005];int Find(int x)&#123; int tem=x; while(Friend[tem]!=tem) //查找x元素所在集合的代表元素 tem=Friend[tem]; int t=x; while(Friend[t]!=tem) //压缩路径 &#123; x=Friend[t]; Friend[t]=tem; t=x; &#125; return tem;&#125;int main()&#123; int test,n,way,a,b,ans=0; cin&gt;&gt;test; while(test--) &#123; ans=0; cin&gt;&gt;n&gt;&gt;way; for(int i=0; i&lt;=n; i++) Friend[i]=i; for(int i=0; i&lt;way; i++) &#123; cin&gt;&gt;a&gt;&gt;b; a=Find(a),b=Find(b); if(a!=b) //合并两个集合 Friend[a]=Friend[b]; &#125; for(int i=1; i&lt;=n; i++) //查找有几个代表元素 if(Friend[i]==i) ans++; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>并查集</tag>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[求数列的逆序数]]></title>
    <url>%2F%E6%B1%82%E6%95%B0%E5%88%97%E7%9A%84%E9%80%86%E5%BA%8F%E6%95%B0%2F</url>
    <content type="text"><![CDATA[描述 &emsp;在一个排列中，如果一对数的前后位置与大小顺序相反，即前面的数大于后面的数，那么它们就称为一个逆序。一个排列中逆序的总数就称为这个排列的逆序数。 思路暴力出奇迹 对于每一个数都遍历一遍排在他前面的数，每有一个比他大的数就ans++，时间复杂度为$O(n^2)$，很明显这个算法只能应用于数很少的情况。 归并排序求逆序数 归并排序中，在每次合并的时候判断一下。 假设数列为9 1 0 5 4，先把它分成两个子序列，9 1 | 0 5 4，使左右分别有序，则有1 9 | 0 4 5，此时进行两个子序列合并。如果a[i]&lt;=a[j],则i++，继续比较，如果a[i]&gt;a[i],则说明a[i]到a[mid]的数都大于a[j],那么ans+=mid-i+1。 代码12345678910111213141516171819202122232425262728ll a[500005],tem[500005],ans; //a为要求的序列，tem是临时存放的数组void divide(int low,int high) //子序列&#123; if(high==low) //因为上面那种思路需要子序列有序，当子序列只有一个数时，即认为这个子序列有序 return; divide(low,(low+high)/2); //使左边有序 divide((low+high)/2+1,high); //使右边有序 int mid=(low+high)/2; int i=low,j=mid+1,k=low; while(i&lt;=mid&amp;&amp;j&lt;=high) //合并 &#123; if(a[i]&gt;a[j]) &#123; ans+=mid-i+1; tem[k++]=a[j++]; &#125; else tem[k++]=a[i++]; &#125; while(i&lt;=mid) tem[k++]=a[i++]; //将剩下的存入数组 while(j&lt;=high) tem[k++]=a[j++]; for(int t=low;t&lt;=high;t++) a[t]=tem[t]; //更新a数组 return;&#125; 用树状数组求逆序数 这个算法的思想就是依次插入序列的数，每插入一个就ans+=在这个数前面比它大的数的个数。最后的ans就是答案。 用一个数组tr[x],tr[x]=1代表x在序列中存在1个。一开始tr都为0，因为此时未插入任何数。 此时的树状数组tr[x]代表在x前lowbit(x)个数有多少个数比它小。 初始化tr数组为0，代表一开始所有数都没有插入。 每次插入一个数x就是tr[x]++,再更新一次树状数组，维护区间和。 离散化处理 根据上面的思路，我们很容易发现我们要开很大的数组。如果题目说长度为$5 \times 10^5$数列a中$a_i \leq 10^9$，这时候开$10^9$的数组就太浪费了，我们就可以离散化处理。 我们离散化的目的就是为了把$10^9$的数对应到$5 \times 10^5$中，举个例子： 原序列为： 999 23 0 98765 2 7 离散化后： 5 4 1 6 2 3 说白了就是用一个$1-n$的数列来代替原序列，而逆序数不变。 没看懂的可以跟着代码模拟一遍。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define lowbit(x) (x&amp;(-x))#define INF 0xfffffffftypedef long long ll;const int N=5e5+5;int tr[N],b[N],n;typedef pair &lt;ll,int&gt; pp;pp a[N];void Update(int x) //插入x&#123; while(x&lt;=n) &#123; tr[x]++; x+=lowbit(x); &#125;&#125;int Query(int x) //查询序列中比x小的有多少个&#123; int sum=0; while(x&gt;0) &#123; sum+=tr[x]; x-=lowbit(x); &#125; return sum;&#125;int main()&#123; ios::sync_with_stdio(false); while(cin&gt;&gt;n&amp;&amp;n) &#123; CRL(tr); for(int i=1;i&lt;=n;i++) //离散化开始 &#123; cin&gt;&gt;a[i].first; a[i].second=i; &#125; sort(a+1,a+n+1); for(int i=1;i&lt;=n;i++) b[a[i].second]=i; //离散化结束，b数组即是离散化后的数组 ll ans=0; for(int i=1;i&lt;=n;i++) &#123; Update(b[i]); //依次插入更新 ans+=(i-Query(b[i])); &#125; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0; &#125; 题目 poj-2299 hdu-1394]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>排列组合</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FATE(二维费用背包问题)]]></title>
    <url>%2FFATE-%E4%BA%8C%E7%BB%B4%E8%B4%B9%E7%94%A8%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-2159 &emsp;最近xhd正在玩一款叫做FATE的游戏，为了得到极品装备，xhd在不停的杀怪做任务。久而久之xhd开始对杀怪产生的厌恶感，但又不得不通过杀怪来升完这最后一级。现在的问题是，xhd升掉最后一级还需n的经验值，xhd还留有m的忍耐度，每杀一个怪xhd会得到相应的经验，并减掉相应的忍耐度。当忍耐度降到0或者0以下时，xhd就不会玩这游戏。xhd还说了他最多只杀s只怪。请问他能升掉这最后一级吗？ Input 输入数据有多组，对于每组数据第一行输入n，m，k，s(0 &lt; n,m,k,s &lt; 100)四个正整数。分别表示还需的经验值，保留的忍耐度，怪的种数和最多的杀怪数。接下来输入k行数据。每行数据输入两个正整数a，b(0 &lt; a,b &lt; 20)；分别表示杀掉一只这种怪xhd会得到的经验值和会减掉的忍耐度。(每种怪都有无数个) Output 输出升完这级还能保留的最大忍耐度，如果无法升完这级输出-1。 Examples intput 123456710 10 1 101 110 10 1 91 19 10 2 101 12 2 output 1230-11 思路 有两个费用，一个是忍耐度，另一个是杀怪数。 注意这里对经验的理解，它不是第三个费用。 然后用完全背包，最后判断一下最优解即可。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445//#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll;const double Pi = acos(-1);const double e = 2.718281828459;const int mod =1e9+7;int dp[105][105],n,m,k,s,cost[105],valum[105]; //dp[i][j]:杀i,耐力j时的经验int main()&#123; while(cin&gt;&gt;n&gt;&gt;m&gt;&gt;k&gt;&gt;s) &#123; for(int i=0; i&lt;k; i++) cin&gt;&gt;valum[i]&gt;&gt;cost[i]; CRL(dp); for(int i=0; i&lt;k; i++) for(int p=1; p&lt;=s; p++) //杀怪 for(int j=cost[i]; j&lt;=m; j++) //忍耐 dp[p][j]=max(dp[p][j],dp[p-1][j-cost[i]]+valum[i]); if(dp[s][m]&lt;n) //如果消耗完耐力都不能升级 cout&lt;&lt;-1&lt;&lt;endl; else for(int i=0; i&lt;=m; i++) //找能升级，耐力消耗最小的 if(dp[s][i]&gt;=n) &#123; cout&lt;&lt;m-i&lt;&lt;endl; break; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>背包问题</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xiaoxin juju needs help(排列组合+逆元)]]></title>
    <url>%2Fxiaoxin-juju-needs-help-%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88-%E9%80%86%E5%85%83%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-5651 As we all known, xiaoxin is a brilliant coder. He knew palindromic strings when he was only a six grade student at elementry school. This summer he was working at Tencent as an intern. One day his leader came to ask xiaoxin for help. His leader gave him a string and he wanted xiaoxin to generate palindromic strings for him. Once xiaoxin generates a different palindromic string, his leader will give him a watermelon candy. The problem is how many candies xiaoxin’s leader needs to buy? Input This problem has multi test cases. First line contains a single integer T(T≤20) which represents the number of test cases.For each test case, there is a single line containing a string S(1≤length(S)≤1,000). Output For each test case, print an integer which is the number of watermelon candies xiaoxin’s leader needs to buy after mod 1,000,000,007. Examples intput 12343aaaabba output 123121 思路 其实这道题难点不是推出公式，而是求解公式(吐血.jpg)。 设字符串为s,字符串长度为Len,字母i出现次数的二分之一为c[i](取整); 如果有解，就要求出现次数是奇数的字母不超过1个(废话)，然后我们只需要考虑一边的所有情况，另一边跟它一样就能构成回文序列。只考虑一边时，共有Len/2个字符,根据高中学的排列组合可知，所有的排列情况是\frac{A_{Len/2}^{Len/2}}{A_{c[1]}^{c[1]}A_{c[2]}^{c[2]}...{A_{c[i]}^{c[i]}}} \Longrightarrow \frac{Len/2!}{c[1]!c[2]!...c[i]!} 关键就是如何求解这个公式了，由题目可知，Len/2最大是500，也就是要算500!，很明显要爆精度。因为答案对(1e9+7)取摸，这里引入一个转化：(a$ \times $b)%m $\rightarrow$ (a%m $ \times $ b%m )%m 显然正确,所以我们求阶乘的时候只要边乘边对(1e9+7)取模就不会爆精度。但是 (a $ \div $ b)%m $ \not= $ ((a%m) $ \div $ (b%m))%m,所以我们要用逆元变除法为乘法，就可以边乘边取模。 这道题我是用的拓展欧几里德算法求逆元，不知道的可以看我的另一篇博客数论笔记本 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xfffffff#define MAXN 6typedef unsigned long long LL;typedef long long ll;const int mod =1e9+7;ll fac(int n) //求阶乘 &#123; if(n==1||n==0) return 1; else &#123; ll ans=1; for(int i=2;i&lt;=n;i++) ans=(ans*i)%mod; //边乘边取模 return ans; &#125;&#125;int x,y;int exgcd(int a,int b) //拓展欧几里德算法，求出的x,即为a%b下a的逆元 &#123; if(b==0) &#123; x=1;y=0; return a; &#125; int r=exgcd(b,a%b); int c=x; x=y; y=c-a/b*y; return r;&#125;int main()&#123; ll ans; int book[26],n,Flag=0,Len; char s[1005]; cin&gt;&gt;n; while(n--) &#123; CRL(book); Flag=0; ans=0; scanf("%s",s); Len=strlen(s); for(int i=0; i&lt;Len; i++) book[s[i]-'a']++; for(int i=0; i&lt;26; i++) if(book[i]&amp;1) Flag++; if(Flag&gt;1) //如果出现次数为奇数的字母超过1,无解 ans=0; else &#123; ans=fac(Len/2); for(int i=0; i&lt;26; i++) if(book[i]&gt;1) &#123; exgcd(fac(book[i]/2),mod); x=x&lt;0? x+mod:x; //x小于0的话要转换成正数 ans=ans*x%mod; &#125; &#125; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>排列组合</tag>
        <tag>逆元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LCP Array(排列组合)]]></title>
    <url>%2FLCP-Array-%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-5635 Peter has a string $s=s_1s_2…s_n$, let $suff_i=s_is_{i+1}…s_n$ be the suffix start with $i^{th}$ character of $s$. Peter knows the lcp (longest common prefix) of each two adjacent suffixes which denotes as $a_i=lcp(suff_i,suff_{i+1})(1≤i&lt;n)$. Given the lcp array, Peter wants to know how many strings containing lowercase English letters only will satisfy the lcp array. The answer may be too large, just print it modulo $10^9+7$. Input There are multiple test cases. The first line of input contains an integer T indicating the number of test cases. For each test case: The first line contains an integer n ($2≤n≤10^5$) — the length of the string. The second line contains n−1 integers: $a_1,a_2,…,a_{n−1} (0≤a_i≤n)$. The sum of values of n in all test cases doesn’t exceed $10^6$. Output For each test case output one integer denoting the answer. The answer must be printed modulo $10^9+7$. Examples intput 1234567330 043 2 131 2 output 12316250260 思路 有解的条件：以样例2为例:$lcp_1=3 \Rightarrow s_1=s_2,s_2=s_3,s_3=s_4$,要有解显然$lcp_i=lcp_{i-1}-1$一定成立，而且$lcp_{n-1}$不可能大于1,也就是说如果$lcp_i$=n,那么$lcp_i$到$lcp_{i+n}$的值一定是n到1递减。 计算有解时的答案：显然当$lcp_i$=n(n&gt;0)时，$s_i$到$s_{i+n}$都为同一个字母，如果$lcp_i$=0,则$s_i$和$s_{i+1}$为不同字母，所以当前一种字母确定时，后一种字母就有25种可能。 所以如果有解，lcp数组中0的个数为n,答案就是$26 \times 25^n$。我也是在草稿本上先找到规律AC了才推出原理的 代码12345678910111213141516171819202122232425262728293031323334353637383940#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xfffffff#define M 100000typedef unsigned long long LL;typedef long long ll;const int mod =1e9+7;int main()&#123; int n,len,lcp[M],Flag=0; ll ans; cin&gt;&gt;n; while(n--) &#123; Flag=0; ans=26; cin&gt;&gt;len; for(int i=1; i&lt;len; i++) &#123; scanf("%d",&amp;lcp[i]); if(lcp[i]+1!=lcp[i-1]&amp;&amp;lcp[i-1]&gt;0) //如果不是前比后多一且前一个不为0 Flag=1; else if(lcp[i]==0) ans=(ans*25)%mod; &#125; if(Flag||lcp[len-1]&gt;1) //lcp数组末尾一定是0或1 cout&lt;&lt;0&lt;&lt;endl; else cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>排列组合</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一个人的旅行(Dijkstra算法)]]></title>
    <url>%2F%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E6%97%85%E8%A1%8C-%E6%9C%80%E7%9F%AD%E8%B7%AFDijkstra%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-2066 &emsp;虽然草儿是个路痴（就是在杭电待了一年多，居然还会在校园里迷路的人，汗~),但是草儿仍然很喜欢旅行，因为在旅途中 会遇见很多人（白马王子，^0^），很多事，还能丰富自己的阅历，还可以看美丽的风景……草儿想去很多地方，她想要去东京铁塔看夜景，去威尼斯看电影，去阳明山上看海芋，去纽约纯粹看雪景，去巴黎喝咖啡写信，去北京探望孟姜女……眼看寒假就快到了，这么一大段时间，可不能浪费啊，一定要给自己好好的放个假，可是也不能荒废了训练啊，所以草儿决定在要在最短的时间去一个自己想去的地方！因为草儿的家在一个小镇上，没有火车经过，所以她只能去邻近的城市坐火车（好可怜啊~）。 Input 输入数据有多组，每组的第一行是三个整数T，S和D，表示有T条路，和草儿家相邻的城市的有S个，草儿想去的地方有D个；接着有T行，每行有三个整数a，b，time,表示a,b城市之间的车程是time小时；(1=&lt;(a,b)&lt;=1000;a,b 之间可能有多条路)接着的第T+1行有S个数，表示和草儿家相连的城市；接着的第T+2行有D个数，表示草儿想去地方。 Output 输出草儿能去某个喜欢的城市的最短时间。 Examples intput 1234567896 2 31 3 51 4 72 8 123 8 44 9 129 10 21 28 9 10 output 19 思路 一读完题就开始敲Floyd，然后没有意外地T了。 经过大佬的一番点拨，我们把草儿家看成一个节点0，邻近的城市和草儿家的距离为0，这样就转换成了最单纯的单源最短路问题。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))typedef unsigned long long LL;typedef long long ll;const int mod =1e9+7;#define MAX 99999bool visit[1005];int Distance[1005],map[1005][1005],m,n,MaxNode;// Distance:源点到点i的距离 MaxNode:最大的节点void Dijkstar(int v0) //v0为源点&#123; CRL(visit); visit[v1]=1; for(int i=1; i&lt;=MaxNode; i++) Distance[i]=map[v1][i]; int k=1,t=1,v,w,Min; // 开始主循环，每次求得V0到某个V顶点的最短路径 for( v=1; v&lt;=MaxNode; v++ ) &#123; Min=MAX; for(w=1; w&lt;=MaxNode; w++ ) &#123; if(!visit[w]&amp;&amp;Distance[w]&lt;Min ) &#123; k=w; Min=Distance[w]; &#125; &#125; visit[k]=1; // 将目前找到的最近的顶点置1 // 修正当前最短路径及距离 for(w=0; w&lt;=MaxNode; w++) &#123; // 如果经过v顶点的路径比现在这条路径的长度短就修正 if( !visit[w] &amp;&amp; (Min+map[k][w]&lt;Distance[w]) ) Distance[w]=Min+map[k][w]; // 修改当前路径长度 &#125; &#125;&#125;void create() //建图&#123; int x,y,way; memset(map,1,sizeof(map)); //把map数组全部置为无穷大，准确来说现在map中每个元素在内存中为00000001000000010000000100000001 for(int i=1; i&lt;=m; i++) &#123; scanf("%d%d%d",&amp;x,&amp;y,&amp;way); MaxNode=MaxNode&gt;x?MaxNode:x; MaxNode=MaxNode&gt;y?MaxNode:y; if(way&lt;map[x][y]) map[x][y]=map[y][x]=way; &#125; for(int i=0; i&lt;n; i++) &#123; cin&gt;&gt;x; map[0][x]=map[x][0]=0; &#125; return;&#125;int main()&#123; int T,ans=99999,want; while(cin&gt;&gt;m&gt;&gt;n&gt;&gt;T) &#123; ans=99999; create(); Dijkstra(0); for(int i=0; i&lt;T; i++) &#123; cin&gt;&gt;want; ans=min(ans,Distance[want]); &#125; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ACboy needs your help(分组背包)]]></title>
    <url>%2FACboy-needs-your-help-%E5%88%86%E7%BB%84%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[描述传送门：hdu-1712 ACboy has N courses this term, and he plans to spend at most M days on study.Of course,the profit he will gain from different course depending on the days he spend on it.How to arrange the M days for the N courses to maximize the profit? Input The input consists of multiple data sets. A data set starts with a line containing two positive integers N and M, N is the number of courses, M is the days ACboy has.Next follow a matrix A[i][j], (1&lt;=i&lt;=N&lt;=100,1&lt;=j&lt;=M&lt;=100).A[i][j] indicates if ACboy spend j days on ith course he will get profit of value A[i][j].N = 0 and M = 0 ends the input. Output For each data set, your program should output a line which contains the number of the max profit ACboy will gain. Examples intput 123456789102 21 21 32 22 12 12 33 2 13 2 10 0 output 123346 思路 这是一个典型的分组背包问题，我们可以转换成01背包求解。 核心代码 12345for(int i=1;i&lt;=n;i++) for(int j=V;j&gt;=0;j--) for(int k=0;k&lt;=V;k++) //转01背包，注意三重循环顺序 if(j&gt;=k) dp[j]=max(dp[j],dp[j-k]+map[i][k]);]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>背包问题</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cow Contest(floyd))]]></title>
    <url>%2FCow-Contest-floyd%2F</url>
    <content type="text"><![CDATA[描述传送门：poj-3660 N (1 ≤ N ≤ 100) cows, conveniently numbered 1..N, are participating in a programming contest. As we all know, some cows code better than others. Each cow has a certain constant skill rating that is unique among the competitors. The contest is conducted in several head-to-head rounds, each between two cows. If cow A has a greater skill level than cow B (1 ≤ A ≤ N; 1 ≤ B ≤ N; A ≠ B), then cow A will always beat cow B. Farmer John is trying to rank the cows by skill level. Given a list the results of M (1 ≤ M ≤ 4,500) two-cow rounds, determine the number of cows whose ranks can be precisely determined from the results. It is guaranteed that the results of the rounds will not be contradictory. Input Line 1: Two space-separated integers: N and M Lines 2..M+1: Each line contains two space-separated integers that describe the competitors and results (the first integer, A, is the winner) of a single round of competition: A and B. Output Line 1: A single integer representing the number of cows whose ranks can be determined. Examples intput 1234565 54 34 23 21 22 5 output 12 思路 把比赛看成是一个有向图，问题其实就转化成求了求有多少个顶点和其他所有顶点都连通。 形象地说就是当一头牛胜负加起来为n-1时，也就是和其他的牛都比赛过(包括间接的)就能确定它的名次。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string.h&gt;#include&lt;string&gt;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define MAX 0xffffffftypedef unsigned long long LL;typedef long long ll;const int mod =1e9+7;int map[105][105],win[105],defeat[105];int main()&#123; int n,w,a,b,ans; while(cin &gt;&gt; n &gt;&gt; w) &#123; ans=0; CRL(map); CRL(win); CRL(defeat); while(w--) &#123; cin&gt;&gt;a&gt;&gt;b; if(!map[a][b]) &#123; map[a][b]=1; win[a]++; defeat[b]++; &#125; &#125; for(int k=1; k&lt;=n; k++) for(int j=1; j&lt;=n; j++) for(int i=1; i&lt;=n; i++) if(map[j][k]&amp;&amp;map[k][i]&amp;&amp;!map[j][i]) &#123; map[j][i]=1; win[j]++; defeat[i]++; &#125; for(int i=1; i&lt;=n; i++) if(win[i]+defeat[i]+1==n) ans++; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数论笔记本]]></title>
    <url>%2F%E6%95%B0%E8%AE%BA%E7%AC%94%E8%AE%B0%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[数论是个好东西。 欧几里德算法(gcd) 欧几里德算法又称辗转相除法，用于计算两个正整数a，b的最大公约数。 定理 $gcd(a,b)=gcd(b,a$ $mod$ $b)$ 特别的：$gcd(a,0)=a$ 证明充分性 设c为a,b的公约数$\because a|c$，$b|c&emsp;&emsp;&emsp;$&emsp;（|：整除）又$\because a=kb+(a$ $mod$ $b),$即$a$ $mod$ $b = a-kb$$\therefore (a$ $mod$ $b) | c$ 必要性 设$c$为$b$，$a$ $mod$ $b$的公约数$\because b|c,&emsp;(a$ $mod$ $b)|c$又$\because a=kb+(a$ $mod$ $b)$$\therefore a|c$ 代码123456int gcd(int a, int b)&#123; if(b == 0) return a; return gcd(b, a % b);&#125; 扩展欧几里德算法 扩展欧几里德算法是用来在已知a, b求解一组x，y，使它们满足等式：$ ax+by = gcd(a, b)$（解一定存在，根据数论中的相关定理）。扩展欧几里德常用在求解模线性方程及方程组中。 代码因为不好描述，所以先给出代码。1234567891011121314int x,y;int exgcd(int a,int b) //拓展欧几里德算法，求出的x,即为a%b下a的逆元 &#123; if(b==0) &#123; x=1;y=0; return a; &#125; int r=exgcd(b,a%b); int c=x; //c只是为了储存x的值 x=y; y=c-a/b*y; return r;&#125; 证明 递归之后，$ a’=b ,&emsp; b’=a \% b = a-a/b \times b $ （这里的/为计算机里的除法）$a’x+b’y=gcd(a,b)$代入化简$\Rightarrow ay+b(x-a/b \times y) = gcd(a,b) $又$\because ax+by = gcd(a,b)$$\therefore x=y ,&emsp;y=x-a/b \times y$最后的$x,y$即为答案。假设d=gcd(a,b),则x，y所有解：$ x=x+(b/d)t$，$y=y-(a/d)t$;&emsp;其中t为任意常整数 乘法逆元 若$ ax \equiv 1$ $mod$ $m$, 则称a关于1模m的乘法逆元为x。也可表示为$ax \equiv 1(mod$ $m$)。 如果$a,m$不互质，则无解。如果$m$为质数，则从1到$m-1$的任意数都与$m$互质，即在1到$m-1$之间都恰好有一个关于模$m$的乘法逆元。 求法费马小定理求逆元。 费马小定理：$a^{m-1} \equiv 1(mod$ $m$) (m为素数) 变形得: $a \cdot a^{m-2} \equiv 1(mod$ $m$) 故$a^{m-2}$为a在模m下的逆元。($a^{m-2}$用快速幂求解即可) 注意：$m$必须是质数，且$a,m$互质。(ACM的题一般都是模($10^9+7$),所以基本上都能用) 扩展欧几里德算法求逆元 扩展欧几里德算法:$ ax+by = gcd(a, b) $ 令$b=m$ ,由于$a,m$互质，所以$gcd(a,m)$=1，即$ ax+my = 1 $，两边同时模m，得$ax \equiv 1(mod$ $m$) 这样解出来的$x$就是$a$在模$m$下的逆元。 同样，也要求$m$必须是质数，且$a,m$互质。 欧拉定理求逆元 欧拉定理：$a^{ \varphi (m)} \equiv 1(mod$ $m$)&emsp;&emsp;($\varphi (m)$是小于m且与m互质的数的个数。) 变形得: $a \cdot a^{ \varphi (m)-1} \equiv 1(mod$ $m$) 故$ a^{ \varphi (m)-1} $为a在模m下的逆元。($a^{ \varphi (m)-1}$用快速幂求解即可) 欧拉定理实际上是费马小定理的推广。 应用 有时候在求$({a \over b})\%m$时,可能由于b过大而丢失精度，这时就可以求出b的逆元来变除为乘，具体如下。 设$x$为$b$模$m$的逆元。 ${({a \over b})\%m} \Rightarrow {({a \over b})\times 1 \times\%m} \Rightarrow {({a \over b})\times {b \cdot x} \times\%m} \Rightarrow a \cdot x\%m$ 快速幂 快速幂可以大大减少运算时循环的次数。 推导过程 a^n= \begin{cases} ({a^2})^{n \over 2} &\mbox{n为偶数}\\ a \cdot ({a^2})^{n \over 2} &\mbox{n为奇数} \end{cases} 上述变换显然正确。 代码123456789101112int QuickPow(int x, int n) &#123; int ans = 1; while (n &gt; 0) &#123; if(n&amp;1) ans*=x; x*=x; n/=2 ; &#125; return ans; &#125; 如果题目要求对m取模，则1234567891011121314int QuickPow(int a,int b,int m)&#123; int ans=1; a%=m; while(b&gt;0) &#123; if(b&amp;1) ans=(ans*a)%m; b/=2; a=(a*a)%m; &#125; return ans;&#125; 斯特林公式 斯特林公式是一条用来取n的阶乘的近似值的数学公式。一般来说，当n很大的时候，n阶乘的计算量十分大，所以斯特林公式十分好用，而且，即使在n很小的时候，斯特林公式的取值已经十分准确。 公式 $$n!\approx\sqrt{2\pi n}(\frac{n}{e})^n$$ 应用 求$n!$在十进制下的位数，暴力肯定不行，我们直接用斯特林公式求出$n!$的近似值，再求以10为底近似值的对数 +1(求其他进制下的位数类似，修改底数即可)。 容斥原理 在计数时，必须注意没有重复，没有遗漏。为了使重叠部分不被重复计算，人们研究出一种新的计数方法，这种方法的基本思想是：先不考虑重叠的情况，把包含于某内容中的所有对象的数目先计算出来，然后再把计数时重复计算的数目排斥出去，使得计算的结果既无遗漏又无重复，这种计数的方法称为容斥原理。 举例 如果被计数的事物有A、B、C三类，那么：A∪B∪C = A+B+C - A∩B - B∩C - C∩A + A∩B∩C 例如求给出一个数n，求1到$n$中，有多少个数不是2，5，11，13的倍数。$A,B,C,D$分别是$n/2,n/5,n/11,n/13$。 Lucas定理 Lucas定理是用来求 $C(n,m) mod $ $p$，$p$为素数的值。适用领域范围：大组合数求模,n,m&gt;p 公式 C_n^m\%p=(C_\frac{n}{p}^\frac{m}{p}C_{n\%p}^{m\%p})\%p 然后继续对$C_\frac{n}{p}^\frac{m}{p}$使用Lucas定理，用逆元求出$C_{n\%p}^{m\%p}$。 证明 详见百度百科：虚空传送门 判断一个组合数是奇数还是偶数 $C_n^k$是奇数时n&amp;k==k 中国剩余定理 中国剩余定理又名孙子定理，是中国古代求解一次同余式组的方法。 S: \begin{cases} x \equiv a_1 (mod\ m_1)\\ x \equiv a_2 (mod\ m_2) \\ x \equiv a_3 (mod\ m_3) \\ ...\\ x \equiv a_n (mod\ m_n) \end{cases}前提条件$m_1,m_2,m_3…m_n$必须两两互质。 公式 x = (\sum_{i=1}^n a_i t_i M_i)modM$M_i$为除$m_i$外其他所有$m$的乘积。$t_i=M_i^{-1}$为$M_i$模$m_i$的数论倒数($t_i$为$M_i$模$m_i$意义下的乘法逆元)。 未完待续。。。]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[多重背包问题]]></title>
    <url>%2F%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[描述 有n种物品和一个容积为V的背包，第i种物品有amount[i]个，体积cost[i]和价值valum[i]，问如何选取物品使得放入背包的物品价值之和最大。 思路 跟完全背包问题类似，这里就直接给出基本算法的状态转移方程dp[i][j]=Max\{dp[i-1][j-k \times cost[i] + k \times valum[i]\}(0\leq k \leq amount[i] 且 0\leq k \times cost[i] \leq V) 时间复杂度:O($V \times {\sum_{i=1}^N{amount[i]}}$)，空间复杂度:O(NV)。 优化 amount[i]==1时，当01背包处理。 amount[i]$ \times $cost&gt;=V时，当完全背包处理。 amount[i]$ \geq $1时，采用二进制拆分，从而转换成01背包求解，具体如下：&emsp;在上面的状态转移方程中，我们让k从1$ \to $amount[i]来实现拿不同的个数，从而转换成01背包问题，但我们可以发现，我们只要将amount[i]拆分成几个数，就可以用他们组合成小于amount[i]的任何数。例如:amount[i]=11,11的二进制为1011，把11拆成100(4)、0010(2)、0001(1)、4(11-4-2-1),这样就可以用4、2、1、4来组合成11以内所有的整数，这样放第这种物品时本来放11次，现在只要放4次，虽然仍然有重复，但也实现了优化。 初始化 如果题目没有要求必须装满，那么我们只要将dp数组全部置为0即可。 如果必须装满，我们就将dp[0]初始化为0，其他初始化为$-\infty$。 完整代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include&lt;iostream&gt;#include&lt;algorithm&gt; #include&lt;string.h&gt; #include&lt;string&gt; #include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;#define CRL(a) memset(a,0,sizeof(a))#define M 100000000typedef unsigned long long LL;typedef long long ll;const int mod =1e9+7;int V,dp[120002];void ZeroOnePack(int cost,int valum) //01背包问题&#123; for(int i=V;i&gt;=cost;i--) dp[i]=max(dp[i],dp[i-cost]+valum); return; &#125;void CompletePack(int cost,int valum) //完全背包问题&#123; for(int i=cost;i&lt;=V;i++) dp[i]=max(dp[i],dp[i-cost]+valum); return;&#125;void MultiplePack(int cost,int valum,int amount) //多重背包问题&#123; if(cost*amount&gt;=V) CompletePack(cost,valum); else &#123; int k=1; while(k&lt;amount) &#123; ZeroOnePack(cost*k,valum*k); amount-=k; k=k&lt;&lt;1; //k*=2 &#125; ZeroOnePack(cost*amount,valum*amount); &#125; return; &#125;int main()&#123; int n,cost[1000],valum[1000],amount[1000]; while(cin&gt;&gt;n&gt;&gt;V) &#123; CRL(dp); for(int i=1;i&lt;=n;i++) cin&gt;&gt;cost[i]&gt;&gt;valum[i]&gt;&gt;amount[i]; for(int i=1;i&lt;=n;i++) MultiplePack(cost[i],valum[i],amount[i]); cout&lt;&lt;dp[V]&lt;&lt;endl; &#125; return 0;&#125; 例题 换一种问法而已：poj 1014 参考资料《背包九讲》]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>背包问题</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[完全背包问题]]></title>
    <url>%2F%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[描述 有n种物品和一个容积为V的背包，每种物品i都有无限个，都有体积cost[i]和价值valum[i]，问如何选取物品使得放入背包的物品价值之和最大。 思路 完全背包和01背包很像，我们首先想到的应该是每种物品在拿0~n个中选max价值的，我们依旧用dp[i][j]来储存将前i种物品放入体积为j的背包中物品价值之和最大值，那么状态转移方程便是在放得下的情况下dp[i][j]=Max\{dp[i-1][j-k \times cost[i] + k \times valum[i]\}(0\leq k \times cost[i] \leq V) 这样最后求出来的dp[n][V]就是最后答案。 时间复杂度:O($V \times {\sum_{i=1}^N{V \over {c[i]}}}$)，空间复杂度:O(NV)。 优化 在01背包问题里面，我们逆序遍历V$(j:V \to 0)$是为了保证dp[j-cost[i]]始终是i-1物品推出的，从而保证每种物品只用一次。而完全背包问题里面我们就可以正序遍历，这样就可以在一次遍历dp[V]中考虑第i种物品的所有拿法。 核心代码如下: 123for(int i=1;i&lt;=n;i++) for(int j=cost[i];j&lt;=V;j++) dp[j]=max(dp[j],dp[j-cost[i]]+valum[i]); 优化后时间复杂度为O(NV)，空间复杂度为O(N)。 初始化 如果题目没有要求必须装满，那么我们只要将dp数组全部置为0即可。 如果必须装满，我们就将dp[0]初始化为0，其他初始化为$-\infty$。 例题 板子题：洛谷1616 换一种问法：poj 1014]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>背包问题</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[01背包问题]]></title>
    <url>%2F01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[描述 有n个物品和一个容积为V的背包，每个物品i都有体积cost[i]和价值valum[i]，问如何选取物品使得放入背包的物品价值之和最大。 思路 01背包的特点就是每种物品都只有一个，所以每个物品只有拿和不拿两种状态。 我们用dp[i][j]来储存将前i件物品放入体积为j的背包中物品价值之和最大值，那么状态转移方程便是在放得下的情况下 dp[i][j]=Max \begin{cases} dp[i-1][j] &\mbox{不拿第i个，状态跟i-1一样}\\ dp[i-1][j-cost[i]]+valum[i] &\mbox{拿第i个，那么就把前cost[i]体积的物品拿走再放} \end{cases} (j:0 \to V,i:0 \to n) 这样最后求出来的dp[n][V]就是最后答案。 优化 上面的时间复杂度是O(NV)已经无法再优化了,而空间复杂度可以优化到O(N)：我们用二维数组无非是为了保证状态转移方程里的dp[i-1][j-cost[i]]是上一个物品推出来的，如果我们直接改成dp[j]=max(dp[j],dp[j-cost[i]]+valum[i])的话，在$(j:0 \to V)$过程进行到后面的时候,dp[j-cost]有可能是已经在前面就放了i物品的状态，此时再+valumi就不符合每种物品都只有一个的题意了。 实际上。如果我们在遍历j的时候，采用逆序，即$(j:V \to 0)$，就可以保证dp[j-cost[i]]始终是i-1物品推出的。 核心代码如下123for(int i=1;i&lt;=n;i++) for(int j=V;j&gt;=cost[i];j--) dp[j]=max(dp[j],dp[j-cost[i]]+valum[i]); 初始化 如果题目没有要求必须装满，那么我们只要将dp数组全部置为0即可。 如果必须装满，我们就将dp[0]初始化为0，其他初始化为$-\infty$，$(j:V \to 0)$时每次判断dp[j-cost]是否&gt;=0，是的话就进行状态转移。(自行体会，逃.jpg) 例题 板子题：洛谷1048 变式：洛谷1164 变式：2018年全国多校算法寒假训练营练习比赛(第二场) problem B（需要一个微妙的预处理）]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>背包问题</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小牛vs小客(巴什博弈变形)]]></title>
    <url>%2F%E5%B0%8F%E7%89%9Bvs%E5%B0%8F%E5%AE%A2-%E5%B7%B4%E4%BB%80%E5%8D%9A%E5%BC%88%E5%8F%98%E5%BD%A2%2F</url>
    <content type="text"><![CDATA[描述题目链接 小牛和小客玩石子游戏，他们用n个石子围成一圈，小牛和小客分别从其中取石子，谁先取完谁胜，每次可以从一圈中取一个或者相邻两个，每次都是小牛先取，请输出胜利者的名字。（1 2 3 4 取走 2 13 不算相邻） Intput 输入包括多组测试数据每组测试数据一个n（1≤n≤10^9） Output 每组用一行输出胜利者的名字（小牛获胜输出XiaoNiu，小客获胜输出XiaoKe） Examples intput 1223 output 12XiaoNiuXiaoKe 思路 当n&lt;=2时，毫无疑问是先手获胜。 当n&gt;2时，先手拿了之后，石子形状就可以看成一条线，后手可以选择拿1个或2个，使得剩下的石子是对称的，然后无论先手怎样拿，后手总能在对称位置拿到石子，最后一定是后手赢。 代码1234567891011121314#include&lt;iostream&gt;using namespace std;int main()&#123; int x; while(cin&gt;&gt;x) &#123; if(x&lt;=2) cout&lt;&lt;"XiaoNiu\n"; else cout&lt;&lt;"XiaoKe\n"; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>博弈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[不凡的夫夫(斯特灵公式)]]></title>
    <url>%2F%E4%B8%8D%E5%87%A1%E7%9A%84%E5%A4%AB%E5%A4%AB-%E6%96%AF%E7%89%B9%E7%81%B5%E5%85%AC%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[描述题目链接 夫夫有一天对一个数有多少位数感兴趣，但是他又不想跟凡夫俗子一样，所以他想知道给一个整数n，求n！的在8进制下的位数是多少位。 Input 第一行是一个整数t(0&lt;t&lt;=1000000)(表示t组数据)接下来t行，每一行有一个整数n(0&lt;=n&lt;=10000000) Output 输出n！在8进制下的位数。 Examples intput 12343425 output 123213 思路 看到n的值最大是1e7就知道不能暴力出奇迹，而求n!的位数，就很自然想到要用斯特林公式:$n!\approx\sqrt{2\pi n}(\frac{n}{e})^n$ 虽然斯特林公式只是求阶乘的近似值，但即使在n很小的时候，斯特林公式的取值已经十分准确。 再求以8为底近似值的对数 +1(求其他进制下的位数类似，修改底数即可)。 注意:C语言中不支持任意底数的求对数运算，我们小小的转换一下$\log_x y=\frac{lgy}{lgx}$ 代码12345678910111213141516171819202122232425#include&lt;bits/stdc++.h&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt; #include&lt;string.h&gt; #include&lt;string&gt; #include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;using namespace std;const double Pi = acos(-1);const double e = 2.718281828459;int main()&#123; int t,n; scanf("%d",&amp;t); while(t--) &#123; scanf("%d",&amp;n); if(n==0||n==1) //注意特判 printf("1\n"); else printf("%d\n",(int)((log(2.0*Pi*n)/(log(8))/2.0 + n*log(n/e)/log(8))+1)); &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2 5 11 13的倍数(容斥原理)]]></title>
    <url>%2F2-5-11-13%E7%9A%84%E5%80%8D%E6%95%B0-%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[描述题目链接 给出一个数n，求1到n中，有多少个数不是2 5 11 13的倍数。 Intput 本题有多组输入每行一个数n，1&lt;=n&lt;=10^18. Output 每行输出输出不是2 5 11 13的倍数的数共有多少。 Examples intput 115 output 14 思路 遍历一遍感觉是很快了，时间复杂度O(n)，但还是会超时，其实这道题可以达到O(1)。 我们反过来思考，用总数减去倍数的个数，先不考虑公倍数的问题，再减去公倍数的个数。 假设有三个集合，那么 A∪B∪C = A+B+C - A∩B - B∩C - C∩A + A∩B∩C 代码12345678910111213141516#include&lt;stdio.h&gt;#include&lt;iostream&gt;using namespace std;#define LL long longint main()&#123; LL n,sum; while(scanf("%lld",&amp;n)!=EOF) &#123; sum=n/2+n/5+n/11+n/13; LL cnt=sum-n/10-n/22-n/26-n/55-n/65-n/143+n/110+n/130+n/286+n/715-n/1430; LL ans=n-cnt; printf("%lld\n",ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>容次原理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[欢迎来到Armin的博客]]></title>
    <url>%2FWelcome%2F</url>
    <content type="text"><![CDATA[欢迎来到Armin的博客，其他内容还在持续搭建（xjb摸索）中。 测试测试flash插件 测试插入代码1234567#include&lt;iostream&gt;using namespace std;int main()&#123; cout&lt;&lt;"Hello world!"&lt;&lt;endl;//测试注释 return 0;&#125; 测试链接分享代码 测试公式质能守恒方程可以用一$r=a-k*b r\div d-k*b\div d$个很简洁的方程式 $E=mc^2$ 来表达。 \ sum_{i=1}^n a_i=0f (x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2\ sum^{j-1}_{k=0}{\widehat{\gamma}_{kj} z_k}测试表格 姓名 分数 蒟蒻 59 神犇 100]]></content>
  </entry>
</search>
